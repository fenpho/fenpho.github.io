<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fenpho</title>
  
  
  <link href="https://fenpho.github.io/atom.xml" rel="self"/>
  
  <link href="https://fenpho.github.io/"/>
  <updated>2023-01-15T06:55:55.135Z</updated>
  <id>https://fenpho.github.io/</id>
  
  <author>
    <name>Fenpho</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kudzu-UI</title>
    <link href="https://fenpho.github.io/2022/12/23/Kudzu-UI/"/>
    <id>https://fenpho.github.io/2022/12/23/Kudzu-UI/</id>
    <published>2022-12-23T12:16:09.000Z</published>
    <updated>2023-01-15T06:55:55.135Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>兼容性注意<br>Vite 需要 Node.js 版本 14.18+，16+。然而，有些模板需要依赖更高的 Node 版本才能正常运行，当你的包管理器发出警告时，请注意升级你的 Node 版本。</p></blockquote><p>手把手教你从零到开始打造一个属于自己的vue3UI组件库。技术栈：Vite + Vue3 + Typescript + Less。</p><h3 id="一、使用-Vite-初始化项目"><a href="#一、使用-Vite-初始化项目" class="headerlink" title="一、使用 Vite 初始化项目"></a>一、使用 Vite 初始化项目</h3><p>在空白目录执行下列命令：</p><ol><li><p>在终端输入命令yarn create vite，运行后出现如下界面<br><img src="1.png"></p></li><li><p>输入项目名称进行，然后回车<br><img src="2.png"></p></li><li><p>按键盘上下键切换，回车确认，这里我们选择vue<br><img src="3.png"></p></li><li><p>选择TypeScript<br><img src="4.png"></p></li><li><p>安装依赖yarn create vite<br><img src="5.png"></p></li><li><p>跑起来看下yarn dev<br><img src="6.png"></p></li><li><p>效果如下图所示：<br><img src="7.png"></p></li></ol><h3 id="二、项目改造"><a href="#二、项目改造" class="headerlink" title="二、项目改造"></a>二、项目改造</h3><h4 id="1-添加jsx支持"><a href="#1-添加jsx支持" class="headerlink" title="1. 添加jsx支持"></a>1. 添加jsx支持</h4><p>安装插件：<br><code>yarn add @vitejs/plugin-vue-jsx</code></p><p>配置插件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> vueJsx <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue-jsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    vueJsx(&#123;</span><br><span class="line">      <span class="comment">// options are passed on to @vue/babel-plugin-jsx</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-添加less支持"><a href="#2-添加less支持" class="headerlink" title="2. 添加less支持"></a>2. 添加less支持</h4><p>安装插件：<br><code>npm add -D less</code></p><ol start="3"><li>目录及文件改造的tsx和less改造<br>改造前目录结构<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">│  .gitignore</span><br><span class="line">│  index.html</span><br><span class="line">│  package.json</span><br><span class="line">│  README.md</span><br><span class="line">│  tsconfig.json</span><br><span class="line">│  tsconfig.node.json</span><br><span class="line">│  vite.config.ts</span><br><span class="line">│  yarn-error.log</span><br><span class="line">│  yarn.lock</span><br><span class="line">│       </span><br><span class="line">├─public</span><br><span class="line">│      vite.svg</span><br><span class="line">│      </span><br><span class="line">└─src</span><br><span class="line">    │  App.vue</span><br><span class="line">    │  main.ts</span><br><span class="line">    │  style.css</span><br><span class="line">    │  vite-env.d.ts</span><br><span class="line">    │  </span><br><span class="line">    ├─assets</span><br><span class="line">    │      vue.svg</span><br><span class="line">    │      </span><br><span class="line">    └─components</span><br><span class="line">            HelloWorld.vue</span><br></pre></td></tr></table></figure></li></ol><p>将App.vue文件改为App.tsx</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vueLogo <span class="keyword">from</span> <span class="string">&#x27;./assets/vue.svg&#x27;</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./App.module.less&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  name: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> (</span><br><span class="line">      &lt;div id=<span class="string">&quot;App&quot;</span> <span class="class"><span class="keyword">class</span></span>=&#123;styles.App&#125;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;a href=<span class="string">&quot;https://vitejs.dev&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;</span><br><span class="line">            &lt;img src=<span class="string">&quot;/vite.svg&quot;</span> <span class="class"><span class="keyword">class</span></span>=&#123;styles.logo&#125; alt=<span class="string">&quot;Vite logo&quot;</span> /&gt;</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">          &lt;a href=<span class="string">&quot;https://vuejs.org/&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;</span><br><span class="line">            &lt;img src=&#123;vueLogo&#125; <span class="class"><span class="keyword">class</span></span>=&#123;<span class="string">`<span class="subst">$&#123;styles.logo&#125;</span> <span class="subst">$&#123;styles.vue&#125;</span>`</span>&#125; alt=<span class="string">&quot;Vue logo&quot;</span> /&gt;</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        Kudzu UI</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>新增文件App.modules.less</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.App</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">6em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1.5em</span>;</span><br><span class="line">    will-change: <span class="attribute">filter;</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">    &amp;</span>:hover &#123;</span><br><span class="line">      <span class="attribute">filter</span>: drop-shadow(<span class="number">0</span> <span class="number">0</span> <span class="number">2em</span> <span class="number">#646cff</span>aa);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.vue</span> &#123;</span><br><span class="line">    <span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">filter</span>: drop-shadow(<span class="number">0</span> <span class="number">0</span> <span class="number">2em</span> <span class="number">#42b883</span>aa);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将style.css改为style.less</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Inter, Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">color-scheme</span>: light dark;</span><br><span class="line">  <span class="attribute">color</span>: rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.87</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#242424</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">font-synthesis</span>: none;</span><br><span class="line">  <span class="attribute">text-rendering</span>: optimizeLegibility;</span><br><span class="line">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">  -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span><br><span class="line">  -webkit-text-size-adjust: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#646cff</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: inherit;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#535bf2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  place-items: center;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">3.2em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.6em</span> <span class="number">1.2em</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: inherit;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#1a1a1a</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">transition</span>: border-color <span class="number">0.25s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">border-color</span>: <span class="number">#646cff</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:focus</span>,</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:focus</span><span class="selector-tag">-visible</span> &#123;</span><br><span class="line">      <span class="attribute">outline</span>: <span class="number">4px</span> auto -webkit-focus-ring-color;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.card</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2em</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#app</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1280px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme</span>: light) &#123;</span><br><span class="line">  <span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#213547</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#747bff</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">button</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#f9f9f9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造后目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">│  .gitignore</span><br><span class="line">│  index.html</span><br><span class="line">│  package.json</span><br><span class="line">│  README.md</span><br><span class="line">│  tsconfig.json</span><br><span class="line">│  tsconfig.node.json</span><br><span class="line">│  vite.config.ts</span><br><span class="line">│  yarn-error.log</span><br><span class="line">│  yarn.lock</span><br><span class="line">│       </span><br><span class="line">├─public</span><br><span class="line">│      vite.svg</span><br><span class="line">│      </span><br><span class="line">└─src</span><br><span class="line">    │  App.tsx</span><br><span class="line">    │  App.modeles.less</span><br><span class="line">    │  main.ts</span><br><span class="line">    │  style.less</span><br><span class="line">    │  vite-env.d.ts</span><br><span class="line">    │  </span><br><span class="line">    ├─assets</span><br><span class="line">    │      vue.svg</span><br><span class="line">    │      </span><br><span class="line">    └─components</span><br></pre></td></tr></table></figure><h4 id="4-自适应布局"><a href="#4-自适应布局" class="headerlink" title="4. 自适应布局"></a>4. 自适应布局</h4><p>添加插件：postcss-px-to-viewport<br>将px单位转换为视口单位的 (vw, vh, vmin, vmax) 的 PostCSS 插件<br><code>yarn add -D postcss-px-to-viewport</code><br>使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vueJsx <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue-jsx&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pxtoviewport <span class="keyword">from</span> <span class="string">&#x27;postcss-px-to-viewport&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pxtoviewportConfig = pxtoviewport(&#123;</span><br><span class="line">  viewportWidth: <span class="number">1366</span>, <span class="comment">// 设计稿的视口宽度</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    vue(),</span><br><span class="line">    vueJsx(&#123;</span><br><span class="line">      <span class="comment">// options are passed on to @vue/babel-plugin-jsx</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  css: &#123;</span><br><span class="line">    postcss: &#123;</span><br><span class="line">      plugins: [pxtoviewportConfig]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="三、-组件库开发"><a href="#三、-组件库开发" class="headerlink" title="三、 组件库开发"></a>三、 组件库开发</h3><p>在根目录下新建目录：packages，后续开发的组件都放在该目录下</p><h4 id="1-工具函数准备"><a href="#1-工具函数准备" class="headerlink" title="1. 工具函数准备"></a>1. 工具函数准备</h4><p>在packages目录下新建utils目录<br>目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">packages</span><br><span class="line">│  index.ts &#x2F;&#x2F; 组件库导出文件</span><br><span class="line">│  list.json &#x2F;&#x2F; 组件列表</span><br><span class="line">└─utils</span><br><span class="line">    │  index.ts &#x2F;&#x2F; 模块导出文件</span><br><span class="line">    │  install.ts &#x2F;&#x2F; vue的install封装函数</span><br><span class="line">  │  util.ts &#x2F;&#x2F; 其他工具函数</span><br></pre></td></tr></table></figure><p>下面分别看看这些文件都是些什么内容。<br>packages/utils/index.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Internal code, don&#x27;t use in your app!</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./install&#x27;</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./util&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>packages/utils/install.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; App, Plugin &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> withInstall = (component: <span class="built_in">any</span>): <span class="function"><span class="params">Plugin</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">install</span>(<span class="params">app: App</span>)</span> &#123;</span><br><span class="line">      app.component(component.name, component);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>packages/utils/util.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getImageUrl = (src: <span class="built_in">string</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> URL(src, <span class="keyword">import</span>.meta.url).href</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-ku-button组件开发"><a href="#2-ku-button组件开发" class="headerlink" title="2. ku-button组件开发"></a>2. ku-button组件开发</h4><p>在packages目录下新建Button目录<br>目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">packages</span><br><span class="line">│  index.ts &#x2F;&#x2F; 组件库导出文件</span><br><span class="line">│  list.json &#x2F;&#x2F; 组件列表</span><br><span class="line">└─Button</span><br><span class="line">    │  index.ts &#x2F;&#x2F; 模块导出文件</span><br><span class="line">    │  </span><br><span class="line">    ├─demo</span><br><span class="line">    │      base.vue &#x2F;&#x2F; 实例</span><br><span class="line">    │      </span><br><span class="line">    ├─docs</span><br><span class="line">    │      README.md &#x2F;&#x2F; 组件文档</span><br><span class="line">    │      </span><br><span class="line">    └─src</span><br><span class="line">            index.tsx &#x2F;&#x2F; 组件本体</span><br><span class="line">            index.less &#x2F;&#x2F; 组件样式</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面分别看看这些文件都是些什么内容。<br>packages/Button/src/index.tsx<br>该文件是组件的本体，代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.less&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  name: <span class="string">&#x27;KuButton&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启用了类型推导</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// message: String</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  emits: &#123;</span><br><span class="line">    <span class="function"><span class="title">click</span>(<span class="params">payload: &#123; event: Event &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 执行运行时校验</span></span><br><span class="line">      <span class="keyword">return</span> payload.event</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; emit, slots &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handleClick = <span class="function">(<span class="params">event: Event</span>) =&gt;</span> &#123;</span><br><span class="line">      emit(<span class="string">&#x27;click&#x27;</span>, &#123; event &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> (</span><br><span class="line">      &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;ku-button&quot;</span> onClick=&#123;handleClick&#125; &gt;</span><br><span class="line">        &#123; slots.default ? slots.default() : <span class="literal">null</span> &#125;</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>packages/Button/src/index.less</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ku-button</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: gray;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid gray;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2000px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">  <span class="attribute">transition</span>: all ease .<span class="number">3s</span>;</span><br><span class="line">  user-select: <span class="attribute">none;</span></span><br><span class="line"><span class="attribute">  cursor</span>: pointer;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>packages/Button/index.ts<br>为了让组件库既允许完整引入：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.less&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> KudzuUI <span class="keyword">from</span> <span class="string">&#x27;../packages&#x27;</span></span><br><span class="line"></span><br><span class="line">createApp(App).use(KudzuUI).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>也允许按需引入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Button &#125; from &#39;kudzu-ui&#39;</span><br><span class="line"></span><br><span class="line">Vue.component(&#39;ku-button&#39;, Button)</span><br></pre></td></tr></table></figure><p>因此需要为每一个组件定义一个 VuePlugin 的引用方式。package/Button/index.ts 的内容如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withInstall &#125; <span class="keyword">from</span> <span class="string">&#x27;@kudzu/utils&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">&#x27;./src/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> kuButton = withInstall(Button)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; Button &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>补充：配置别名@kudzu</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>, <span class="comment">// This must be specified if &quot;paths&quot; is.</span></span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@kudzu/*&quot;</span>: [<span class="string">&quot;packages/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;@examples/*&quot;</span>: [<span class="string">&quot;examples/*&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">&#x27;@kudzu&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;./packages&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>packages/index.ts<br>该文件是作为组件库本身的导出文件，它默认导出了一个 VuePlugin，同时也导出了不同的组件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 根据 /packages 目录下的组件所生成的模块导出，请勿手动修改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; App, Plugin &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; KuButtonPlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/Button&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> kuPlugin: Plugin = &#123;</span><br><span class="line">  <span class="function"><span class="title">install</span>(<span class="params">app: App</span>)</span> &#123;</span><br><span class="line">    KuButtonPlugin.install?.(app)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> kuPlugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./components/Button&#x27;</span></span><br></pre></td></tr></table></figure><p>/packages/list.json<br>最后就是组件库的一个记述文件，用来记录了它里面组件的各种说明，这个我们后面会用到：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;compName&quot;</span>: <span class="string">&quot;Button&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;compCnName&quot;</span>: <span class="string">&quot;按钮&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;compDesc&quot;</span>: <span class="string">&quot;这是一个按钮&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;compClassName&quot;</span>: <span class="string">&quot;ku-button&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>完成了上述组件库目录的初始化以后，此时我们的 Kudzu-UI 是已经可以被业务侧直接使用了。<br>回到根目录下找到 src/main.ts 文件，我们把整个 Kudzu-UI 引入：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.less&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> KudzuUI <span class="keyword">from</span> <span class="string">&#x27;../packages&#x27;</span></span><br><span class="line"></span><br><span class="line">createApp(App).use(KudzuUI).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>改写 src/App.tsx，使用 <ku-button> 试一下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vueLogo <span class="keyword">from</span> <span class="string">&#x27;./assets/vue.svg&#x27;</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./App.module.less&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  name: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> (</span><br><span class="line">      &lt;div id=<span class="string">&quot;App&quot;</span> <span class="class"><span class="keyword">class</span></span>=&#123;styles.App&#125;&gt;</span><br><span class="line">        &lt;ku-button onClick=&#123;<span class="function">(<span class="params">a: Event</span>) =&gt;</span> <span class="built_in">console</span>.log(a)&#125;&gt;Kudzu UI Button&lt;/ku-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行 yarn dev 开启 Vite 的服务器以后，就可以直接在浏览器上看到效果了：<br><img src="8.png"></p><h4 id="3-实时可交互式文档"><a href="#3-实时可交互式文档" class="headerlink" title="3. 实时可交互式文档"></a>3. 实时可交互式文档</h4><p>一个组件库肯定不止有 Button 一种组件，每个组件都应该有它独立的文档。这个文档不仅有对组件各项功能的描述，更应该具有组件预览、组件代码查看等功能，我们可以把这种文档称之为“可交互式文档”。同时为了良好的组件开发体验，我们希望这个文档是实时的，这边修改代码，那边就可以在文档里实时地看到最新的效果。接下来我们就来实现这么一个功能。</p><p>将src目录重命名为examples目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">KUDZU-UI</span><br><span class="line">│  .gitignore</span><br><span class="line">│  index.html</span><br><span class="line">│  package-lock.json</span><br><span class="line">│  package.json</span><br><span class="line">│  README.md</span><br><span class="line">│  tsconfig.json</span><br><span class="line">│  tsconfig.node.json</span><br><span class="line">│  vite.config.ts</span><br><span class="line">│  yarn-error.log</span><br><span class="line">│  yarn.lock</span><br><span class="line">├─examples</span><br><span class="line">│  │  App.module.less</span><br><span class="line">│  │  App.tsx</span><br><span class="line">│  │  main.ts</span><br><span class="line">│  │  style.less</span><br><span class="line">│  │  vite-env.d.ts</span><br><span class="line">│  │  </span><br><span class="line">│  ├─assets</span><br><span class="line">│  │      vue.svg</span><br><span class="line">│  │      </span><br><span class="line">│  └─components</span><br><span class="line">├─packages</span><br><span class="line">│  │  index.ts</span><br><span class="line">│  │  list.json</span><br><span class="line">│  │  tree.md</span><br><span class="line">│  │  </span><br><span class="line">│  ├─Button</span><br><span class="line">│  │  │  index.ts</span><br><span class="line">│  │  │  </span><br><span class="line">│  │  ├─demo</span><br><span class="line">│  │  │      base.tsx</span><br><span class="line">│  │  │      </span><br><span class="line">│  │  ├─docs</span><br><span class="line">│  │  │      README.md</span><br><span class="line">│  │  │      </span><br><span class="line">│  │  └─src</span><br><span class="line">│  │          index.module.less</span><br><span class="line">│  │          index.tsx</span><br><span class="line">│  │          </span><br><span class="line">│  └─utils</span><br><span class="line">│          index.ts</span><br><span class="line">│          install.ts</span><br><span class="line">│          typescript.ts</span><br><span class="line">│          </span><br><span class="line">└─public</span><br><span class="line">        vite.svg</span><br></pre></td></tr></table></figure><p>修改对应配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ESNext&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;useDefineForClassFields&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;ESNext&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span>: <span class="string">&quot;Node&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span>: <span class="string">&quot;preserve&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;isolatedModules&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;lib&quot;</span>: [<span class="string">&quot;ESNext&quot;</span>, <span class="string">&quot;DOM&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;include&quot;</span>: [<span class="string">&quot;examples/**/*.ts&quot;</span>, <span class="string">&quot;examples/**/*.d.ts&quot;</span>, <span class="string">&quot;examples/**/*.tsx&quot;</span>, <span class="string">&quot;examples/**/*.vue&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;paths&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@kudzu/*&quot;</span>: [<span class="string">&quot;packages/*&quot;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;references&quot;</span>: [&#123; <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;./tsconfig.node.json&quot;</span> &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改引用<br>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Kudzu UI<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/examples/main.ts&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入vue-router<br>组件的文档一般是用 Markdown 来写，在这里也不例外。我们希望一个 Markdown 一个页面，因此需要使用 vue-router 来实现路由控制。<br>安装<br><code>yarn add vue-router@latest</code></p><blockquote><p>@latest表示最新版本<br>在根目录的 examples目录下新建 router.ts，写入如下代码：</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory, RouterOptions &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [&#123;</span><br><span class="line">  title: <span class="string">&#x27;按钮&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;Button&#x27;</span>,</span><br><span class="line">  path: <span class="string">&#x27;/components/Button&#x27;</span>,</span><br><span class="line">  component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">`@kudzu/Button/docs/README.md`</span>),</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routerConfig = &#123;</span><br><span class="line">  history: createWebHistory(),</span><br><span class="line">  routes,</span><br><span class="line">  <span class="function"><span class="title">scrollBehavior</span>(<span class="params">to: <span class="built_in">any</span>, <span class="keyword">from</span>: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.path !== <span class="keyword">from</span>.path) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">top</span>: <span class="number">0</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(routerConfig <span class="keyword">as</span> RouterOptions)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>修改ts配置文件<br>tsconfig.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ESNext&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;useDefineForClassFields&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;ESNext&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span>: <span class="string">&quot;Node&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span>: <span class="string">&quot;preserve&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;isolatedModules&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;lib&quot;</span>: [<span class="string">&quot;ESNext&quot;</span>, <span class="string">&quot;DOM&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;include&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;examples/**/*.ts&quot;</span>, <span class="string">&quot;examples/**/*.d.ts&quot;</span>, <span class="string">&quot;examples/**/*.tsx&quot;</span>, <span class="string">&quot;examples/**/*.vue&quot;</span>, </span><br><span class="line">    <span class="string">&quot;packages/**/*.ts&quot;</span>, <span class="string">&quot;packages/**/*.d.ts&quot;</span>, <span class="string">&quot;packages/**/*.tsx&quot;</span>, <span class="string">&quot;packages/**/*.vue&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;paths&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@kudzu/*&quot;</span>: [<span class="string">&quot;packages/*&quot;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;references&quot;</span>: [&#123; <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;./tsconfig.node.json&quot;</span> &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ps: 页面引用报错处理，添加对应声明即可<br>examples/vite-en.d.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;vite/client&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;*.vue&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> <span class="keyword">type</span> &#123; DefineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> component: DefineComponent&lt;&#123;&#125;, &#123;&#125;, <span class="built_in">any</span>&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> component</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&quot;*.less&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> classes: &#123; <span class="keyword">readonly</span> [key: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125;;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> classes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;*.md&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> <span class="keyword">type</span> &#123; ComponentOptions &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> Component: ComponentOptions</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> Component</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&quot;*.json&quot;</span></span><br></pre></td></tr></table></figure><p> 解析markdown<br>由于在路由文件中引入了一个 Markdown 文件，这个在默认的 Vite 配置里是无效的，我们需要引入 vite-plugin-md 插件来解析 Markdown 文件并把它变成 Vue 文件。<br>安装插件<br><code>yarn add vite-plugin-md -D</code><br>回到根目录下找到 vite.config.ts，配置该插件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> Markdown <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-md&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    vue(&#123; <span class="attr">include</span>: [<span class="regexp">/\.vue$/</span>, <span class="regexp">/\.md$/</span>] &#125;),</span><br><span class="line">    Markdown(),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时可能会遇到一个报错：<br><code>Cannot find package &#39;@rollup/pluginutils&#39;</code><br>安装对应的依赖即可<br><code>yarn add @rollup/pluginutils -D</code><br>这样配置以后，任意的 Markdown 文件都能像一个 Vue 文件一样被使用了。</p><p>页面结构和样式调整<br>回到examples/App.tsx，稍作改写，增加一个侧边栏和主区域：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./App.module.less&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ComponentList <span class="keyword">from</span> <span class="string">&#x27;@kudzu/list.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> ComponentsItem &#123;</span><br><span class="line">  compName: <span class="built_in">String</span>;</span><br><span class="line">  compZhName: <span class="built_in">String</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> LinkItem &#123;</span><br><span class="line">  path: <span class="built_in">String</span>;</span><br><span class="line">  name: <span class="built_in">String</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  name: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = reactive(&#123;</span><br><span class="line">      links: ComponentList.map(<span class="function">(<span class="params">item: ComponentsItem</span>) =&gt;</span> (&#123;</span><br><span class="line">        path: <span class="string">`/components/<span class="subst">$&#123;item.compName&#125;</span>`</span>,</span><br><span class="line">        name: item.compZhName</span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> (</span><br><span class="line">      &lt;div id=<span class="string">&quot;App&quot;</span> <span class="class"><span class="keyword">class</span></span>=&#123;styles.App&#125;&gt;</span><br><span class="line">        &lt;aside <span class="class"><span class="keyword">class</span></span>=&#123;styles.aside&#125;&gt;</span><br><span class="line">          &#123; data.links.map(<span class="function">(<span class="params">v: LinkItem</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">key</span>=<span class="string">&#123;v.path&#125;</span> <span class="attr">to</span>=<span class="string">&#123;v.path&#125;</span>&gt;</span>&#123; v.name &#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line">            &#125;) </span><br><span class="line">          &#125;</span><br><span class="line">        &lt;/aside&gt;</span><br><span class="line">        &lt;main <span class="class"><span class="keyword">class</span></span>=&#123;styles.main&#125;&gt;</span><br><span class="line">          &lt;router-view /&gt;</span><br><span class="line">        &lt;/main&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>样式重写<br>examples/style.less</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * cssreset</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">font</span>: normal <span class="number">14px</span>/<span class="number">1.5</span> <span class="string">&#x27;Lucida Console&#x27;</span>, <span class="string">&quot;monospace&quot;</span>, <span class="string">&quot;STKaiti&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-tag">span</span>,</span><br><span class="line"><span class="selector-tag">applet</span>,</span><br><span class="line"><span class="selector-tag">object</span>,</span><br><span class="line"><span class="selector-tag">iframe</span>,</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span>,</span><br><span class="line"><span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">blockquote</span>,</span><br><span class="line"><span class="selector-tag">pre</span>,</span><br><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">abbr</span>,</span><br><span class="line"><span class="selector-tag">acronym</span>,</span><br><span class="line"><span class="selector-tag">address</span>,</span><br><span class="line"><span class="selector-tag">big</span>,</span><br><span class="line"><span class="selector-tag">cite</span>,</span><br><span class="line"><span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">del</span>,</span><br><span class="line"><span class="selector-tag">dfn</span>,</span><br><span class="line"><span class="selector-tag">em</span>,</span><br><span class="line"><span class="selector-tag">img</span>,</span><br><span class="line"><span class="selector-tag">ins</span>,</span><br><span class="line"><span class="selector-tag">kbd</span>,</span><br><span class="line"><span class="selector-tag">q</span>,</span><br><span class="line"><span class="selector-tag">s</span>,</span><br><span class="line"><span class="selector-tag">samp</span>,</span><br><span class="line"><span class="selector-tag">small</span>,</span><br><span class="line"><span class="selector-tag">strike</span>,</span><br><span class="line"><span class="selector-tag">strong</span>,</span><br><span class="line"><span class="selector-tag">sub</span>,</span><br><span class="line"><span class="selector-tag">sup</span>,</span><br><span class="line"><span class="selector-tag">tt</span>,</span><br><span class="line"><span class="selector-tag">var</span>,</span><br><span class="line"><span class="selector-tag">b</span>,</span><br><span class="line"><span class="selector-tag">u</span>,</span><br><span class="line"><span class="selector-tag">i</span>,</span><br><span class="line"><span class="selector-tag">center</span>,</span><br><span class="line"><span class="selector-tag">dl</span>,</span><br><span class="line"><span class="selector-tag">dt</span>,</span><br><span class="line"><span class="selector-tag">dd</span>,</span><br><span class="line"><span class="selector-tag">ol</span>,</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>,</span><br><span class="line"><span class="selector-tag">form</span>,</span><br><span class="line"><span class="selector-tag">label</span>,</span><br><span class="line"><span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-tag">table</span>,</span><br><span class="line"><span class="selector-tag">caption</span>,</span><br><span class="line"><span class="selector-tag">tbody</span>,</span><br><span class="line"><span class="selector-tag">tfoot</span>,</span><br><span class="line"><span class="selector-tag">thead</span>,</span><br><span class="line"><span class="selector-tag">tr</span>,</span><br><span class="line"><span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">article</span>,</span><br><span class="line"><span class="selector-tag">aside</span>,</span><br><span class="line"><span class="selector-tag">canvas</span>,</span><br><span class="line"><span class="selector-tag">details</span>,</span><br><span class="line"><span class="selector-tag">embed</span>,</span><br><span class="line"><span class="selector-tag">figure</span>,</span><br><span class="line"><span class="selector-tag">figcaption</span>,</span><br><span class="line"><span class="selector-tag">footer</span>,</span><br><span class="line"><span class="selector-tag">header</span>,</span><br><span class="line"><span class="selector-tag">menu</span>,</span><br><span class="line"><span class="selector-tag">nav</span>,</span><br><span class="line"><span class="selector-tag">output</span>,</span><br><span class="line"><span class="selector-tag">ruby</span>,</span><br><span class="line"><span class="selector-tag">section</span>,</span><br><span class="line"><span class="selector-tag">summary</span>,</span><br><span class="line"><span class="selector-tag">time</span>,</span><br><span class="line"><span class="selector-tag">mark</span>,</span><br><span class="line"><span class="selector-tag">audio</span>,</span><br><span class="line"><span class="selector-tag">video</span>,</span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* HTML5 display-role reset for older browsers */</span></span><br><span class="line"><span class="selector-tag">article</span>,</span><br><span class="line"><span class="selector-tag">aside</span>,</span><br><span class="line"><span class="selector-tag">details</span>,</span><br><span class="line"><span class="selector-tag">figcaption</span>,</span><br><span class="line"><span class="selector-tag">figure</span>,</span><br><span class="line"><span class="selector-tag">footer</span>,</span><br><span class="line"><span class="selector-tag">header</span>,</span><br><span class="line"><span class="selector-tag">menu</span>,</span><br><span class="line"><span class="selector-tag">nav</span>,</span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">blockquote</span>,</span><br><span class="line"><span class="selector-tag">q</span> &#123;</span><br><span class="line">  <span class="attribute">quotes</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">blockquote</span>:<span class="selector-tag">before</span>,</span><br><span class="line"><span class="selector-tag">blockquote</span>:<span class="selector-tag">after</span>,</span><br><span class="line"><span class="selector-tag">q</span>:<span class="selector-tag">before</span>,</span><br><span class="line"><span class="selector-tag">q</span>:<span class="selector-tag">after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* custom */</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#7e8c8d</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::<span class="selector-tag">-webkit-scrollbar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::<span class="selector-tag">-webkit-scrollbar-track-piece</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::<span class="selector-tag">-webkit-scrollbar-thumb</span>:<span class="selector-tag">vertical</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: rgba(<span class="number">125</span>, <span class="number">125</span>, <span class="number">125</span>, <span class="number">0.7</span>);</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::<span class="selector-tag">-webkit-scrollbar-thumb</span>:<span class="selector-tag">horizontal</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: rgba(<span class="number">125</span>, <span class="number">125</span>, <span class="number">125</span>, <span class="number">0.7</span>);</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  -webkit-text-size-adjust: <span class="attribute">none;</span></span><br><span class="line"><span class="attribute">  -webkit-tap-highlight-color</span>: rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们往 /packages/Button/docs/README.md 里面随便写点东西：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 按钮组件</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ku-button</span>&gt;</span></span>我是自定义按钮<span class="xml"><span class="tag">&lt;/<span class="name">ku-button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>完成以后就能在浏览器上看到效果了：<br><img src="9.png"></p><p>5 添加文档首页<br>examples/docs/get-start.md</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section"># 葛藤UI</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 安装</span></span><br><span class="line"></span><br><span class="line"><span class="section">### npm 安装</span></span><br><span class="line">推荐使用 npm 的方式安装，它能更好地和 webpack 打包工具配合使用。</span><br><span class="line"></span><br><span class="line">\<span class="code">`npm i kudzu-ui -S\`</span></span><br><span class="line"></span><br><span class="line"><span class="section">### yarn 安装</span></span><br><span class="line"></span><br><span class="line">\<span class="code">`yarn add kudzu-ui -S\`</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 使用</span></span><br><span class="line"></span><br><span class="line">在 main.ts 中写入以下内容：</span><br><span class="line">\<span class="code">```javascript</span></span><br><span class="line"><span class="code">import &#123; createApp &#125; from &#x27;vue&#x27;</span></span><br><span class="line"><span class="code">import &#x27;@src/style.less&#x27;</span></span><br><span class="line"><span class="code">import App from &#x27;@src/App.vue&#x27;</span></span><br><span class="line"><span class="code">import router from &#x27;@src/router&#x27;</span></span><br><span class="line"><span class="code">import KudzuUI from &#x27;kudzu-ui&#x27;</span></span><br><span class="line"><span class="code">import &#x27;kudzu-ui/lib/style.css&#x27;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">createApp(App).use(router).use(KudzuUI).mount(&#x27;#app&#x27;)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">\```</span></span><br></pre></td></tr></table></figure><p>examples/router.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 根据 /packages 目录下的组件所生成的组件类侧边导航栏配置，请勿手动修改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">import</span> &#123; createRouter, createWebHistory, RouterOptions &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"> <span class="keyword">import</span> Index <span class="keyword">from</span> <span class="string">&#x27;./views/Index&#x27;</span></span><br><span class="line"> <span class="keyword">import</span> GetStart <span class="keyword">from</span> <span class="string">&#x27;./docs/get-start.md&#x27;</span></span><br><span class="line"> <span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">&#x27;../packages/components/Button/docs/README.md&#x27;</span> <span class="comment">// 单独列出，处理github pages的点击无法跳转问题</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Index&#x27;</span>,</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    component: Index,</span><br><span class="line">    redirect: <span class="string">&#x27;/get-start&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">&#x27;起步&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;GetStart&#x27;</span>,</span><br><span class="line">    path: <span class="string">&#x27;/get-start&#x27;</span>,</span><br><span class="line">    component: GetStart,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">&#x27;按钮&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Button&#x27;</span>,</span><br><span class="line">    path: <span class="string">&#x27;/components/button&#x27;</span>,</span><br><span class="line">    component: Button,</span><br><span class="line">  &#125;</span><br><span class="line"> ]</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> routerConfig = &#123;</span><br><span class="line">  history: createWebHistory(<span class="keyword">import</span>.meta.env.BASE_URL),</span><br><span class="line">  routes,</span><br><span class="line">  <span class="function"><span class="title">scrollBehavior</span>(<span class="params">to: <span class="built_in">any</span>, <span class="keyword">from</span>: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.path !== <span class="keyword">from</span>.path) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">top</span>: <span class="number">0</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(routerConfig <span class="keyword">as</span> RouterOptions)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="10.png"></p><p>由于我们全局引入了Kudzu UI，所以里面所注册的自定义组件都可以直接在 Markdown 文件中像普通 HTML 标签一样被写入并被正确渲染。但是这里也有另一个问题，就是这些组件都是静态的无事件的，无法执行 JS 逻辑。比如当我想要实现点击按钮触发 click 事件然后弹一个告警弹窗出来，是无法直接这么写的：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 按钮组件</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ku-button</span> @<span class="attr">click</span>=<span class="string">&quot;() =&gt;</span></span></span> &#123; alert(123) &#125;&quot;&gt;我是自定义按钮<span class="xml"><span class="tag"><span class="string">&lt;/ku-button&gt;</span></span></span></span><br></pre></td></tr></table></figure><p>那怎么办呢？还记得刚刚引入的解析 Markdown 的插件 vite-plugin-md 吗？仔细看它的文档，它是支持在 Markdown 里面写 setup 函数的！因此我们可以把需要执行 JS 逻辑的代码封装成一个组件，然后在 Markdown 里通过 setup 来引入。<br>首先在 packages/Button/demo目录下新建一个 base.vue：</p><blockquote><p>这边不像组件封装，需要较高的灵活度，故采用vue格式，便于将组件所有资源（dom结构，css样式和对应js事件）放在同一个文件中进行维护</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;base-ku-button&quot;&gt;</span><br><span class="line">    &lt;ku-button @click&#x3D;&quot;onClick(1)&quot;&gt;第一个&lt;&#x2F;ku-button&gt;</span><br><span class="line">    &lt;ku-button @click&#x3D;&quot;onClick(2)&quot;&gt;第二个&lt;&#x2F;ku-button&gt;</span><br><span class="line">    &lt;ku-button @click&#x3D;&quot;onClick(3)&quot;&gt;第三个&lt;&#x2F;ku-button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">defineOptions(&#123;</span><br><span class="line">  name: &#39;BaseButton&#39;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const onClick &#x3D; (num: Number) &#x3D;&gt; &#123; console.log(&#96;我是第 $&#123;num&#125; 个自定义按钮&#96;) &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;less&quot; scoped&gt;</span><br><span class="line">.base-ku-button &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 100px 100px 100px;</span><br><span class="line">  grid-gap: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>为了给组件命名，我们使用了宏defineOptions，而defineOptions的使用需要插件的支持，这边安装整个插件，后续若需要使用其他功能，便于扩展<br>安装插件<br><code>yarn add unplugin-vue-macros -D</code><br>配置插件，注意这边将vue相关的初始化都移动到该插件下面<br>vite.config.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vueJsx <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue-jsx&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pxtoviewport <span class="keyword">from</span> <span class="string">&#x27;postcss-px-to-viewport&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Markdown <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-md&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueMacros <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-macros/vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pxtoviewportConfig = pxtoviewport(&#123;</span><br><span class="line">  viewportWidth: <span class="number">1366</span>, <span class="comment">// 设计稿的视口宽度</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    VueMacros(&#123;</span><br><span class="line">      plugins: &#123;</span><br><span class="line">        vue: vue(&#123; <span class="attr">include</span>: [<span class="regexp">/\.vue$/</span>, <span class="regexp">/\.md$/</span>] &#125;),</span><br><span class="line">        vueJsx: vueJsx(&#123;</span><br><span class="line">          <span class="comment">// options are passed on to @vue/babel-plugin-jsx</span></span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    Markdown(),</span><br><span class="line">  ],</span><br><span class="line">  css: &#123;</span><br><span class="line">    postcss: &#123;</span><br><span class="line">      plugins: [pxtoviewportConfig]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">&#x27;@kudzu&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;./packages&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>tsconfig.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span>: [<span class="string">&quot;unplugin-vue-macros/macros-global&quot;</span> <span class="comment">/* ... */</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 Markdown 里把它引进来：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span></span><br><span class="line">import BaseKudzuButton from &#x27;../demo/base.vue&#x27;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section"># 按钮组件</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">BaseKudzuButton</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><p>最后就能实现点击响应了。<br><img src="11.png"><br>与此同时，如果我们对 <ku-button /> 的本体 Vue 文件进行任何的修改，都能够实时在文档中体现出来。</p><p>四、代码预览功能<br>可交互式文档已经基本弄好了，但还有一个问题，就是不能直观地预览代码。你可能会说，要预览代码很简单啊，直接在 Markdown 里面把代码贴进去不就好了？话虽如此并没有错，但是秉承着“偷懒才是第一生产力”，估计没有人喜欢把自己写过的代码再抄一遍，肯定是希望能够有个办法既能够在文档里把所写的 demo 展示出来，又能直接看到它的代码，比如说这样：<br><img src="12.png"></p><p>只要把组件放进一个 <code>&lt;Preview /&gt;</code> 标签内就能直接展示组件的代码，同时还具有代码高亮的功能，这才是可交互式文档真正具备的样子！接下来我们就来研究一下应该如何实现这个功能。<br>在 Vite 的开发文档里有记载到，它支持在资源的末尾加上一个后缀来控制所引入资源的类型。比如可以通过 import xx from ‘xx?raw’ 以字符串形式引入 xx 文件。基于这个能力，我们可以在 <code>&lt;Preview /&gt;</code> 组件中获取所需要展示的文件源码。</p><h4 id="1-新建一个-Preview-jsx-文件"><a href="#1-新建一个-Preview-jsx-文件" class="headerlink" title="1. 新建一个 Preview.jsx 文件"></a>1. 新建一个 Preview.jsx 文件</h4><p>首先来新建一个 Preview.jsx 文件，其核心内容是通过 Props 拿到源码的路径，然后通过动态 import 的方式把源码拿到。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, onMounted, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">/** 组件名称 */</span></span><br><span class="line">    compName: &#123;</span><br><span class="line">      <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="built_in">require</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/** 要显示代码的组件 */</span></span><br><span class="line">    demoName: &#123;</span><br><span class="line">      <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="built_in">require</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = reactive(&#123;</span><br><span class="line">      sourceCode: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    onMounted(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      data.sourceCode =  (</span><br><span class="line">        <span class="comment">// 此处只能使用相对路径或者绝对路径</span></span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">`../../packages/<span class="subst">$&#123;props.compName&#125;</span>/demo/<span class="subst">$&#123;props.demoName&#125;</span>.vue?raw`</span>)</span><br><span class="line">      ).default</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> (</span><br><span class="line">      &lt;pre&gt;&#123; data.sourceCode &#125;&lt;/pre&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>早期版本可能需要 @vite-ignore 的注释<br>因为 Vite 基于 Rollup，在 Rollup 当中动态 import 是被要求传入确定的路径，不能是这种动态拼接的路径。具体原因和其静态分析有关，感兴趣的同学可以自行搜索了解。此处加上该注释则会忽略 Rollup 的要求而直接支持该写法。但是这样的写法在 dev 模式下可用，待真正执行 build 构建了以后再运行会发现报错。其原因也是同样的，由于 Rollup 无法进行静态分析，因此它无法在构建阶段处理需要动态 import 的文件，导致会出现找不到对应资源的情况。只好判断环境变量，在 build 模式下通过 fetch 请求文件的源码来绕过。改写后如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isDev = <span class="keyword">import</span>.meta.env.MODE === <span class="string">&#x27;development&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isDev) &#123;</span><br><span class="line">  <span class="built_in">this</span>.sourceCode = (</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">import</span>(<span class="comment">/* @vite-ignore */</span> <span class="string">`../../packages/<span class="subst">$&#123;<span class="built_in">this</span>.compName&#125;</span>/docs/<span class="subst">$&#123;<span class="built_in">this</span>.demoName&#125;</span>.vue?raw`</span>)</span><br><span class="line">  ).default;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.sourceCode = <span class="keyword">await</span> fetch(<span class="string">`/packages/<span class="subst">$&#123;<span class="built_in">this</span>.compName&#125;</span>/docs/<span class="subst">$&#123;<span class="built_in">this</span>.demoName&#125;</span>.vue`</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.text());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假设构建后的输出目录为 /docs，记得在构建后也要把 /packages 目录复制过去，否则在 build 模式下运行会出现 404 的情况。</p><p>可能又有同学会问，为什么要这么麻烦，直接在 dev 模式下也走 fetch 请求的方式不行么？答案是不行，因为在 Vite 的 dev 模式下，它本来就是通过 http 请求去拉取文件资源并处理完了才给到了业务的那一层。因此在 dev 模式下通过 fetch 拿到的 Vue 文件源码是已经被 Vite 给处理过的。<br>拿到了源码以后，只需要展示出来即可：<br>packages/Button/docs/README.md</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span></span><br><span class="line">import Preview from &#x27;@examples/components/Preview&#x27;</span><br><span class="line">import BaseKudzuButton from &#x27;../demo/base.vue&#x27;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section"># 按钮组件</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">BaseKudzuButton</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Preview</span> <span class="attr">comp-name</span>=<span class="string">&#x27;Button&#x27;</span> <span class="attr">demo-name</span>=<span class="string">&#x27;base&#x27;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="13.png"></p><p>2 高亮代码<br>但是这样的源码展示非常丑，只有干巴巴的字符，我们有必要给它们加个高亮。高亮的方案我选择了 PrismJS，它非常小巧又灵活，只需要引入一个相关的 CSS 主题文件，然后执行 Prism.highlightAll() 即可。本例所使用的 CSS 主题文件已经放置在仓库，可以自行取用。<br>回到项目，执行<br><code>yarn add prismjs -D</code><br>安装 PrismJS，然后在 <code>&lt;Preview /&gt;</code> 组件中引入：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; nextTick &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> PrismJS <span class="keyword">from</span> <span class="string">&#x27;prismjs&#x27;</span> <span class="comment">// markdown高亮</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@examples/assets/prism.css&#x27;</span> <span class="comment">// 高亮主题</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    onMounted(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="comment">// 省略。。。</span></span><br><span class="line">      <span class="keyword">await</span> nextTick() <span class="comment">// 确保在源码都渲染好了以后再执行高亮</span></span><br><span class="line">      PrismJS.highlightAll()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此处ts会报错：添加对应声明即可<br>vite-env.d.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&quot;prismjs&quot;</span></span><br></pre></td></tr></table></figure><p>由于 PrismJS 没有支持 Vue 文件的声明，因此 Vue 的源码高亮是通过将其设置为 HTML 类型来实现的。在 <code>&lt;Preview /&gt;</code> 组件的模板中我们直接指定源码的类型为 HTML：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre class&#x3D;&quot;language-html&quot;&gt;&lt;code class&#x3D;&quot;language-html&quot;&gt;&#123;data.sourceCode&#125;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt; </span><br></pre></td></tr></table></figure><p>这样调整了以后，PrismJS 就会自动高亮源码了。</p><h4 id="3-优化使用方式以及样式"><a href="#3-优化使用方式以及样式" class="headerlink" title="3. 优化使用方式以及样式"></a>3. 优化使用方式以及样式</h4><p>更进一步，在Preview中添加插槽和相应样式<br>examples/components/Preview.tsx</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, onMounted, reactive, nextTick, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> PrismJS <span class="keyword">from</span> <span class="string">&#x27;prismjs&#x27;</span> <span class="comment">// markdown高亮</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@examples/assets/prism.css&#x27;</span> <span class="comment">// 高亮主题</span></span><br><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">&#x27;@examples/components/Preview.module.less&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">/** 组件名称 */</span></span><br><span class="line">    compName: &#123;</span><br><span class="line">      <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="built_in">require</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/** 要显示代码的组件 */</span></span><br><span class="line">    demoName: &#123;</span><br><span class="line">      <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="built_in">require</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; slots &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> sourceCode = ref&lt;<span class="built_in">any</span>&gt;(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">const</span> data = reactive(&#123;</span><br><span class="line">      sourceCode: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      height: <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    onMounted(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      data.sourceCode = (</span><br><span class="line">        <span class="comment">// 此处只能使用相对路径或者绝对路径</span></span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">`../../packages/<span class="subst">$&#123;props.compName&#125;</span>/demo/<span class="subst">$&#123;props.demoName&#125;</span>.vue?raw`</span>)</span><br><span class="line">      ).default</span><br><span class="line"></span><br><span class="line">      <span class="keyword">await</span> nextTick() <span class="comment">// 确保在源码都渲染好了以后再执行高亮</span></span><br><span class="line">      PrismJS.highlightAll()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> changeSourceCodeStatus = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log()</span><br><span class="line">      data.height === <span class="string">&#x27;0&#x27;</span> ? data.height = getComputedStyle(sourceCode.value).height : data.height = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">      nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 确保在源码都渲染好了以后再执行高亮</span></span><br><span class="line">        PrismJS.highlightAll()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> (</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=&#123;style.preview&#125;&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=&#123;style.display&#125;&gt;&#123; slots.default ? slots.default() : <span class="literal">null</span> &#125;&lt;/div&gt;</span><br><span class="line">        &lt;pre </span><br><span class="line">          style=&#123;&#123; <span class="attr">height</span>: data.height, <span class="attr">padding</span>: data.height === <span class="string">&#x27;0&#x27;</span> ? <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;20px&#x27;</span> &#125;&#125;</span><br><span class="line">          <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;language-html&quot;</span></span><br><span class="line">        &gt;</span><br><span class="line">          &lt;code ref=&#123;sourceCode&#125; <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;language-html&quot;</span>&gt;&#123;data.sourceCode&#125;&lt;/code&gt;</span><br><span class="line">        &lt;/pre&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=&#123;style.control&#125; onClick=&#123;changeSourceCodeStatus&#125;&gt;</span><br><span class="line">          &#123; data.height === <span class="string">&#x27;hide&#x27;</span> ? <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>显示代码<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> : <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>隐藏代码<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> &#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>examples/components/Preview.module.less</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.preview</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ebebeb</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: .<span class="number">2s</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="number">0</span> rgb(<span class="number">232</span> <span class="number">237</span> <span class="number">250</span> / <span class="number">60%</span>), <span class="number">0</span> <span class="number">2px</span> <span class="number">4px</span> <span class="number">0</span> rgb(<span class="number">232</span> <span class="number">237</span> <span class="number">250</span> / <span class="number">50%</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.display</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">24px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.control</span> &#123;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#eaeefb</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">44px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">44px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-bottom-left-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">border-bottom-right-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#d3dce6</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    user-select: <span class="attribute">none;</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">    &amp;</span>:hover &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#409eff</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#f9fafc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="selector-tag">pre</span><span class="selector-attr">[class*=language-]</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fafafa</span>;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">2s</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改调用方式<br>packages/Button/docs/README.md</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span></span><br><span class="line">import Preview from &#x27;@examples/components/Preview&#x27;</span><br><span class="line">import BaseKudzuButton from &#x27;../demo/base.vue&#x27;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section"># 按钮组件</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Preview</span> <span class="attr">comp-name</span>=<span class="string">&#x27;Button&#x27;</span> <span class="attr">demo-name</span>=<span class="string">&#x27;base&#x27;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">BaseKudzuButton</span> /&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">Preview</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调整后效果如下：<br><img src="15.png"></p><h3 id="五、命令式新建组件"><a href="#五、命令式新建组件" class="headerlink" title="五、命令式新建组件"></a>五、命令式新建组件</h3><p>到目前为止，我们的整个“实时可交互式文档”已经搭建完了，是不是意味着可以交付给其他同学进行真正的组件开发了呢？假设你是另一个开发同学，我跟你说：“你只要在这里，这里和这里新建这些文件，然后在这里和这里修改一下配置就可以新建一个组件了！”你会不会很想打人？作为组件开发者的你，并不想关心我的配置是怎样的，框架是怎么跑起来的，只希望能够在最短时间内就能够初始化一个新的组件然后着手开发。为了满足这个想法，我们有必要把之前处理的步骤变得更加自动化一些，学习成本更低一些。</p><p>整体思路是：在终端回答了三个问题后，自动就生成了一个新的组件 Foo。与此同时，无论是新建文件还是修改配置都是一键完成，完全不需要人工干预，接下来的工作只需要围绕 Foo 这一个新组件开展即可。我们可以把这种一键生成组件的方式成为“命令式新建组件”。<br>要实现这个功能，我们 inquirer 和 handlebars 这两个工具。前者用于创建交互式终端提出问题并收集答案；后者用于根据模板生成内容。我们首先来做交互式终端。</p><blockquote><p>node环境下使用import/export<br>用前须知<br>● Node 版本需在 9.0 及以上<br>● 不加 loader 时候，使用 import/export 的文件后缀名必须为 .mjs</p></blockquote><p>回到根目录下，新建 /script/generater 目录，然后创建一个 infoCollector.mjs 文件：</p><figure class="highlight mjs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> inquirer <span class="keyword">from</span> <span class="string">&#x27;inquirer&#x27;</span></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs-extra&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path, &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span></span><br><span class="line"><span class="keyword">const</span> filename = fileURLToPath(<span class="keyword">import</span>.meta.url)</span><br><span class="line"><span class="keyword">const</span> __dirname = path.dirname(filename)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> listFilePath = <span class="string">&#x27;../../packages/list.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RegxMap = &#123;</span><br><span class="line">  IS_COMP_NAME: <span class="regexp">/^[A-Z]/</span>,</span><br><span class="line">  IS_COMP_CN_NAME: <span class="regexp">/^[\u4e00-\u9fa5]*$/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> kebabCase = <span class="function"><span class="params">string</span> =&gt;</span> string</span><br><span class="line">  .replace(<span class="regexp">/([a-z])([A-Z])/g</span>, <span class="string">&quot;$1-$2&quot;</span>)</span><br><span class="line">  .replace(<span class="regexp">/[\s_]+/g</span>, <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">  .toLowerCase();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> meta = <span class="keyword">await</span> inquirer</span><br><span class="line">    .prompt([</span><br><span class="line">      &#123;</span><br><span class="line">        type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;请输入你要新建的组件名（纯英文，大写开头）：&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;compName&#x27;</span>,</span><br><span class="line">        <span class="function"><span class="title">validate</span>(<span class="params">answer</span>)</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> done = <span class="built_in">this</span>.async()</span><br><span class="line">          <span class="keyword">const</span> validateRes = RegxMap.IS_COMP_NAME.test(answer)</span><br><span class="line">          <span class="keyword">if</span> (!validateRes) &#123;</span><br><span class="line">            done(<span class="string">&#x27;请按要求输入正确的组件名！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">const</span> listData = fs.readJSONSync(resolve(__dirname, listFilePath))</span><br><span class="line">          <span class="keyword">if</span> (listData.find(<span class="function"><span class="params">item</span> =&gt;</span> item.compName === answer)) &#123;</span><br><span class="line">            done(<span class="string">&#x27;已存在同名组件，请确认后更换名字再重试。&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">          &#125;</span><br><span class="line">          done(<span class="literal">null</span>, <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;请输入你要新建的组件名（中文）：&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;compCnName&#x27;</span>,</span><br><span class="line">        <span class="function"><span class="title">validate</span>(<span class="params">answer</span>)</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> done = <span class="built_in">this</span>.async()</span><br><span class="line">          <span class="keyword">const</span> validateRes = RegxMap.IS_COMP_CN_NAME.test(answer)</span><br><span class="line">          <span class="keyword">if</span> (!validateRes) &#123;</span><br><span class="line">            done(<span class="string">&#x27;请按要求输入正确的组件名！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">          &#125;</span><br><span class="line">          done(<span class="literal">null</span>, <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;请输入组件的功能描述：&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;compDesc&#x27;</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">&#x27;默认：这是一个新组件&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ])</span><br><span class="line">  <span class="keyword">const</span> &#123; compName &#125; = meta</span><br><span class="line">  meta.compClassName = kebabCase(compName)</span><br><span class="line">  <span class="keyword">return</span> meta</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 node 运行该文件时，会在终端内依次提出三个组件信息相关的问题，并把答案 compName（组件英文名），compCnName （组件中文名）和 compDesc（组件描述）保存在 meta 对象中并导出。<br>收集到了组件相关信息后，就要通过 handlebars 替换模板中的内容，生成或修改文件了。<br>在 /script/generater 中新建一个 .template 目录，然后根据需要去建立新组件所需的所有文件的模板。在我们的框架中，一个组件的目录是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Foo</span><br><span class="line">├── demo</span><br><span class="line">│   └── base.vue</span><br><span class="line">├── docs</span><br><span class="line">│   ├── README.md</span><br><span class="line">├── index.ts</span><br><span class="line">└── src</span><br><span class="line">    ├── index.tsx</span><br><span class="line">    └── index.less</span><br></pre></td></tr></table></figure><p>需要新建 packages/components/src/index.ts.tpl，packages/components/src/index.tsx.tpl，packages/components/src/index.less.tpl，packages/components/docs/README.md.tpl 和 packages/components/demo/base.vue.tpl，examples/router.ts.tpl，packages/index.ts.tpl。同时由于新组件需要一个新的路由，因此router.ts 也是需要一个对应的模板。由于篇幅关系就不全展示了，只挑最核心的 index.ts.tpl 来看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; withInstall &#125; from &#39;@kudzu&#x2F;utils&#39;</span><br><span class="line">import &#123;&#123; compName &#125;&#125; from &#39;.&#x2F;src&#x2F;index&#39;</span><br><span class="line"></span><br><span class="line">export const Ku&#123;&#123; compName &#125;&#125;Plugin &#x3D; withInstall(&#123;&#123; compName &#125;&#125;)</span><br><span class="line"></span><br><span class="line">export &#123; &#123;&#123; compName &#125;&#125; &#125;</span><br></pre></td></tr></table></figure><p>位于双括号<code>&#123;&#123;&#125;&#125;</code> 中的内容最终会被 handlebars 所替换，比如我们已经得知一个新组件的信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;compName&quot;: &quot;Button&quot;,</span><br><span class="line">  &quot;compZhName&quot;: &quot;按钮&quot;,</span><br><span class="line">  &quot;compDesc&quot;: &quot;这是一个按钮&quot;,</span><br><span class="line">  &quot;compClassName&quot;: &quot;ku-button&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么模板 index.ts.tpl 最终会被替换成这样：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withInstall &#125; <span class="keyword">from</span> <span class="string">&#x27;@kudzu/utils&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">&#x27;./src/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> KuButtonPlugin = withInstall(Button)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; Button &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新建模板替换文件<br>script/generater/tplReplacer.mjs模板替换的代码如下：</p><figure class="highlight mjs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> handlebars <span class="keyword">from</span> <span class="string">&#x27;handlebars&#x27;</span></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs-extra&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path, &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span></span><br><span class="line"><span class="keyword">const</span> filename = fileURLToPath(<span class="keyword">import</span>.meta.url)</span><br><span class="line"><span class="keyword">const</span> __dirname = path.dirname(filename)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件相关</span></span><br><span class="line"><span class="keyword">const</span> getTplFilePath = <span class="function">(<span class="params">meta</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="comment">// docs 目录</span></span><br><span class="line">  readme: &#123;</span><br><span class="line">    <span class="keyword">from</span>: <span class="string">&#x27;./.template/packages/components/docs/README.md.tpl&#x27;</span>,</span><br><span class="line">    to: <span class="string">`../../packages/<span class="subst">$&#123;meta.compName&#125;</span>/docs/README.md`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// demo 目录</span></span><br><span class="line">  demo: &#123;</span><br><span class="line">    <span class="keyword">from</span>: <span class="string">&#x27;./.template/packages/components/demo/base.vue.tpl&#x27;</span>,</span><br><span class="line">    to: <span class="string">`../../packages/<span class="subst">$&#123;meta.compName&#125;</span>/demo/base.vue`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// src 目录</span></span><br><span class="line">  tsx: &#123;</span><br><span class="line">    <span class="keyword">from</span>: <span class="string">&#x27;./.template/packages/components/src/index.tsx.tpl&#x27;</span>,</span><br><span class="line">    to: <span class="string">`../../packages/<span class="subst">$&#123;meta.compName&#125;</span>/src/index.tsx`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  less: &#123;</span><br><span class="line">    <span class="keyword">from</span>: <span class="string">&#x27;./.template/packages/components/src/index.less.tpl&#x27;</span>,</span><br><span class="line">    to: <span class="string">`../../packages/<span class="subst">$&#123;meta.compName&#125;</span>/src/index.less`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 根目录</span></span><br><span class="line">  index: &#123;</span><br><span class="line">    <span class="keyword">from</span>: <span class="string">&#x27;./.template/packages/components/index.ts.tpl&#x27;</span>,</span><br><span class="line">    to: <span class="string">`../../packages/<span class="subst">$&#123;meta.compName&#125;</span>/index.ts`</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compFilesTplReplacer = <span class="function">(<span class="params">meta</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> filePaths = getTplFilePath(meta)</span><br><span class="line">  <span class="built_in">Object</span>.keys(filePaths).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fileTpl = fs.readFileSync(resolve(__dirname, filePaths[key].from), <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> fileContent = handlebars.compile(fileTpl)(meta)</span><br><span class="line">    fs.outputFile(resolve(__dirname, filePaths[key].to), fileContent, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 packages/list.json 并更新</span></span><br><span class="line"><span class="keyword">const</span> listJsonTplReplacer = <span class="function">(<span class="params">meta</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> listFilePath = <span class="string">&#x27;../../packages/list.json&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> listFileTpl = fs.readFileSync(resolve(__dirname, listFilePath), <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> listFileContent = <span class="built_in">JSON</span>.parse(listFileTpl)</span><br><span class="line">  listFileContent.push(meta)</span><br><span class="line">  <span class="keyword">const</span> newListFileContentFile = <span class="built_in">JSON</span>.stringify(listFileContent, <span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">  fs.writeFile(resolve(__dirname, listFilePath), newListFileContentFile, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> listFileContent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新 router.ts</span></span><br><span class="line"><span class="keyword">const</span> routerTplReplacer = <span class="function">(<span class="params">listFileContent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> routerFileFrom = <span class="string">&#x27;./.template/examples/router.ts.tpl&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> routerFileTo = <span class="string">&#x27;../../examples/router.ts&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> routerFileTpl = fs.readFileSync(resolve(__dirname, routerFileFrom), <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> routerMeta = &#123;</span><br><span class="line">    routes: listFileContent.map(<span class="function"><span class="params">comp</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`&#123;</span></span><br><span class="line"><span class="string">        title: &#x27;<span class="subst">$&#123;comp.compCnName&#125;</span>&#x27;,</span></span><br><span class="line"><span class="string">        name: &#x27;<span class="subst">$&#123;comp.compName&#125;</span>&#x27;,</span></span><br><span class="line"><span class="string">        path: &#x27;/components/<span class="subst">$&#123;comp.compName&#125;</span>&#x27;,</span></span><br><span class="line"><span class="string">        component: () =&gt; import(&#x27;../packages/<span class="subst">$&#123;comp.compName&#125;</span>/docs/README.md&#x27;),</span></span><br><span class="line"><span class="string">      &#125;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> routerFileContent = handlebars.compile(routerFileTpl, &#123; <span class="attr">noEscape</span>: <span class="literal">true</span> &#125;)(routerMeta)</span><br><span class="line">  fs.outputFile(resolve(__dirname, routerFileTo), routerFileContent, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新 index.ts</span></span><br><span class="line"><span class="keyword">const</span> installTsTplReplacer = <span class="function">(<span class="params">listFileContent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> installFileFrom = <span class="string">&#x27;./.template/packages/index.ts.tpl&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> installFileTo = <span class="string">&#x27;../../packages/index.ts&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> installFileTpl = fs.readFileSync(resolve(__dirname, installFileFrom), <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> installMeta = &#123;</span><br><span class="line">    importPlugins: listFileContent.map(<span class="function">(<span class="params">&#123; compName &#125;</span>) =&gt;</span> <span class="string">`import &#123; Ku<span class="subst">$&#123;compName&#125;</span>Plugin &#125; from &#x27;./<span class="subst">$&#123;compName&#125;</span>&#x27;;`</span>).join(<span class="string">&#x27;\n&#x27;</span>),</span><br><span class="line">    installPlugins: listFileContent.map(<span class="function">(<span class="params">&#123; compName &#125;</span>) =&gt;</span> <span class="string">`Ku<span class="subst">$&#123;compName&#125;</span>Plugin.install?.(app);`</span>).join(<span class="string">&#x27;\n    &#x27;</span>),</span><br><span class="line">    exportPlugins: listFileContent.map(<span class="function">(<span class="params">&#123; compName &#125;</span>) =&gt;</span> <span class="string">`export * from &#x27;./<span class="subst">$&#123;compName&#125;</span>&#x27;`</span>).join(<span class="string">&#x27;\n&#x27;</span>),</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> installFileContent = handlebars.compile(installFileTpl, &#123; <span class="attr">noEscape</span>: <span class="literal">true</span> &#125;)(installMeta)</span><br><span class="line">  fs.outputFile(resolve(__dirname, installFileTo), installFileContent, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (meta) =&gt; &#123;</span><br><span class="line">  compFilesTplReplacer(meta)</span><br><span class="line">  <span class="keyword">const</span> listFileContent = listJsonTplReplacer(meta)</span><br><span class="line">  routerTplReplacer(listFileContent)</span><br><span class="line">  installTsTplReplacer(listFileContent)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`组件新建完毕，请前往 packages/<span class="subst">$&#123;meta.compName&#125;</span> 目录进行开发`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中的 listFileContent 即为 /packages/list.json 中的内容，这个 JSON 文件也是需要根据新组件而动态更新。<br>在完成了模板替换的相关逻辑后，就可以把它们都收归到一个可执行文件中(script/generater/index.mjs)：</p><figure class="highlight mjs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> infoCollector <span class="keyword">from</span> <span class="string">&#x27;./infoCollector.mjs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> tplReplacer <span class="keyword">from</span> <span class="string">&#x27;./tplReplacer.mjs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> meta = <span class="keyword">await</span> infoCollector()</span><br><span class="line">  tplReplacer(meta)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run()</span><br></pre></td></tr></table></figure><p>新增一个 npm script 到 package.json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;gen&quot;</span>: <span class="string">&quot;node --experimental-modules ./script/generater/index.mjs&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装相应依赖<br><code>yarn add fs-extra inquirer handlebars -D</code><br>接下来只要执行 yarn gen 就可以进入交互式终端，回答问题自动完成新建组件文件、修改配置的功能，并能够在可交互式文档中实时预览效果。</p><h3 id="六、添加主题文件"><a href="#六、添加主题文件" class="headerlink" title="六、添加主题文件"></a>六、添加主题文件</h3><p>新建exeamples/theme/index.less文件</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#colors</span>() &#123;</span><br><span class="line">  <span class="selector-class">.dust-red</span>() &#123;</span><br><span class="line">    <span class="comment">// Dust Red / 薄暮</span></span><br><span class="line">    <span class="comment">// 斗志、奔放</span></span><br><span class="line">    red-1: #fff1f0;</span><br><span class="line">    red-2: #ffccc7;</span><br><span class="line">    red-3: #ffa39e;</span><br><span class="line">    red-4: #ff7875;</span><br><span class="line">    red-5: #ff4d4f;</span><br><span class="line">    red-6: #f5222d;</span><br><span class="line">    red-7: #cf1322;</span><br><span class="line">    red-8: #a8071a;</span><br><span class="line">    red-9: #820014;</span><br><span class="line">    red-10: #5c0011;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.lime</span>() &#123;</span><br><span class="line">    <span class="comment">// Lime / 青柠</span></span><br><span class="line">    <span class="comment">// 自然、生机</span></span><br><span class="line">    lime-1: #fcffe6;</span><br><span class="line">    lime-2: #f4ffb8;</span><br><span class="line">    lime-3: #eaff8f;</span><br><span class="line">    lime-4: #d3f261;</span><br><span class="line">    lime-5: #bae637;</span><br><span class="line">    lime-6: #a0d911;</span><br><span class="line">    lime-7: #7cb305;</span><br><span class="line">    lime-8: #5b8c00;</span><br><span class="line">    lime-9: #3f6600;</span><br><span class="line">    lime-10: #254000;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.daybreak-blue</span>() &#123;</span><br><span class="line">    <span class="comment">// Daybreak Blue / 拂晓蓝</span></span><br><span class="line">    <span class="comment">// 包容、科技、普惠</span></span><br><span class="line">    blue-1: #e6f7ff;</span><br><span class="line">    blue-2: #bae7ff;</span><br><span class="line">    blue-3: #91d5ff;</span><br><span class="line">    blue-4: #69c0ff;</span><br><span class="line">    blue-5: #40a9ff;</span><br><span class="line">    blue-6: #1890ff;</span><br><span class="line">    blue-7: #096dd9;</span><br><span class="line">    blue-8: #0050b3;</span><br><span class="line">    blue-9: #003a8c;</span><br><span class="line">    blue-10: #002766;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------- Colors -----------</span></span><br><span class="line"><span class="variable">@primary-color:</span> #colors.lime[lime-<span class="number">6</span>];</span><br></pre></td></tr></table></figure><p>在App.module.less等中引用，并使用主题色</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;./theme/index.less&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.App</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.aside</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.item</span> &#123;</span><br><span class="line">      <span class="selector-tag">&amp;</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">        <span class="selector-tag">a</span> &#123;</span><br><span class="line">          <span class="attribute">color</span>: <span class="variable">@primary-color</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">h1</span> &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">      <span class="attribute">font-weight</span>: bold;</span><br><span class="line">      <span class="attribute">margin-bottom</span>: <span class="number">16px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，在packages下也要新建一个主题文件，并将组件移动components目录下</p><h3 id="七、库模式"><a href="#七、库模式" class="headerlink" title="七、库模式"></a>七、库模式</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  build: &#123;</span><br><span class="line">    lib: &#123;</span><br><span class="line">      <span class="comment">// Could also be a dictionary or array of multiple entry points</span></span><br><span class="line">      entry: resolve(__dirname, <span class="string">&#x27;lib/main.js&#x27;</span>),</span><br><span class="line">      name: <span class="string">&#x27;MyLib&#x27;</span>,</span><br><span class="line">      <span class="comment">// the proper extensions will be added</span></span><br><span class="line">      fileName: <span class="string">&#x27;my-lib&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    rollupOptions: &#123;</span><br><span class="line">      <span class="comment">// 确保外部化处理那些你不想打包进库的依赖</span></span><br><span class="line">      external: [<span class="string">&#x27;vue&#x27;</span>],</span><br><span class="line">      output: &#123;</span><br><span class="line">        <span class="comment">// 在 UMD 构建模式下为这些外部化的依赖提供一个全局变量</span></span><br><span class="line">        globals: &#123;</span><br><span class="line">          vue: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// lib/main.js</span></span><br><span class="line"><span class="keyword">import</span> Foo <span class="keyword">from</span> <span class="string">&#x27;./Foo.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Bar <span class="keyword">from</span> <span class="string">&#x27;./Bar.vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> &#123; Foo, Bar &#125;</span><br></pre></td></tr></table></figure><p>推荐在你库的 package.json 中使用如下格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;my-lib&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;files&quot;</span>: [<span class="string">&quot;dist&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;./dist/my-lib.umd.cjs&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;./dist/my-lib.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;exports&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;.&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;import&quot;</span>: <span class="string">&quot;./dist/my-lib.js&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;require&quot;</span>: <span class="string">&quot;./dist/my-lib.umd.cjs&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="八、分开文档和库的构建逻辑"><a href="#八、分开文档和库的构建逻辑" class="headerlink" title="八、分开文档和库的构建逻辑"></a>八、分开文档和库的构建逻辑</h3><p>在默认的 Vite 配置中，执行 yarn build 所构建出来的产物是“可交互式文档网站”，并非“组件库”本身。为了构建一个 kudzu-ui 组件库并发布到 npm，我们需要将构建的逻辑分开。<br>在script根目录下添加一个 build 目录，依次写入 base.ts，lib.ts 和 doc.ts，分别为基础配置、库配置和文档配置。</p><p>base.ts<br>基础配置，需要确定路径别名、配置 Vue 插件和 Markdown 插件用于对应文件的解析。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vueJsx <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue-jsx&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pxtoviewport <span class="keyword">from</span> <span class="string">&#x27;postcss-px-to-viewport&#x27;</span> <span class="comment">// 自适应vh、vw</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Markdown <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-md&#x27;</span> <span class="comment">// markdown解析</span></span><br><span class="line"><span class="keyword">import</span> VueMacros <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-macros/vite&#x27;</span> <span class="comment">// vue 宏定义defineOptions等</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pxtoviewportConfig = pxtoviewport(&#123;</span><br><span class="line">  viewportWidth: <span class="number">1366</span>, <span class="comment">// 设计稿的视口宽度</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    VueMacros(&#123;</span><br><span class="line">      plugins: &#123;</span><br><span class="line">        vue: vue(&#123; <span class="attr">include</span>: [<span class="regexp">/\.vue$/</span>, <span class="regexp">/\.md$/</span>] &#125;),</span><br><span class="line">        vueJsx: vueJsx(&#123;</span><br><span class="line">          <span class="comment">// options are passed on to @vue/babel-plugin-jsx</span></span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    Markdown(),</span><br><span class="line">  ],</span><br><span class="line">  css: &#123;</span><br><span class="line">    postcss: &#123;</span><br><span class="line">      plugins: [pxtoviewportConfig]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">&#x27;@kudzu&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;../../packages&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;@examples&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;../../examples&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>lib.ts<br>库构建，用于构建位于 /packages 目录的组件库，同时需要 vite-plugin-dts 来帮助把一些 TS 声明文件给打包出来。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base <span class="keyword">from</span> <span class="string">&#x27;./base&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> dts <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-dts&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  ...base,</span><br><span class="line">  build: &#123;</span><br><span class="line">    outDir: <span class="string">&#x27;lib&#x27;</span>,</span><br><span class="line">    lib: &#123;</span><br><span class="line">      <span class="comment">// Could also be a dictionary or array of multiple entry points</span></span><br><span class="line">      entry: path.resolve(__dirname, <span class="string">&#x27;../../packages/index.ts&#x27;</span>),</span><br><span class="line">      name: <span class="string">&#x27;KudzuUI&#x27;</span>,</span><br><span class="line">      <span class="comment">// the proper extensions will be added</span></span><br><span class="line">      fileName: <span class="string">&#x27;kudzu-ui&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    rollupOptions: &#123;</span><br><span class="line">      <span class="comment">// 确保外部化处理那些你不想打包进库的依赖</span></span><br><span class="line">      external: [<span class="string">&#x27;vue&#x27;</span>],</span><br><span class="line">      output: &#123;</span><br><span class="line">        <span class="comment">// 在 UMD 构建模式下为这些外部化的依赖提供一个全局变量</span></span><br><span class="line">        globals: &#123;</span><br><span class="line">          vue: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    ...base.plugins,</span><br><span class="line">    dts(),</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>doc.ts<br>交互式文档构建配置，跟 base 是几乎一样的，只需要修改输出目录为 docs 即可。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base <span class="keyword">from</span> <span class="string">&#x27;./base&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  ...base,</span><br><span class="line">  build: &#123;</span><br><span class="line">    outDir: <span class="string">&#x27;docs&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>构建文档时需要把 /packages 目录也一并复制到输出目录，拷贝目录代码如下：</p><figure class="highlight mjs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该模块在window下运行会有问题，windows系统建议使用git base运行build:doc命令</span></span><br><span class="line"><span class="keyword">import</span> &#123; spawn &#125; <span class="keyword">from</span> <span class="string">&#x27;child_process&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> copy = <span class="function">(<span class="params">src, dist</span>) =&gt;</span> &#123;</span><br><span class="line">  spawn(<span class="string">&#x27;cp&#x27;</span>, [<span class="string">&#x27;-r&#x27;</span>, , src, dist])</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">copy(<span class="string">&#x27;./packages&#x27;</span>, <span class="string">&#x27;./docs&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完成了上面这些构建配置以后，修改一下 npm script 即可：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;vite --config ./script/build/base.ts&quot;,</span><br><span class="line">&quot;build:lib&quot;: &quot;vue-tsc --noEmit &amp;&amp; vite build --config ./script/build/lib.ts&quot;,</span><br><span class="line">&quot;build:doc&quot;: &quot;vue-tsc --noEmit &amp;&amp; vite build --config ./script/build/doc.ts &amp;&amp; node --experimental-modules ./script/build/copy.mjs&quot;,</span><br></pre></td></tr></table></figure><p>build:lib 的产物：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">lib</span><br><span class="line">│  kudzu-ui.js</span><br><span class="line">│  kudzu-ui.umd.cjs</span><br><span class="line">│  style.css</span><br><span class="line">│  tree.md</span><br><span class="line">│  vite.svg</span><br><span class="line">│  </span><br><span class="line">├─examples</span><br><span class="line">│      vite-env.d.ts</span><br><span class="line">│      </span><br><span class="line">└─packages</span><br><span class="line">    │  index.d.ts</span><br><span class="line">    │  </span><br><span class="line">    ├─components</span><br><span class="line">    │  ├─Button</span><br><span class="line">    │  │  │  index.d.ts</span><br><span class="line">    │  │  │  </span><br><span class="line">    │  │  └─src</span><br><span class="line">    │  │          index.d.ts</span><br><span class="line">    │  │          </span><br><span class="line">    │  └─Tag</span><br><span class="line">    │      │  index.d.ts</span><br><span class="line">    │      │  </span><br><span class="line">    │      └─src</span><br><span class="line">    │              index.d.ts</span><br><span class="line">    │              </span><br><span class="line">    └─utils</span><br><span class="line">            index.d.ts</span><br><span class="line">            install.d.ts</span><br><span class="line">            typescript.d.ts</span><br></pre></td></tr></table></figure><p>build:doc 的产物：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docs</span><br><span class="line">├── assets</span><br><span class="line">│   ├── README.04f9b87a.js</span><br><span class="line">│   ├── README.e8face78.js</span><br><span class="line">│   ├── index.917a75eb.js</span><br><span class="line">│   ├── index.f005ac77.css</span><br><span class="line">│   └── vendor.234e3e3c.js</span><br><span class="line">├── index.html</span><br><span class="line">└── packages</span><br></pre></td></tr></table></figure><p>大功告成！</p><h3 id="九、打包"><a href="#九、打包" class="headerlink" title="九、打包"></a>九、打包</h3><p>打包入口和文件配置main为打包后入口文件，files为publish时上传到npm的文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;kudzu-ui&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.9&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;./lib/kudzu-ui.umd.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;./lib/kudzu-ui.es.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;homepage&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;fenpho&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;repository&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;git&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://github.com/fenpho/kudzu-ui&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;files&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;lib&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;vite --config ./script/build/base.ts&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build:lib&quot;</span>: <span class="string">&quot;vue-tsc --noEmit &amp;&amp; vite build --config ./script/build/lib.ts&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build:doc&quot;</span>: <span class="string">&quot;vue-tsc --noEmit &amp;&amp; vite build --config ./script/build/doc.ts &amp;&amp; node --experimental-modules ./script/build/copy.mjs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;preview&quot;</span>: <span class="string">&quot;vite preview&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gen&quot;</span>: <span class="string">&quot;node --experimental-modules ./script/generater/index.mjs&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;vue&quot;</span>: <span class="string">&quot;^3.2.41&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@rollup/pluginutils&quot;</span>: <span class="string">&quot;^5.0.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vitejs/plugin-vue&quot;</span>: <span class="string">&quot;^3.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vitejs/plugin-vue-jsx&quot;</span>: <span class="string">&quot;^2.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;fs-extra&quot;</span>: <span class="string">&quot;^11.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;handlebars&quot;</span>: <span class="string">&quot;^4.7.7&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;inquirer&quot;</span>: <span class="string">&quot;8.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;less&quot;</span>: <span class="string">&quot;^4.1.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;postcss-px-to-viewport&quot;</span>: <span class="string">&quot;^1.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;prismjs&quot;</span>: <span class="string">&quot;^1.29.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span>: <span class="string">&quot;^4.6.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;unplugin-vue-macros&quot;</span>: <span class="string">&quot;^1.0.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vite&quot;</span>: <span class="string">&quot;^3.2.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vite-plugin-dts&quot;</span>: <span class="string">&quot;^1.7.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vite-plugin-md&quot;</span>: <span class="string">&quot;^0.20.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-router&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-tsc&quot;</span>: <span class="string">&quot;^1.0.9&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依赖不需要打包的需要在vite的配置文件里面列出或者放入devDependencies里面，vue已经在打包配置了排除，故依旧放正dependencies里</p><p>如果是小白，没有发布过npm包，可以参考我的这篇博文<br><a href="https://fenpho.github.io/2022/09/15/npm%E5%8F%91%E5%8C%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/">npm发包详细教程</a></p><p>使用<br><code>npm i kudzu-ui</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> KudzuUI <span class="keyword">from</span> <span class="string">&#x27;kudzu-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;kudzu-ui/lib/style.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line"></span><br><span class="line">app.use(KudzuUI);</span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><p>至此我们的组件开发框架已经基本完成了，它具备了相对完整的代码开发、实时交互式文档、命令式新建组件等能力，开发组件已经拥有了不错的体验。当然它距离完美还有很长的距离，比如说单元测试、还没集成进去，组件库的版本管理和 CHANGELOG 还需要接入，这些不完美的部分都很值得补充进去。本文纯当抛砖引玉，也期待更多的交流~</p><p>最后，附上项目源码：<a href="https://github.com/fenpho/kudzu-ui">GitHub项目仓库 </a><br>项目预览：<a href="https://fenpho.github.io/kudzu-ui/get-start">点击我</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;兼容性注意&lt;br&gt;Vite 需要 Node.js 版本 14.18+，16+。然而，有些模板需要依赖更高的 Node 版本才能正常运行，当你的包管理器发出警告时，请注意升级你的 Node 版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;手把手教你</summary>
      
    
    
    
    <category term="前端漫谈" scheme="https://fenpho.github.io/categories/%E5%89%8D%E7%AB%AF%E6%BC%AB%E8%B0%88/"/>
    
    
    <category term="kudzu, typescript，vue, 组件库" scheme="https://fenpho.github.io/tags/kudzu-typescript%EF%BC%8Cvue-%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>npm发包详细教程</title>
    <link href="https://fenpho.github.io/2022/09/15/npm%E5%8F%91%E5%8C%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/"/>
    <id>https://fenpho.github.io/2022/09/15/npm%E5%8F%91%E5%8C%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</id>
    <published>2022-09-15T03:50:57.000Z</published>
    <updated>2023-01-15T04:32:31.555Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、新建项目"><a href="#一、新建项目" class="headerlink" title="一、新建项目"></a>一、新建项目</h3><h4 id="1-建立目录"><a href="#1-建立目录" class="headerlink" title="1. 建立目录"></a>1. 建立目录</h4><p>新建一个npm项目文件夹demo，<br>在里面新建src文件夹，src里新建index.js，index.js就作为我们的代码主文件，在里面简单写几行代码，<br>然后新建npm项目说明文档README.md，</p><h4 id="2-初始化git"><a href="#2-初始化git" class="headerlink" title="2. 初始化git"></a>2. 初始化git</h4><p>在npm项目根目录运行终端命令：<br><code>git init .</code></p><h4 id="3-编写package-json"><a href="#3-编写package-json" class="headerlink" title="3. 编写package.json"></a>3. 编写package.json</h4><p>在npm项目根目录运行终端命令，初始化生成package.json文件：<br>npm init –y<br> 补充知识<br>初始化npm的时候，我们用了npm init -y或者npm init –yes；<br>-y或者–yes表示所有的配置项都是使用默认值。<br>如果不添加-y或者–yes，就会问很多问题，这些问题，我们叫npm的配置项。</p><blockquote><p>package name:<br>当npm初始化了，在我们看来是一个项目，在它眼里是一个包，所以这里要输入这个包的名称。<br>注意：包名中间不能有空格，并且必须要小写。<br>version：<br>包的版本号，默认是1.0.0<br>description：<br>描述，可以写也可以不写<br>entry point:<br>包的入口文件<br>test command：<br>命令<br>git repository：<br>git 仓库<br>keywords：<br>关键词<br>author：<br>作者</p></blockquote><p>之后就会创建一个package.json,这个json文件里面就是上面填写的配置项。<br>如果用npm init -y或者npm init –yes来初始化，我可以在这个json文件里面更改。<br>{<br>  “name”: “demo”,<br>  “version”: “1.0.0”,<br>  “description”: “”,<br>  “main”: “index.js”,<br>  “scripts”: {<br>    “test”: “echo &quot;Error: no test specified&quot; &amp;&amp; exit 1”<br>  },<br>  “keywords”: [],<br>  “author”: “”,<br>  “license”: “ISC”<br>}<br>注意：<br>这个json里面有一项scripts，用于指定一些命令的快捷方式。<br>如上面有个</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那我们可以运行上面定义的命令。<br><code>npm run test</code></p><p>一般我们也可以在这个script里面自定义一些命令，指定了什么命令就可以跑什么命令。</p><p><strong>package.json重点字段说明：</strong></p><ul><li>name 即npm项目包名，发布到npm时就是取的这个name名，你自己取个语义化的名字，和已有的npm库不能重复；</li><li>version 版本号，更新npm包时必须修改一个更高的版本号后才能成功发布到npm，版本号最好遵循npm版本管理规范；</li><li>description 包的描述，发布到npm后你搜索该npm包时，在搜索联想列表里会显示在包名的下方，作为描述说明；</li><li>main 入口文件路径，在你通过import或require引用该npm包时就是引入的该路径的文件；<br>根据上述说明简单修改下package.json如下：</li></ul><h4 id="4-添加LICENSE"><a href="#4-添加LICENSE" class="headerlink" title="4. 添加LICENSE"></a>4. 添加LICENSE</h4><p>LICENSE即开源协议文件，这里使用MIT协议类型。</p><p>项目根目录添加文件LICENSE，复制一下内容放进去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">The MIT License (MIT)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2017-present, fenghua (Fenpho) Wu</span><br><span class="line"></span><br><span class="line">Permission is hereby granted, free of charge, to any person obtaining a copy</span><br><span class="line">of this software and associated documentation files (the &quot;Software&quot;), to deal</span><br><span class="line">in the Software without restriction, including without limitation the rights</span><br><span class="line">to use, copy, modify, merge, publish, distribute, sublicense, and&#x2F;or sell</span><br><span class="line">copies of the Software, and to permit persons to whom the Software is</span><br><span class="line">furnished to do so, subject to the following conditions:</span><br><span class="line"></span><br><span class="line">The above copyright notice and this permission notice shall be included in</span><br><span class="line">all copies or substantial portions of the Software.</span><br><span class="line"></span><br><span class="line">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span><br><span class="line">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span><br><span class="line">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span><br><span class="line">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span><br><span class="line">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span><br><span class="line">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span><br><span class="line">THE SOFTWARE.</span><br></pre></td></tr></table></figure><p>Copyright (c) 2017-present, fenghua (Fenpho) Wu 这一行，2017起始是年份，自行修改为当前年份，fenghua (Fenpho) Wu是作者姓名，改成你自己的。<br>package.json里修改license字段值为MIT</p><h4 id="5-配置npm上传白名单"><a href="#5-配置npm上传白名单" class="headerlink" title="5.配置npm上传白名单"></a>5.配置npm上传白名单</h4><p>配置npm上传的文件白名单，可以指定哪些文件上传哪些不上传，<br>比如我这里不想直接发布src里的index.js源码，而是发布dist目录下的index.min.js（index.js压缩后的文件），按以下配置：<br>在package.json里，修改main字段的路径指向dist/index.min.js：<br><code>&quot;main&quot;: &quot;dist/index.min.js&quot;</code></p><p>添加files字段来配置要上传npm的文件白名单目录：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;files&quot;: [</span><br><span class="line">  <span class="string">&quot;dist&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这样dist文件夹会上传npm，而src文件夹就不会上传，想保存src源码就上传项目到git远程仓库就行，这样git仓库保存了完整项目，而npm只包含部分项目文件。</p><p>有些文件是必定会上传的，无法控制，例如package.json、LICENSE、README.md等等。<br>当然了，也可以配置npm上传黑名单，通过.npmignore配置，具体不再赘述。</p><h4 id="6-关联github地址"><a href="#6-关联github地址" class="headerlink" title="6.关联github地址"></a>6.关联github地址</h4><p>如果想把npm包和项目github地址关联起来，首先项目需要先上传到github上，然后package.json添加repository字段：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;repository&quot;: &#123;</span><br><span class="line">  &quot;type&quot;: &quot;git&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;git://github.com/fenpho/demo.git&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>url后的地址格式，就是项目git上的https完整地址把https换成git<br>关联并发布npm后，在npm官网的该npm包页面右边会显示有github链接，点击可以跳转到github项目地址。</p><h4 id="7-完整package-json内容和项目目录"><a href="#7-完整package-json内容和项目目录" class="headerlink" title="7.完整package.json内容和项目目录"></a>7.完整package.json内容和项目目录</h4><p>全部配置完后的完整package.json如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;demo&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;我是描述&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;fenpho&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;dist/index.min.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [<span class="string">&quot;demo&quot;</span>, <span class="string">&quot;js&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;files&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;dist&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;repository&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;git&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;git://github.com/fenpho/demo.git&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、发布npm"><a href="#二、发布npm" class="headerlink" title="二、发布npm"></a>二、发布npm</h3><h4 id="1-npm注册登录"><a href="#1-npm注册登录" class="headerlink" title="1. npm注册登录"></a>1. npm注册登录</h4><p>先去npm官网注册账号：<a href="https://www.npmjs.com/%EF%BC%8C%E6%88%96%E8%80%85%E9%80%9A%E8%BF%87%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%86%8C%EF%BC%9A">https://www.npmjs.com/，或者通过终端命令注册：</a><br>npm adduser<br>终端命令，登录npm账号：<br>npm login<br>依次输入用户名和密码登录即可，登录成功后下次就不用再登录了。</p><h4 id="2-调试npm"><a href="#2-调试npm" class="headerlink" title="2.调试npm"></a>2.调试npm</h4><p>如果不需要调试，可以跳过调试步骤，直接发布。<br>npm项目根目录运行终端命令：<br><code>npm link</code><br>运行后即将该npm包放进了本地npm缓存里，</p><p>如果要在其他项目（例如项目名叫aaa）里引用调试，只需要在在aaa里运行命令：</p><p><code>npm link 包名</code></p><p>这样就在aaa里建立了包名到npm包的链接关联，通过常规方式引入就可以测试npm包了。</p><p>如果要取消项目aaa与npm包的关联，在aaa项目和包项目下运行命令：</p><p><code>npm unlink 包名</code></p><p>为了防止本地调试npm与发布后的npm混淆冲突，在调试完成后一定记得手动取消项目关联。</p><p>3、发布<br>在npm包项目根目录运行命令：</p><p><code>npm publish</code></p><p>运行完后，稍等片刻，在npm官网就可以搜索到发布的该npm包了。</p><p>因为很多人把npm源都切到了淘宝源，毕竟速度快，但是发布npm前需要先恢复到npm官方源上，否则发布失败，切换命令：<br>// 配置npm全局使用淘宝镜像源<br>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a><br>// 配置npm全局恢复官方镜像源<br>npm config set registry <a href="https://registry.npmjs.org/">https://registry.npmjs.org</a></p><p>或者呢，在项目根目录新建.npmrc文件，写入以下内容即可：<br>registry=<a href="https://registry.npmjs.org/">https://registry.npmjs.org</a><br>这样，在此项目下运行npm命令时，默认使用的仓库都是配置官方源，不影响其他项目。<br>发布后的成果页面：<a href="https://www.npmjs.com/package/demo">https://www.npmjs.com/package/demo</a></p><p>如果要发布一个beta包，运行命令：<br><code>npm publish --tag beta</code><br>其实就是发布了一个标签，标签名可以自定义，例如 alpha next。</p><h4 id="4-成员权限"><a href="#4-成员权限" class="headerlink" title="4. 成员权限"></a>4. 成员权限</h4><p>发布npm是用自己的账号发布的，默认只有自己能更新包，如果想要给其他人更新npm包的权限，按以下方式：<br>打开npm包所在页面，点击右方settings栏，然后在Invite maintainer模块，输入要加入权限的npm账号的username，然后点击invite加入。</p><h4 id="5-作废和删除"><a href="#5-作废和删除" class="headerlink" title="5.作废和删除"></a>5.作废和删除</h4><p>（上图是npm包页面的settings栏，拉到页面最下面就能看到。能删除的才会显示Delete项。）</p><p>（1）作废npm包，就是这里的 Deprecate package，就是给npm包打上已作废的标签，表示不再更新维护。</p><p>在npm包页面展示（示例：@babel/polyfill）以及npm i下载时会有提示。</p><p>也可以通过命令行操作：npm deprecate <package-name> “<message>“</p><p>具体可以查看npm官方政策：<a href="https://docs.npmjs.com/deprecating-and-undeprecating-packages-or-package-versions">传送门</a></p><p>（2）删除已发布的包，这是非常危险的行为，除非你确定这个包没有其他人使用。<br>npm unpublish <package_name>@<version><br>npm官网的删除政策这几年一直在变，我记得之前是不允许删除，现在又可以了，但有一些限制，需满足以下几点才能删除：</p><ul><li>没有其他npm包依赖此包</li><li>上一周的npm下载量不超过300</li><li>npm包成员只存在一个拥有者或管理员</li><li>具体可以查看npm官方政策：<a href="https://docs.npmjs.com/policies/unpublish">传送门</a></li></ul><h3 id="三、注意点"><a href="#三、注意点" class="headerlink" title="三、注意点"></a>三、注意点</h3><p>发布到npm上就意味着代码的开源，如果是有公司业务相关的代码就不建议发到npm上，最好是公司自建一个私有仓库来使用。<br>npm淘宝源是每隔十分钟和npm官方源同步一次，所以刚发布npm后可能要等几分钟后淘宝源才会更新，如果发布后就立马切换回淘宝源再更新包可能更的还是老版本。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、新建项目&quot;&gt;&lt;a href=&quot;#一、新建项目&quot; class=&quot;headerlink&quot; title=&quot;一、新建项目&quot;&gt;&lt;/a&gt;一、新建项目&lt;/h3&gt;&lt;h4 id=&quot;1-建立目录&quot;&gt;&lt;a href=&quot;#1-建立目录&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="前端漫谈" scheme="https://fenpho.github.io/categories/%E5%89%8D%E7%AB%AF%E6%BC%AB%E8%B0%88/"/>
    
    
    <category term="npm" scheme="https://fenpho.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Typescript入门</title>
    <link href="https://fenpho.github.io/2022/05/17/Typescript%E5%85%A5%E9%97%A8/"/>
    <id>https://fenpho.github.io/2022/05/17/Typescript%E5%85%A5%E9%97%A8/</id>
    <published>2022-05-17T10:32:04.000Z</published>
    <updated>2023-01-14T10:47:39.251Z</updated>
    
    <content type="html"><![CDATA[<h3 id="阶段一、TS的理论基础和工作流程"><a href="#阶段一、TS的理论基础和工作流程" class="headerlink" title="阶段一、TS的理论基础和工作流程"></a>阶段一、TS的理论基础和工作流程</h3><h4 id="1-什么是TypeScript"><a href="#1-什么是TypeScript" class="headerlink" title="1. 什么是TypeScript"></a>1. 什么是TypeScript</h4><p><img src="1.png" alt="image.png"></p><p>script好理解，就是脚本，而type则是来自typing（强类型），有以下几个优势</p><p><strong>typing: 强类型</strong></p><ul><li>在原生JavaScript的基础上加上了一层类型定义</li><li>规范我们的代码</li><li>代码编译阶段就能及时发现错误</li></ul><p>简单来说：Typescript就是JavaScript 的类型化超集</p><blockquote><p>注：Typescript无法在浏览器中运行，需要先编译成JavaScript</p></blockquote><h4 id="2-为什么要使用TypeScript"><a href="#2-为什么要使用TypeScript" class="headerlink" title="2. 为什么要使用TypeScript"></a>2. 为什么要使用TypeScript</h4><ul><li>类型检查</li><li>解放劳动力</li><li>帮助我们写出更高质量的代码</li><li>类型推演与类型匹配</li><li>开发编译时报错</li><li>极大程度的避免了低级错误</li><li>支持JavaScript最新特性（包含ES6/7/8）</li></ul><h4 id="3-开发环境配置"><a href="#3-开发环境配置" class="headerlink" title="3. 开发环境配置"></a>3. 开发环境配置</h4><p>官网：<a href="https://www.typescriptlang.org/">https://www.typescriptlang.org/</a></p><p>安装ts编译器(前提：已安装node，若没有，前往：nodejs.org，下载安装LTS版本即可)<br><code>npm install -g typescript</code><br>推荐使用编辑器：Visual Studio Code，地址：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><h4 id="4-TypeScript工作流"><a href="#4-TypeScript工作流" class="headerlink" title="4. TypeScript工作流"></a>4. TypeScript工作流</h4><p><img src="2.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;tsc 命令编译</span><br><span class="line">tsc hello.ts</span><br><span class="line">&#x2F;&#x2F;可以同时编译多个ts文件</span><br><span class="line">tsc fileName1.ts fileName2.ts fileName3.ts</span><br><span class="line">&#x2F;&#x2F;在监视模式下运行编译器。会监视输出文件，在它们改变时重新编译.</span><br><span class="line">tsc fileName.ts --watch</span><br></pre></td></tr></table></figure><p>tsc 常用编译参数如下表所示：</p><table><thead><tr><th align="left">编译参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">–help</td><td align="left">显示帮助信息</td></tr><tr><td align="left">–module</td><td align="left">载入扩展模块</td></tr><tr><td align="left">–target</td><td align="left">设置 ECMA 版本</td></tr><tr><td align="left">–declaration</td><td align="left">额外生成一个 .d.ts 扩展名的文件。<code>tsc a.ts --declaration</code>命令会生成 a.d.ts、a.js 两个文件</td></tr><tr><td align="left">–removeComments</td><td align="left">删除文件的注释</td></tr><tr><td align="left">–out</td><td align="left">编译多个文件并合并到一个输出的文件</td></tr><tr><td align="left">–sourcemap</td><td align="left">生成一个 sourcemap (.map) 文件。sourcemap 是一个存储源代码与编译代码对应位置映射的信息文件</td></tr><tr><td align="left">–module noImplicitAny</td><td align="left">在表达式和声明上有隐含的 any 类型时报错</td></tr><tr><td align="left">–watch</td><td align="left">在监视模式下运行编译器。会监视输出文件，在它们改变时重新编译</td></tr></tbody></table><h3 id="阶段二、TS的基础知识"><a href="#阶段二、TS的基础知识" class="headerlink" title="阶段二、TS的基础知识"></a>阶段二、TS的基础知识</h3><h4 id="1-变量作用域"><a href="#1-变量作用域" class="headerlink" title="1. 变量作用域"></a>1. 变量作用域</h4><p>JavaScript中作用域一般只分为全局函数两种，但是使用let和const声明的变量则有块级作用域<br>声明变量：<br>var：作用域为函数内或全局<br>let：块级作用域</p><p>声明常量：<br>const 块级作用域</p><h4 id="2-TypeScript的类型"><a href="#2-TypeScript的类型" class="headerlink" title="2. TypeScript的类型"></a>2. TypeScript的类型</h4><p>准确来说目前JS数据类型总共有8种：<br>7种基本（原始）类型：String Number Boolean Null Undefined Symbol BigInt<br>1种引用（对象）类型：Object<br>Object又可以细分为： Object本身 Array Date Function RegExp</p><p>JS的类型判断方式</p><blockquote><ol><li>Object.prototype.toString.call() 方法,这个方法可以判断任何的类型,返回的是一个字符串</li><li>typeof() 方法，这个方法用来准确判断基本类型（除了null），返回的也是一个字符串</li><li>instanceof() 方法，这个方法用来判断对象类型,返回一个布尔值，如果判断基本类型，那么会输出false</li><li>特定的判断方法</li></ol><p>1).数组的isArray() 方法，判断是否为数组，返回true或者false.<br>2).isNaN() 方法，在 JavaScript 中，NaN 是一个不合法的数字。 Number.isNaN () 方法用于判断传递的值是否为 NaN，并且检查其类型是否为 Number，如果值为 NaN 且类型为 Number，则返回 true，否则返回 false</p></blockquote><p>ts数据类型，新增了如下5种基本数据类型：tuple（元组），enum（枚举），void，never，any<br>3种高级类型：union（组合类型）、nullable（可空类型）、literal（预定义类型）</p><h4 id="3-数字、布尔和字符串"><a href="#3-数字、布尔和字符串" class="headerlink" title="3. 数字、布尔和字符串"></a>3. 数字、布尔和字符串</h4><p>number 数字<br>对数字的表示只有一个很笼统的number来表示，即能表示整数，也能表示浮点数，甚至还能表示负数<br>如：1、5.3、-10</p><p>string 字符串<br>使用单引号、双引号或者反引号创建<br>如：’hello’、”hello”、`hello`</p><p>boolean 布尔<br>表示真假，只有true和false两个值</p><h4 id="4-数组和元组"><a href="#4-数组和元组" class="headerlink" title="4. 数组和元组"></a>4. 数组和元组</h4><p>array 数组<br>创建数组可以采用两种方式：<br>1）字面量：[]<br>2）new对象：new Array()</p><p>tuple 元组<br>固定长度和类型的array</p><h4 id="5-联合与字面量类型"><a href="#5-联合与字面量类型" class="headerlink" title="5.联合与字面量类型"></a>5.联合与字面量类型</h4><p>union 联合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 联合类型</span></span><br><span class="line"><span class="keyword">let</span> union: string | number </span><br><span class="line">union = <span class="number">2</span> <span class="comment">// ok</span></span><br><span class="line">union = <span class="string">&#x27;aaa&#x27;</span> <span class="comment">// ok</span></span><br><span class="line">union = <span class="literal">true</span> <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>literal 字面量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字面量</span></span><br><span class="line"><span class="keyword">let</span> literal：<span class="string">&#x27;as number&#x27;</span> | <span class="number">1</span> | <span class="number">2</span></span><br><span class="line">literal = <span class="string">&#x27;as number&#x27;</span> <span class="comment">// ok</span></span><br><span class="line">literal = <span class="number">2</span> <span class="comment">// ok</span></span><br><span class="line">literal = <span class="number">3</span> <span class="comment">// error</span></span><br></pre></td></tr></table></figure><h4 id="6-枚举类型"><a href="#6-枚举类型" class="headerlink" title="6. 枚举类型"></a>6. 枚举类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">enum Color &#123;</span><br><span class="line">  red,</span><br><span class="line">  green,</span><br><span class="line">  blue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> color = color.blue;</span><br><span class="line"><span class="built_in">console</span>.log(color) <span class="comment">// 输出为2，对应Color中blue定义所在的顺序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以手动指定顺序（顺序可以为数字或字符串等）</span></span><br><span class="line">enum Color2 &#123;</span><br><span class="line">  red = <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">  green = <span class="number">10</span>,</span><br><span class="line">  blue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-Any-与-Unknow"><a href="#7-Any-与-Unknow" class="headerlink" title="7. Any 与 Unknow"></a>7. Any 与 Unknow</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// any</span></span><br><span class="line"><span class="keyword">let</span> randomValue: any = <span class="number">666</span></span><br><span class="line">randomValue = <span class="literal">true</span> <span class="comment">// ok</span></span><br><span class="line">randomValue = <span class="string">&#x27;add&#x27;</span> <span class="comment">// ok</span></span><br><span class="line">randomValue = &#123;&#125; <span class="comment">// ok</span></span><br><span class="line">randomValue() <span class="comment">// 写时没问题，编译会报错</span></span><br><span class="line">randomValue.toUpperCase()</span><br><span class="line"></span><br><span class="line"><span class="comment">// unknow 不保证类型，但是保证类型安全</span></span><br><span class="line"><span class="keyword">let</span> randomValue1: unknown = <span class="number">666</span></span><br><span class="line">randomValue1 = <span class="literal">true</span> <span class="comment">// ok</span></span><br><span class="line">randomValue1 = <span class="string">&#x27;add&#x27;</span> <span class="comment">// ok</span></span><br><span class="line">randomValue1 = &#123;&#125; <span class="comment">// ok</span></span><br><span class="line">randomValue1() <span class="comment">// error</span></span><br><span class="line">randomValue1.toUpperCase() <span class="comment">// error</span></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> randomValue1 === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">  randomValue1()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> randomValue1 === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">  randomValue1.toUpperCase()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-Void、Undefined与Never"><a href="#8-Void、Undefined与Never" class="headerlink" title="8. Void、Undefined与Never"></a>8. Void、Undefined与Never</h4><p>void只在ts中存在，表示不存在，undefined表示未定义，never用来控制逻辑流程，表示永远不可能执行完成。</p><h4 id="9-类型适配器（类型断言）Type-Assertions"><a href="#9-类型适配器（类型断言）Type-Assertions" class="headerlink" title="9. 类型适配器（类型断言）Type Assertions"></a>9. 类型适配器（类型断言）Type Assertions</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message: any</span><br><span class="line">message = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">message.endsWith(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="comment">// 方式一</span></span><br><span class="line">(&lt;string&gt;message).endsWith(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line">(message <span class="keyword">as</span> string).endsWith(<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>使用类型断言一定要对使用的变量类型有清楚的了解，否则会导致各种不可预料的错误</p></blockquote><h4 id="10-函数类型"><a href="#10-函数类型" class="headerlink" title="10. 函数类型"></a>10. 函数类型</h4><p>在 TypeScript里，我们可以通过 function 字面量和箭头函数的形式定义函数，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> add = <span class="function">() =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>还可以显式指定函数参数和返回值的类型，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = (a: number, <span class="attr">b</span>: number): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上述示例中，参数名后的 :number 表示参数类型都是数字类型，圆括号后的 : number则表示返回值类型也是数字类型。</p><p>下面介绍一下返回值类型和参数类型<br>返回值类型<br>在 JavaScript 中，如果一个函数可以没有显式 return，此时函数的返回值是 undefined：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(func()); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>需要注意的是，在 TypeScript 中，如果我们显式声明函数的返回值类型为 undfined，会报错：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>): <span class="title">undefined</span> </span>&#123; </span><br><span class="line"><span class="comment">// error TS2355: A function whose declared type is neither &#x27;void&#x27; nor &#x27;any&#x27; must return a value.</span></span><br><span class="line"> ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，正确的做法是使用void 类型来表示函数没有返回值的类型（void 类型很少用到，这基本是唯一有用的场景），示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line">func().someFunc(); <span class="comment">// error TS2339: Property &#x27;someFunc&#x27; does not exist on type &#x27;void&#x27;.</span></span><br></pre></td></tr></table></figure><p>我们可以使用类似定义箭头函数的语法来表示函数类型的参数和返回值类型，此时 =&gt; 仅仅用来定义一个函数类型而不是实现这个函数。</p><p>需要注意的是，这里的 =&gt;与 ES6 中箭头函数的 =&gt; 有所不同。TypeScript 函数类型中的 =&gt; 用来表示函数的定义，其左侧是函数的参数类型，右侧是函数的返回值类型；而 ES6 中的 =&gt; 是函数的实现。</p><p>如下示例中，先定义了一个函数类型（这里使用了类型别名 type），并且使用箭头函数实现了这个类型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type Adder = <span class="function">(<span class="params">a: number, b: number</span>) =&gt;</span> number; <span class="comment">// TypeScript 函数类型定义</span></span><br><span class="line"><span class="keyword">const</span> add: Adder = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b; <span class="comment">// ES6 箭头函数</span></span><br></pre></td></tr></table></figure><p>在对象中，除了使用这种声明语法，我们还可以使用类似对象属性的简写语法来声明函数类型的属性，如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface Entity &#123;</span><br><span class="line">  add: <span class="function">(<span class="params">a: number, b: number</span>) =&gt;</span> number;</span><br><span class="line">  del(a: number, <span class="attr">b</span>: number): number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> entity: Entity = &#123;</span><br><span class="line">  add: <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b,</span><br><span class="line">  <span class="function"><span class="title">del</span>(<span class="params">a, b</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在某种意义上来说，这两种形式都是等价的。但是很多时候，我们不必或者不能显式地指明返回值的类型，这就涉及可缺省和可推断的返回值类型</p><p>可缺省和可推断的返回值类型<br>函数返回值的类型可以在 TypeScript 中被推断出来，即可缺省</p><p>函数内是一个相对独立的上下文环境，我们可以根据入参对值加工计算，并返回新的值。从类型层面看，我们也可以通过类型推断加工计算入参的类型，并返回新的类型，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">one: string, two: number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> nums = [two];</span><br><span class="line">  <span class="keyword">const</span> strs = [one];</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    nums,</span><br><span class="line">    strs</span><br><span class="line">  &#125; <span class="comment">// 返回 nums: number[]; strs: string[] 的类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数类型</p><p>了解了定义函数的基本语法以及返回值类型后，再来详细看一下<strong>可选参数</strong>、<strong>默认参数</strong>、<strong>剩余参数</strong>的几个特性。</p><p><strong>可选参数和默认参数</strong></p><p>在实际工作中，我们可能经常碰到函数参数可传可不传的情况，当然 TypeScript 也支持这种函数类型表达，如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">x?: string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">func(); <span class="comment">// undefined</span></span><br><span class="line">func(<span class="string">&#x27;777&#x27;</span>); <span class="comment">// 777</span></span><br></pre></td></tr></table></figure><p>在上述代码中，我们在类型标注的 : 前添加 ? 表示 func 函数的参数 x 是可缺省的</p><p>也就是说参数 x 的类型可能是 undefined（不传入实参）类型或者是 string 类型（传入 ‘777’ 实参），那是不是意味着可缺省和类型是 undefined 等价呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params">x?: string</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params">x: string | <span class="literal">undefined</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">func1(); <span class="comment">// undefined</span></span><br><span class="line">func1(<span class="literal">undefined</span>); <span class="comment">// undefined</span></span><br><span class="line">func2(); <span class="comment">// error TS2554: Expected 1 arguments, but got 0.</span></span><br><span class="line">func2(<span class="literal">undefined</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>这里的 ?: 表示参数可以缺省、可以不传，也就是说调用函数时，我们可以不显式传入参数。但是，如果我们声明了参数类型为 xxx | undefined，就表示函数参数是不可缺省且类型必须是 xxx 或者 undfined</p><p>因此，在上述代码中，func2 函数如果不显示传入函数的参数，TypeScript 就会报一个 ts(2554) 的错误，即函数需要 1 个参数，但是我们只传入了 0 个参数。</p><p>在 ES6 中支持函数默认参数的功能，而 TypeScript 会根据函数的默认参数的类型来推断函数参数的类型，示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">x = <span class="string">&#x27;777&#x27;</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">func(); <span class="comment">// 777</span></span><br><span class="line">func(<span class="string">&#x27;hello world&#x27;</span>) <span class="comment">// hello world</span></span><br><span class="line">func(<span class="number">1</span>); <span class="comment">// error TS2345: Argument of type &#x27;1&#x27; is not assignable to parameter of type &#x27;string | undefined&#x27;.</span></span><br></pre></td></tr></table></figure><p>在上述示例中，根据函数的默认参数 ‘777’ ，TypeScript 推断出了 x 的类型为 string | undefined</p><p>剩余参数<br>在 ES6 中，JavaScript 支持函数参数的剩余参数，它可以把多个参数收集到一个变量中。同样，在TypeScript 中也支持这样的参数类型定义，如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...nums: number[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> nums.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 6</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>); <span class="comment">// error TS2345: Argument of type &#x27;string&#x27; is not assignable to parameter of type &#x27;number&#x27;.</span></span><br></pre></td></tr></table></figure><p>在上述代码中，sum 是一个求和的函数，…nums 将函数的所有参数收集到了变量 nums 中，而 nums 的类型应该是 number[]，表示所有被求和的参数是数字类型。因此，sum(1, ‘2’) 抛出了一个 ts(2345) 的错误，因为参数 ‘2’ 并不是 number 类型。</p><p>如果这么写就可以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...nums: (number | string)[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> nums.reduce&lt;number&gt;(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + <span class="built_in">Number</span>(b), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>函数的每一个参数的类型就是联合类型 number | string，因此 sum(1, ‘2’, 3) 的类型检查也就通过了。</p><p>this<br>众所周知，在 JavaScript 中，函数 this 的指向一直是一个令人头痛的问题。因为 this 的值需要等到函数被调用时才能被确定，更别说通过一些方法还可以改变 this 的指向。也就是说 this 的类型不固定，它取决于执行时的上下文。</p><p>但是，使用了 TypeScript 后，我们就不用担心这个问题了。通过指定 this 的类型（严格模式下，必须显式指定 this 的类型），当我们错误使用了 this，TypeScript 就会提示我们，如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">this</span>.name); <span class="comment">// error TS2683: &#x27;this&#x27; implicitly has type &#x27;any&#x27; because it does not have a type annotation.</span></span><br><span class="line">&#125;</span><br><span class="line">func();</span><br></pre></td></tr></table></figure><p>在上述代码中，如果我们直接调用 say 函数，this 应该指向全局 window 或 global（Node 中）。但是，在 strict 模式下的 TypeScript 中，它会提示 this 的类型是 any，此时就需要我们手动显式指定类型了。</p><p>在 TypeScript 中，我们只需要在函数的第一个参数中声明 this 指代的对象（即函数被调用的方式）即可，比如最简单的作为对象的方法的 this 指向，如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"><span class="built_in">this</span>: Window, name: string</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.func = func;</span><br><span class="line"><span class="built_in">window</span>.func(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  func</span><br><span class="line">&#125;;</span><br><span class="line">obj.func(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">// error TS2684: The &#x27;this&#x27; context of type &#x27;&#123; func: (this: Window, name: string) =&gt; void; &#125;&#x27; is not assignable to method&#x27;s &#x27;this&#x27; of type &#x27;Window&#x27;.</span></span><br></pre></td></tr></table></figure><p>在上述代码中，我们在 window 对象上增加 say 的属性为函数 say。那么调用 window.say() 时，this 指向即为 window 对象。</p><p>调用 obj.say() 后，此时 TypeScript 检测到 this 的指向不是 window，于是抛出了如下所示的一个 ts(2684) 错误。</p><p>需要注意的是，如果我们直接调用 func()，this 实际上应该指向全局变量 window，但是因为 TypeScript 无法确定 func 函数被谁调用，所以将 this 的指向默认为 void，也就提示了一个 ts(2684) 错误。 如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func(<span class="string">&#x27;777&#x27;</span>); <span class="comment">// error TS2684: The &#x27;this&#x27; context of type &#x27;void&#x27; is not assignable to method&#x27;s &#x27;this&#x27; of type &#x27;Window&#x27;.</span></span><br></pre></td></tr></table></figure><p>此时，我们可以通过调用 window.say() 来避免这个错误，这也是一个安全的设计。因为在 JavaScript 的严格模式下，全局作用域函数中 this 的指向是 undefined。</p><p>同样，定义对象的函数属性时，只要实际调用中 this 的指向与指定的 this 指向不同，TypeScript 就能发现 this 指向的错误，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  say(<span class="built_in">this</span>: Person): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person: Person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Jae&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> func = person.say;</span><br><span class="line">func(); <span class="comment">// error TS2684: The &#x27;this&#x27; context of type &#x27;void&#x27; is not assignable to method&#x27;s &#x27;this&#x27; of type &#x27;Person&#x27;.</span></span><br></pre></td></tr></table></figure><p>函数重载<br>JavaScript 是一门动态语言，针对同一个函数，它可以有多种不同类型的参数与返回值，这就是函数的多态。</p><p>而在 TypeScript 中，也可以相应地表达不同类型的参数和返回值的函数，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">x: string | number | <span class="literal">null</span></span>): <span class="title">string</span> | <span class="title">number</span> | -1 </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Number</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> x1 = convert(<span class="string">&#x27;1&#x27;</span>); <span class="comment">// =&gt; string | number</span></span><br><span class="line"><span class="keyword">const</span> x2 = convert(<span class="number">1</span>); <span class="comment">// =&gt; string | number</span></span><br><span class="line"><span class="keyword">const</span> x3 = convert(<span class="literal">null</span>); <span class="comment">// =&gt; string | number</span></span><br></pre></td></tr></table></figure><p>在上述代码中，我们把 convert 函数的 string 类型的值转换为 number 类型，number 类型转换为 string 类型，而将 null 类型转换为数字 -1。此时， x1、x2、x3 的返回值类型都会被推断成 string | number</p><p>那么，有没有一种办法可以更精确地描述参数与返回值类型约束关系的函数类型呢？有，这就是函数重载。如下示例中先定义了三种各不相同的函数类型列表，并描述了不同的参数类型对应不同的返回值类型，而后才是函数的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">x: string</span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">x: number</span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">x: <span class="literal">null</span></span>): -1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">x: string | number | <span class="literal">null</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Number</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">String</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> x1 = convert(<span class="string">&#x27;1&#x27;</span>); <span class="comment">// =&gt; number</span></span><br><span class="line"><span class="keyword">const</span> x2 = convert(<span class="number">1</span>); <span class="comment">// =&gt; string</span></span><br><span class="line"><span class="keyword">const</span> x3 = convert(<span class="literal">null</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p>类型谓词（is）<br>在 TypeScript 中，函数还支持另外一种特殊的类型描述，如下示例 ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">s: unknown</span>): <span class="title">s</span> <span class="title">is</span> <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> s === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span>(<span class="params">n: number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> n === <span class="string">&#x27;number&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">x: unknown</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isString(x)) &#123;...&#125; <span class="comment">// 没问题</span></span><br><span class="line">  <span class="keyword">if</span> (isNumber(x)) &#123;...&#125; <span class="comment">// error TS2345: Argument of type &#x27;unknown&#x27; is not assignable to parameter of type &#x27;number&#x27;.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，在添加返回值类型的地方，通过“参数名 + is + 类型”的格式明确表明了参数的类型，进而引起类型缩小，所以类型谓词函数的一个重要的应用场景是实现自定义类型守卫</p><h3 id="阶段三、TS的面向对象"><a href="#阶段三、TS的面向对象" class="headerlink" title="阶段三、TS的面向对象"></a>阶段三、TS的面向对象</h3><h4 id="1-Object对象"><a href="#1-Object对象" class="headerlink" title="1. Object对象"></a>1. Object对象</h4><p><img src="3.png"></p><p>ts中无法访问对象未定义的属性或方法<br><img src="4.png"></p><p>若是将对象显示定义为any，那么就和js一样，可以访问未定义的属性和方法</p><h4 id="2-Interface接口"><a href="#2-Interface接口" class="headerlink" title="2. Interface接口"></a>2. Interface接口</h4><p>未加限制下的函数，可以任意入参<br><img src="5.png"></p><p>通过接口限制后的函数<br><img src="6.png"></p><h4 id="3-Class-类"><a href="#3-Class-类" class="headerlink" title="3. Class 类"></a>3. Class 类</h4><p><img src="7.png"><br><img src="8.png"><br><img src="9.png"></p><p>使用构造函数<br><img src="10.png"></p><p>参数初始化时必须传递<br><img src="11.png"></p><p>加上问号或者给予默认值，变为可选性，初始化如不知道参数可以不传递<br><img src="12.png"></p><p>使用访问修饰符，注意此时参数不允许可选，只允许赋初值<br><img src="13.png"></p><h4 id="4-Access-Modifier访问修饰符"><a href="#4-Access-Modifier访问修饰符" class="headerlink" title="4. Access Modifier访问修饰符"></a>4. Access Modifier访问修饰符</h4><p>限制外部对内部方法和属性的访问，默认情况下都为公有。<br><img src="14.png"></p><p>接口中定义的都是共有属性和方法，一旦改为私有，需要在接口进行相应修改，最简单的方式就是删除对应的。</p><p>getter和setter用于保留私有性的同时，允许外部对私有变量的访问（就是提供给外部获取和设置内部值的方法）<br><img src="15.png"></p><p>接口改造<br><img src="16.png"></p><p>通过geter取值<br><img src="17.png"></p><p>便捷写法<br><img src="18.png"></p><p>使用<br><img src="19.png"></p><p>接口也需要对应修改<br><img src="20.png"></p><p>便捷写法需要es5以上才支持，通常习惯上将私有变量前加上下划线’_’，报错如下：<br><img src="21.png"></p><p>错误处理：<br>tsc -t es5 xxx.ts</p><h4 id="5-Module-模块"><a href="#5-Module-模块" class="headerlink" title="5. Module 模块"></a>5. Module 模块</h4><p>使用关键字export导出模块，import导入模块<br><img src="22.png"></p><p><img src="23.png"></p><p>若是使用export default导出，导入时不需要花括号。</p><h4 id="6-Generics-泛型"><a href="#6-Generics-泛型" class="headerlink" title="6. Generics 泛型"></a>6. Generics 泛型</h4><p><img src="24.png"></p><p><img src="25.png"></p><p>不一定要使用T，可以是任意字符，只是约定俗成用T，也可以简单写成如下字面量形式<br><img src="26.png"></p><p>可以指定输出类型<br><img src="27.png"></p><p>多个类型处理<br><img src="28.png"><br><img src="29.png"></p><p>同样允许显示定义类型<br><img src="30.png"></p><p>设置默认类型<br><img src="31.png"></p><p>此时可以省略第二个泛型的定义<br><img src="32.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;阶段一、TS的理论基础和工作流程&quot;&gt;&lt;a href=&quot;#阶段一、TS的理论基础和工作流程&quot; class=&quot;headerlink&quot; title=&quot;阶段一、TS的理论基础和工作流程&quot;&gt;&lt;/a&gt;阶段一、TS的理论基础和工作流程&lt;/h3&gt;&lt;h4 id=&quot;1-什么是Type</summary>
      
    
    
    
    <category term="前端漫谈" scheme="https://fenpho.github.io/categories/%E5%89%8D%E7%AB%AF%E6%BC%AB%E8%B0%88/"/>
    
    
    <category term="typescript" scheme="https://fenpho.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://fenpho.github.io/2022/01/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://fenpho.github.io/2022/01/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-01-14T01:08:18.000Z</published>
    <updated>2023-01-14T02:27:12.263Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、创建一个正则表达式"><a href="#一、创建一个正则表达式" class="headerlink" title="一、创建一个正则表达式"></a>一、创建一个正则表达式</h3><p>你可以使用以下两种方法构建一个正则表达式：</p><h4 id="1-1-使用一个正则表达式字面量"><a href="#1-1-使用一个正则表达式字面量" class="headerlink" title="1.1 使用一个正则表达式字面量"></a>1.1 使用一个正则表达式字面量</h4><p>其由包含在斜杠之间的模式组成，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> re = <span class="regexp">/ab+c/</span>;</span><br></pre></td></tr></table></figure><p>脚本加载后，正则表达式字面量就会被编译。当正则表达式保持不变时，使用此方法可获得更好的性能。</p><h4 id="1-2-调用RegExp对象的构造函数"><a href="#1-2-调用RegExp对象的构造函数" class="headerlink" title="1.2 调用RegExp对象的构造函数"></a>1.2 调用RegExp对象的构造函数</h4><p>如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;ab+c&quot;</span>);</span><br></pre></td></tr></table></figure><p>在脚本运行过程中，用构造函数创建的正则表达式会被编译。如果正则表达式将会改变，或者它将会从用户输入等来源中动态地产生，就需要使用构造函数来创建正则表达式。</p><h3 id="二、编写一个正则表达式的模式"><a href="#二、编写一个正则表达式的模式" class="headerlink" title="二、编写一个正则表达式的模式"></a>二、编写一个正则表达式的模式</h3><h4 id="2-1-使用简单模式"><a href="#2-1-使用简单模式" class="headerlink" title="2.1 使用简单模式"></a>2.1 使用简单模式</h4><p>简单模式是由你想直接找到的字符构成。</p><p>比如：</p><p>/abc/ 这个模式就能且仅能匹配 “abc” 字符按照顺序同时出现的情况。</p><p>在”Hi, do you know your abc’s?” 和 “The latest airplane designs evolved from slabcraft.”中会匹配成功。</p><p>上述两个例子中，匹配的子字符串是 “abc”。但是在 “Grab crab” 中会匹配失败，因为它虽然包含子字符串 “ab c”，但并不是准确的 “abc”。</p><h4 id="2-2-使用特殊字符"><a href="#2-2-使用特殊字符" class="headerlink" title="2.2 使用特殊字符"></a>2.2 使用特殊字符</h4><p>当你需要匹配一个不确定的字符串时，比如寻找一个或多个 “b”，或者寻找空格，可以在模式中使用特殊字符。</p><p>比如：</p><p>你可以使用 /ab<em>c/ 去匹配一个单独的 “a” 后面跟了零个或者多个 “b”，同时后面跟着 “c” 的字符串，</em>的意思是前一项出现零次或者多次。</p><p>在字符串 “cbbabbbbcdebc” 中，这个模式匹配了子字符串 “abbbbc”。</p><h5 id="1-常用元字符"><a href="#1-常用元字符" class="headerlink" title="1.常用元字符"></a>1.常用元字符</h5><table><thead><tr><th align="left">表达式</th><th align="left">可匹配</th></tr></thead><tbody><tr><td align="left">\d</td><td align="left">任意一个数字，0~9 中的任意一个</td></tr><tr><td align="left">\w</td><td align="left">任意一个字母或数字或下划线，也就是 A-Z,a-z,0~9,_ 中任意一个</td></tr><tr><td align="left">\s</td><td align="left">包括空格、制表符、换页符等空白字符的其中任意一个</td></tr><tr><td align="left">.</td><td align="left">小数点可以匹配除了换行符（\n）以外的任意一个字符</td></tr><tr><td align="left">\b</td><td align="left">匹配单词（起始位置必须是各种空白符）的开始或结束</td></tr><tr><td align="left">^</td><td align="left">匹配字符串的开始</td></tr><tr><td align="left">$</td><td align="left">匹配字符串的结束</td></tr></tbody></table><h5 id="2-常用的限定符"><a href="#2-常用的限定符" class="headerlink" title="2.常用的限定符"></a>2.常用的限定符</h5><table><thead><tr><th align="left">表达式</th><th align="left">说明</th></tr></thead></table><ul><li>| 重复零次或更多次</li></ul><ul><li>| 重复一次或更多次<br>？ | 重复零次或一次<br>{n} | 重复n次<br>{n,} | 重复n次或更多次<br>{n,m} | 重复n次或m次</li></ul><h3 id="三、使用正则表达式"><a href="#三、使用正则表达式" class="headerlink" title="三、使用正则表达式"></a>三、使用正则表达式</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec">exec</a></td><td align="left">一个在字符串中执行查找匹配的 RegExp 方法，它返回一个数组（未匹配到则返回 null）。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test">test</a></td><td align="left">一个在字符串中测试是否匹配的 RegExp 方法，它返回 true 或 false。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match">match</a></td><td align="left">一个在字符串中执行查找匹配的 String 方法，它返回一个数组，在未匹配到时会返回 null。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll">matchAll</a></td><td align="left">一个在字符串中执行查找所有匹配的 String 方法，它返回一个迭代器（iterator）。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search">search</a></td><td align="left">一个在字符串中测试匹配的 String 方法，它返回匹配到的位置索引，或者在失败时返回 -1。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace">replace</a></td><td align="left">一个在字符串中执行查找匹配的 String 方法，并且使用替换字符串替换掉匹配到的子字符串。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split">split</a></td><td align="left">一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的  String  方法。</td></tr><tr><td align="left">以exec为例：</td><td align="left"></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/d(b+)d/g</span>;</span><br><span class="line"><span class="keyword">const</span> regArray = regex.exec(<span class="string">&quot;cdbbdbsbz&quot;</span>);</span><br></pre></td></tr></table></figure><p>如果你不需要访问正则表达式的属性，这个脚本通过另一个方法来创建 myArray：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regArray = <span class="regexp">/d(b+)d/g</span>.exec(<span class="string">&quot;cdbbdbsbz&quot;</span>);</span><br><span class="line"><span class="comment">// 和 &quot;cdbbdbsbz&quot;.match(/d(b+)d/g); 相似。</span></span><br><span class="line"><span class="comment">// 但是 &quot;cdbbdbsbz&quot;.match(/d(b+)d/g) 输出数组 [ &quot;dbbd&quot; ]，</span></span><br><span class="line"><span class="comment">// 而 /d(b+)d/g.exec(&#x27;cdbbdbsbz&#x27;) 输出数组 [ &quot;dbbd&quot;, &quot;bb&quot;, index: 1, input: &quot;cdbbdbsbz&quot; ].</span></span><br></pre></td></tr></table></figure><p>如果你想通过一个字符串构建正则表达式，那么这个脚本还有另一种方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;d(b+)d&quot;</span>, <span class="string">&quot;g&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> regArray = regex.exec(<span class="string">&quot;cdbbdbsbz&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="四、常用正则合集"><a href="#四、常用正则合集" class="headerlink" title="四、常用正则合集"></a>四、常用正则合集</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1</span>、校验合法url</span><br><span class="line"></span><br><span class="line">/^(https?|ftp):\/\/([a-zA-Z0-<span class="number">9.</span>-]+(:[a-zA-Z0-<span class="number">9.</span>&amp;%$-]+)*@)*((<span class="number">25</span>[<span class="number">0</span>-<span class="number">5</span>]|<span class="number">2</span>[<span class="number">0</span>-<span class="number">4</span>][<span class="number">0</span>-<span class="number">9</span>]|<span class="number">1</span>[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">2</span>&#125;|[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]?)(\.(<span class="number">25</span>[<span class="number">0</span>-<span class="number">5</span>]|<span class="number">2</span>[<span class="number">0</span>-<span class="number">4</span>][<span class="number">0</span>-<span class="number">9</span>]|<span class="number">1</span>[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">2</span>&#125;|[<span class="number">1</span>-<span class="number">9</span>]?[<span class="number">0</span>-<span class="number">9</span>]))&#123;<span class="number">3</span>&#125;|([a-zA-Z0-<span class="number">9</span>-]+\.)*[a-zA-Z0-<span class="number">9</span>-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]&#123;<span class="number">2</span>&#125;))(:[<span class="number">0</span>-<span class="number">9</span>]+)*(\/($|[a-zA-Z0-<span class="number">9.</span>,?<span class="string">&#x27;\\+&amp;%$#=~_-]+))*$/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2、校验手机号码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[289])\d&#123;8&#125;$/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3、校验国内座机电话</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4、校验身份证</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5、校验车牌号</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/^(([京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-Z](([0-9]&#123;5&#125;[DF])|([DF]([A-HJ-NP-Z0-9])[0-9]&#123;4&#125;)))|([京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-Z][A-HJ-NP-Z0-9]&#123;4&#125;[A-HJ-NP-Z0-9挂学警港澳使领]))$/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">6、校验email地址</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">7、检验账号名称（只能由字母、数字、下划线组成，且以字母开头，8-20位）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/^[a-zA-Z][a-zA-Z0-9_]*&#123;8,20&#125;$/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">8、检验密码（8-20位含字母、数字的密码）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]&#123;8,20&#125;$/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">9、纯字母</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/^[a-zA-Z]*$/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">10、纯中文</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/^[\u4E00-\u9FA5]/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">11、整数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/^-?\d+$/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">12、整数且大于0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/^([1-9]\d*(\.\d+)?|0)$/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">13、小数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/^\d+\.\d+$/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">14、正整数、小数或0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/^\d+(\.?|(\.\d+)?)$/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">15、上传图片类型</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/image\/(png|jpg|jpeg|gif)$/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">16、域名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">17、qq号</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/^[1-9]*[1-9][0-9]*$/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">18、微信号</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/^[a-zA-Z]([-_a-zA-Z0-9]&#123;5,19&#125;)+$/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">19、ipv4地址</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">20、日期格式，yyyy-mm-dd</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/^\d&#123;4&#125;(-)\d&#123;1,2&#125;\1\d&#123;1,2&#125;$/</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>验证昵称是否为中文、英文、数字或者下划线，且长度为1到10。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/^([\u4E00-\uFA29]|[\uE7C7-\uE7F3]|[a-zA-Z0-9_])&#123;1,10&#125;$/</span>;</span><br><span class="line">regex.test(<span class="string">&#x27;xdsfsf是否fs&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>参考链接：</strong></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">MDN正则表达式</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、创建一个正则表达式&quot;&gt;&lt;a href=&quot;#一、创建一个正则表达式&quot; class=&quot;headerlink&quot; title=&quot;一、创建一个正则表达式&quot;&gt;&lt;/a&gt;一、创建一个正则表达式&lt;/h3&gt;&lt;p&gt;你可以使用以下两种方法构建一个正则表达式：&lt;/p&gt;
&lt;h4 id=&quot;</summary>
      
    
    
    
    <category term="前端漫谈" scheme="https://fenpho.github.io/categories/%E5%89%8D%E7%AB%AF%E6%BC%AB%E8%B0%88/"/>
    
    
    <category term="正则" scheme="https://fenpho.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>前端管理和编码规范</title>
    <link href="https://fenpho.github.io/2021/10/10/%E5%89%8D%E7%AB%AF%E7%AE%A1%E7%90%86%E5%92%8C%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>https://fenpho.github.io/2021/10/10/%E5%89%8D%E7%AB%AF%E7%AE%A1%E7%90%86%E5%92%8C%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</id>
    <published>2021-10-10T12:29:04.000Z</published>
    <updated>2023-01-12T13:59:48.341Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前端管理"><a href="#一、前端管理" class="headerlink" title="一、前端管理"></a>一、前端管理</h3><p>这边的前端管理主要指的是项目管理和团队协作两大块内容。我们先来说下项目管理这块。</p><h4 id="（一）、项目管理"><a href="#（一）、项目管理" class="headerlink" title="（一）、项目管理"></a>（一）、项目管理</h4><p>这块的主要内容来源于网络上的一篇博客，我稍微做了一些修改。<br>两个维度：项目内的管理与多项目之间的管理</p><ol><li>项目内的管理<br>在一个项目内，当有多个开发者一起协作开发时，或者功能越来越多、项目越来越庞大时，保证项目井然有序的进行是相当重要的。一般会从下面几点来考证一个项目是否管理得很好：<br>可扩展性：能够很方便、清晰的扩展一个页面、组件、模块<br>组件化：多个页面之间共用的大块代码可以独立成组件，多个页面、组件之间共用的小块代码可以独立成公共模块<br>可阅读性：阅读性良好（包括目录文件结构、代码结构），能够很快捷的找到某个页面、组件的文件，也能快捷的看出项目有哪些页面、组件<br>可移植性：能够轻松的对项目架构进行升级，或移植某些页面、组件、模块到其他项目<br>可重构性：对某个页面、组件、模块进行重构时，能够保证在重构之后功能不会改变、不会产生新 bug<br>开发友好：开发者在开发某一个功能时，能够有比较好的体验（不好的体验比如：多个文件相隔很远）<br>协作性：多人协作时，很少产生代码冲突、文件覆盖等问题<br>可交接性：当有人要离开项目时，交接给其他人是很方便的</li><li>1 可扩展性<br>对于前端项目而言，可扩展性是并不难的，因为很多时候前端的代码、文件分块都是按照页面来的，所以天然就是一块一块的。标准的vue文件具有template，script，style三大模块，天生就具备该属性。</li><li>2 组件化<br>这里的组件化是项目内的组件化，我们可以把多个页面之间共用的大块代码独立成组件，多个页面、组件之间共用的小块代码独立成公共模块。这样做的目的是为了提高代码的可重用性，避免重复造轮子。另外，也有利于代码之间的解耦。比如：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- src&#x2F;</span><br><span class="line">  - data&#x2F;                    # 常量、静态数据目录</span><br><span class="line">    - data1.js          </span><br><span class="line">    - data2.js</span><br><span class="line">    - ...          </span><br><span class="line">  - components&#x2F;              # 组件目录</span><br><span class="line">    - componnet1&#x2F;          </span><br><span class="line">    - componnet2&#x2F;</span><br><span class="line">    - ...          </span><br><span class="line">  - utils&#x2F;                   # 工具函数目录</span><br><span class="line">    - util1.js          </span><br><span class="line">    - util2.js</span><br><span class="line">    - ...     </span><br><span class="line">  - ...</span><br></pre></td></tr></table></figure><p>1.3 可阅读性</p><p>这里的可阅读性有两个方面：目录文件结构、代码结构。</p><p>1.3.1 目录文件结构</p><p>目录文件结构可阅读性的好与否除了跟开发者有关系外，跟项目的搭建者也有很大的关系，因为如果搭建者在最初就定义好整个项目的目录结构，对后期的开发者是一个很好的约束。可阅读性比较差的目录文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- src&#x2F;</span><br><span class="line">  - css&#x2F;                     # css 集合</span><br><span class="line">    - main&#x2F;                  # main 目录</span><br><span class="line">      - alpha.css</span><br><span class="line">      - beta.css</span><br><span class="line">      - ...</span><br><span class="line">  - js&#x2F;                      # js 集合</span><br><span class="line">    - main&#x2F;                  # main 目录</span><br><span class="line">      - alpha.js</span><br><span class="line">      - beta.js</span><br><span class="line">      - ...</span><br><span class="line">  - html&#x2F;                    # html 集合</span><br><span class="line">    - main&#x2F;                  # main 目录        </span><br><span class="line">      - alpha.html           # alpha 页面</span><br><span class="line">      - beta.html            # beta 页面</span><br><span class="line">      - ...</span><br></pre></td></tr></table></figure><p>可阅读性比较好的目录文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- src&#x2F;</span><br><span class="line">  - main&#x2F;                    # main 目录</span><br><span class="line">    - alpha&#x2F;                 # alpha 页面</span><br><span class="line">      - index.css            # css 入口文件</span><br><span class="line">      - index.js             # js 入口文件</span><br><span class="line">      - index.html           # html 入口文件</span><br><span class="line">      - ...</span><br><span class="line">    - beta&#x2F;                  # beta 页面</span><br><span class="line">      - index.css</span><br><span class="line">      - index.js</span><br><span class="line">      - index.html</span><br><span class="line">      - ...</span><br><span class="line">    - ...</span><br></pre></td></tr></table></figure><p>1.3.2 代码结构</p><p>代码结构的可阅读性大部分取决于开发者的水平，但我们可以使用工具帮助开发者书写规范、格式良好的代码。主要有下面的工具：</p><p>● .editorconfig: 统一每个开发人员的编辑器配置<br>● eslint: 检查 js 语法（包括 jsx 语法），然后最大程度的矫正不符合规范的代码<br>● stylelint: 检查 css 语法（包括 less, scss 语法），然后最大程度的矫正不符合规范的代码<br>● prettier: 代码格式优化<br>● husky + lint-staged: 强制开发人员对代码进行检查、自动矫正与优化</p><p>更详细的编码规范，交由接下来的编码规范模块进行讲解。</p><p>1.4 可移植性</p><p>可能的情况下，让项目具有一定的伸缩性，可以在未来轻松的对项目进行架构升级。</p><p>让项目能够轻松的移植某些页面、组件、模块到其他项目，需要对整个项目代码尽量的解耦与模块化。另外，也与后面会讲到的“项目之间的统一性”有关。</p><p>1.5 可重构性</p><p>对页面、组件的重构是常有的事，但怎样保证在重构之后功能不会改变、不会产生新 bug，这就得靠测试用例了。</p><p>● js 模块：jest / mocha<br>● React 组件：enzyme + jest，另外可以使用 react-testing-library 代替 react-dom/test-utils<br>● Vue 组件：vue-test-utils + jest / mocha</p><p>1.6 开发友好</p><p>这主要是从目录结构优化着手，传统mvc中，通常习惯于通过角色组织代码，但是这对Vue应用开发而言并不友好，vue是组件化的应用，更适用与通过功能来组织代码，也就是说完成同一功能的代码放在同一个目录下。</p><p>比如：像下面这种目录结构，如果要编辑一个页面，需要到处找页面相关的文件，编辑器上就会形成一个很长的目录树，就不怎么友好：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- src&#x2F;</span><br><span class="line">  - css&#x2F;                     # css 集合</span><br><span class="line">    - main&#x2F;                  # main 目录</span><br><span class="line">      - alpha.css</span><br><span class="line">      - beta.css</span><br><span class="line">      - ...        # 中间有 30 个页面</span><br><span class="line">  - js&#x2F;                      # js 集合</span><br><span class="line">    - main&#x2F;                  # main 目录</span><br><span class="line">      - alpha.js</span><br><span class="line">      - beta.js</span><br><span class="line">      - ...        # 中间有 30 个页面</span><br><span class="line">  - html&#x2F;                    # html 集合</span><br><span class="line">    - main&#x2F;                  # main 目录        </span><br><span class="line">      - alpha.html           # alpha 页面</span><br><span class="line">      - beta.html            # beta 页面</span><br><span class="line">      - ...        # 中间有 30 个页面</span><br></pre></td></tr></table></figure><p>而像下面这种目录结构，所有的文件都在一个目录下，找文件就很方便，而且很清晰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- src&#x2F;</span><br><span class="line">  - main&#x2F;                    # main 目录</span><br><span class="line">    - alpha&#x2F;                 # alpha 页面</span><br><span class="line">      - index.css            # css 入口文件</span><br><span class="line">      - index.js             # js 入口文件</span><br><span class="line">      - index.html           # html 入口文件</span><br><span class="line">      - ...</span><br><span class="line">    - beta&#x2F;                  # beta 页面</span><br><span class="line">      - index.css</span><br><span class="line">      - index.js</span><br><span class="line">      - index.html</span><br><span class="line">      - ...</span><br><span class="line">    - ...</span><br></pre></td></tr></table></figure><p>1.7 协作性<br>当项目变大、多人协作时，我们就需要管理好哪些是正在开发的代码、哪些是提交测试的代码、哪些是已经上线的代码、如何避免代码冲突与线上新代码被旧代码覆盖等等。这个具体见接下来的协作流程。<br>1.8 可交接性<br>当有人要离开项目时，就需要把他负责的代码交接给别人，但怎么样才能使交接是轻松愉快的？那就是文档，包括注释文档、接口文档等。想想，如果没有文档，该怎样交接呢？<br>2. 多项目之间的管理<br>多个项目之间，如何管理好项目之间联系，比如共用组件、公共模块等，保证快捷高效开发、不重复造轮子，也是很重要的。一般会从下面几点来考证多个项目之间是否管理得很好：<br>组件化：多个项目共用的代码应当独立出来，成为一个单独的组件项目<br>版本化：组件项目与应用项目都应当版本化管理，特别是组件项目的版本应当符合 semver 语义化版本规范<br>统一性：多个项目之间应当使用相同的技术选型、UI 框架、脚手架、开发工具、构建工具、测试库、目录规范、代码规范等，相同功能应指定使用固定某一个库<br>文档化：组件项目一定需要相关的文档，应用项目在必要的时候也要形成相应的文档<br>2.1 组件化<br>这里的组件化是项目之间的组件化，我们可以把多个项目共用的代码独立出来，成为一个单独的组件项目。这样做的目的也是为了提高代码的可重用性，避免重复造轮子。另外，也便于版本化管理组件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- project1&#x2F;                  # 项目一</span><br><span class="line">  - package.json</span><br><span class="line">  - src&#x2F; </span><br><span class="line">  - ...</span><br><span class="line">  </span><br><span class="line">- project2&#x2F;                  # 项目二</span><br><span class="line">  - package.json</span><br><span class="line">  - src&#x2F; </span><br><span class="line">  - ...  </span><br><span class="line">  </span><br><span class="line">- component1&#x2F;                # 组件一</span><br><span class="line">  - package.json</span><br><span class="line">  - src&#x2F; </span><br><span class="line">  - dist&#x2F; </span><br><span class="line">  - ...</span><br><span class="line">  </span><br><span class="line">- component2&#x2F;                # 组件二</span><br><span class="line">  - package.json</span><br><span class="line">  - src&#x2F; </span><br><span class="line">  - dist&#x2F; </span><br><span class="line">  - ...</span><br></pre></td></tr></table></figure><p>在 project1 中使用 component1、component2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># package.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;component1&quot;: &quot;^0.0.1&quot;,</span><br><span class="line">    &quot;component2&quot;: &quot;^0.0.1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">import component1 from &#39;component1&#39;;</span><br><span class="line">import component2 from &#39;component2&#39;;</span><br></pre></td></tr></table></figure><p>常用组件有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@yourCompany&#x2F;utils: 工具类</span><br><span class="line">@yourCompany&#x2F;shortcut.css: 快捷 css 类</span><br><span class="line">@yourCompany&#x2F;data: 常用静态数据</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="（二）、团队协作"><a href="#（二）、团队协作" class="headerlink" title="（二）、团队协作"></a>（二）、团队协作</h4><p>上面的管理比较抽象，下面我们进行具体的协作流程讲解。</p><ol><li>权限申请</li></ol><p>1.1 Git账号及项目权限</p><p>下载按照git后配置一个全局账号，然后申请加入对应项目</p><ol start="2"><li>协作流程</li></ol><p>2.1 派生项目</p><p>第一步：找到需要开发的源项目，点击派生（Fock）</p><p>第二步：选择派生的命名空间</p><p>点击命名空间后就开始派生项目，派生完成后会自动跳转到派生项目，后续的开发都在你派生后的项目下进行。</p><p>2.2 克隆项目到本地</p><p>●  复制使用ssh克隆的地址</p><p>● 克隆项目</p><p>我一般习惯在文件夹右键，直接运行命令行进行克隆，也可以使用工具SourceTree等进行克隆</p><p>● 检出新分支<br>找到需要进行开发的分支，并检出新分支<br>●  提交代码 </p><p>  格式:<br>    ■ code：info（code和info见下表）</p><p>code    info<br>feat：msg    新功能 feature<br>fix：msg    修复 bug<br>merge：msg    merge<br>docs：msg    文档修改<br>style：msg    格式，不影响代码运行的变动<br>refactor：msg    重构即不是新增功能，也不是修改bug 的代码变动<br>test：msg    增加测试<br>chore：msg    构建过程或辅助工具的变动<br>rm：msg    删除文件或代码</p><p>2.3 发起合并请求</p><p>找到你的派生出来的项目，点击合并请求，发起合并请求，并通知相关人员及时复查以及合并代码</p><h3 id="二、编码规范"><a href="#二、编码规范" class="headerlink" title="二、编码规范"></a>二、编码规范</h3><p>这个因公司而已，我的个人项目习惯采用Airbnb标准代码风格，点击前往官网<br>地址：<a href="https://github.com/airbnb/javascript">https://github.com/airbnb/javascript</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、前端管理&quot;&gt;&lt;a href=&quot;#一、前端管理&quot; class=&quot;headerlink&quot; title=&quot;一、前端管理&quot;&gt;&lt;/a&gt;一、前端管理&lt;/h3&gt;&lt;p&gt;这边的前端管理主要指的是项目管理和团队协作两大块内容。我们先来说下项目管理这块。&lt;/p&gt;
&lt;h4 id=&quot;（</summary>
      
    
    
    
    <category term="前端漫谈" scheme="https://fenpho.github.io/categories/%E5%89%8D%E7%AB%AF%E6%BC%AB%E8%B0%88/"/>
    
    
    <category term="管理, 规范" scheme="https://fenpho.github.io/tags/%E7%AE%A1%E7%90%86-%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>vue组件间通信</title>
    <link href="https://fenpho.github.io/2021/06/12/vue%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    <id>https://fenpho.github.io/2021/06/12/vue%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1/</id>
    <published>2021-06-12T14:17:50.000Z</published>
    <updated>2023-01-15T06:56:30.146Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Props和emit"><a href="#一、Props和emit" class="headerlink" title="一、Props和emit"></a>一、Props和emit</h3><p>父组件A通过props的方式向子组件B传递，B to A 通过在 B 组件中 $emit, A 组件中 v-on 的方式实现。<br>1.父组件向子组件传值<br>接下来我们通过一个例子，说明父组件如何向子组件传递值：在子组件Users.vue中如何获取父组件App.vue中的数据 users:[“Henry”,”Bucky”,”Emily”]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//App.vue父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;users v-bind:users=<span class="string">&quot;users&quot;</span>&gt;&lt;<span class="regexp">/users&gt;/</span><span class="regexp">/前者自定义名称便于子组件调用，后者要传递数据名</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Users <span class="keyword">from</span> <span class="string">&quot;./components/Users&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      users:[<span class="string">&quot;Henry&quot;</span>,<span class="string">&quot;Bucky&quot;</span>,<span class="string">&quot;Emily&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    <span class="string">&quot;users&quot;</span>:Users</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//users子组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;hello&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;user in users&quot;</span>&gt;&#123;&#123;user&#125;&#125;&lt;<span class="regexp">/li&gt;/</span><span class="regexp">/遍历传递过来的值，然后呈现到页面</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line">  props:&#123;</span><br><span class="line">    users:&#123;           <span class="comment">//这个就是父组件中子标签自定义名字</span></span><br><span class="line">      type:<span class="built_in">Array</span>,</span><br><span class="line">      required:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>总结：父组件通过props向下传递数据给子组件。注：组件中的数据共有三种形式：data、props、computed</p><h3 id="二、EventBus"><a href="#二、EventBus" class="headerlink" title="二、EventBus"></a>二、EventBus</h3><p>eventBus可以在全局定义，实现全项目通讯，使用方法也很简单。</p><p>1、初始化——全局定义<br>全局定义，可以将eventBus绑定到vue实例的原型上,也可以直接绑定到window对象上.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line">Vue.prototype.$EventBus = <span class="keyword">new</span> Vue();</span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="built_in">window</span>.EventBus = <span class="keyword">new</span> Vue();</span><br></pre></td></tr></table></figure><p>2、触发事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用方式一定义时</span></span><br><span class="line"><span class="built_in">this</span>.$EventBus.$emit(<span class="string">&#x27;eventName&#x27;</span>, param1,param2,...)</span><br><span class="line"><span class="comment">//使用方式二定义时</span></span><br><span class="line">EventBus.$emit(<span class="string">&#x27;eventName&#x27;</span>, param1,param2,...)</span><br></pre></td></tr></table></figure><p>3、监听事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用方式一定义时</span></span><br><span class="line"><span class="built_in">this</span>.$EventBus.$on(<span class="string">&#x27;eventName&#x27;</span>, <span class="function">(<span class="params">param1,param2,...</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//需要执行的代码</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//使用方式二定义时</span></span><br><span class="line">EventBus.$on(<span class="string">&#x27;eventName&#x27;</span>, <span class="function">(<span class="params">param1,param2,...</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//需要执行的代码</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>4、移除监听事件</p><p>为了避免在监听时，事件被反复触发，通常需要在页面销毁时移除事件监听。或者在开发过程中，由于热更新，事件可能会被多次绑定监听，这时也需要移除事件监听。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用方式一定义时</span></span><br><span class="line"><span class="built_in">this</span>.$EventBus.$off(<span class="string">&#x27;eventName&#x27;</span>);</span><br><span class="line"><span class="comment">//使用方式二定义时</span></span><br><span class="line">EventBus.$off(<span class="string">&#x27;eventName&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="三、Provide和Inject"><a href="#三、Provide和Inject" class="headerlink" title="三、Provide和Inject"></a>三、Provide和Inject</h3><blockquote><p>官方解释<br>provide<br>选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的property。<br>inject<br>可以是一个字符串数组、也可以是一个对象<br>说白了，就是provide在祖先组件中注入，inject 在需要使用的地方引入即可。<br>我们可以把依赖注入看做一部分大范围的prop，只不过它以下特点：<br>● 祖先组件不需要知道哪些后代组件使用它提供的属性<br>● 后代组件不需要知道被注入的属性是来自那里</p></blockquote><p><strong>注意：</strong><br>provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的 property 还是可响应的。</p><p>下面举一个例子：</p><p>祖先<br>index.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;grandPa&quot;</span>&gt;</span><br><span class="line">  爷爷级别 : <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; nameObj.name &#125;&#125; 今年 <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span>岁， 城市<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span>&#123;&#123; city &#125;&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">  &lt;child /&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;el-button type=<span class="string">&quot;primary&quot;</span> plain @click=<span class="string">&quot;changeName&quot;</span>&gt;改变名称&lt;/el-button&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;@/components/ProvideText/parent&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">name: <span class="string">&#x27;ProvideGrandPa&#x27;</span>,</span><br><span class="line">components: &#123; child &#125;,</span><br><span class="line">data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    nameObj: &#123;</span><br><span class="line">      name: <span class="string">&#x27;小布&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    age: <span class="number">12</span>,</span><br><span class="line">    city: <span class="string">&#x27;北京&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">provide</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    nameObj: <span class="built_in">this</span>.nameObj,   <span class="comment">//传入一个可监听的对象</span></span><br><span class="line">    cityFn: <span class="function">() =&gt;</span> <span class="built_in">this</span>.city,  <span class="comment">//通过computed来计算注入的值</span></span><br><span class="line">    age: <span class="built_in">this</span>.age  <span class="comment">//直接传值</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  <span class="function"><span class="title">changeName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.nameObj.name === <span class="string">&#x27;小布&#x27;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.nameObj.name = <span class="string">&#x27;貂蝉&#x27;</span></span><br><span class="line">      <span class="built_in">this</span>.city = <span class="string">&#x27;香港&#x27;</span></span><br><span class="line">      <span class="built_in">this</span>.age = <span class="number">24</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.nameObj.name = <span class="string">&#x27;小布&#x27;</span></span><br><span class="line">      <span class="built_in">this</span>.city = <span class="string">&#x27;北京&#x27;</span></span><br><span class="line">      <span class="built_in">this</span>.age = <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=<span class="string">&quot;scss&quot;</span> scoped&gt;</span><br><span class="line">.grandPa&#123;</span><br><span class="line">width: 600px;</span><br><span class="line">height:100px;</span><br><span class="line">line-height: 100px;</span><br><span class="line">border: 2px solid  #7fffd4;</span><br><span class="line">padding:<span class="number">0</span> 10px;</span><br><span class="line">text-align: center;</span><br><span class="line">margin:50px auto;</span><br><span class="line">strong&#123;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  text-decoration: underline;;</span><br><span class="line">&#125;</span><br><span class="line">.blue&#123;</span><br><span class="line">    color: blue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>中间组件<br>parent.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;parent&quot;</span>&gt;</span><br><span class="line">  父亲级别 : <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>只用作中转<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">  &lt;son /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">&#x27;./son&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">name: <span class="string">&#x27;ProvideParent&#x27;</span>,</span><br><span class="line">components: &#123; Son &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=<span class="string">&quot;scss&quot;</span> scoped&gt;</span><br><span class="line">.parent&#123;</span><br><span class="line">height:100px;</span><br><span class="line">line-height: 100px;</span><br><span class="line">border: 2px solid  #feafef;</span><br><span class="line">padding:<span class="number">0</span> 10px;</span><br><span class="line">margin-top: 20px;</span><br><span class="line">strong&#123;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  text-decoration: underline;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>后代组件<br>son.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;son&quot;</span>&gt;</span><br><span class="line">  孙子级别 : <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; nameObj.name &#125;&#125; 今年 <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span>岁， 城市<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span>&#123;&#123; city &#125;&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">name: <span class="string">&#x27;ProvideSon&#x27;</span>,</span><br><span class="line"><span class="comment">//inject 来获取的值</span></span><br><span class="line">inject: [<span class="string">&#x27;nameObj&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;cityFn&#x27;</span>],</span><br><span class="line">computed: &#123;</span><br><span class="line">  <span class="function"><span class="title">city</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.cityFn()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=<span class="string">&quot;scss&quot;</span> scoped&gt;</span><br><span class="line">.son&#123;</span><br><span class="line">  height:100px;</span><br><span class="line">  line-height: 100px;</span><br><span class="line">  padding:<span class="number">0</span> 10px;</span><br><span class="line">  margin: 20px;</span><br><span class="line">  border: 1px solid #49e2af;</span><br><span class="line">strong&#123;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  text-decoration: underline;;</span><br><span class="line">&#125;</span><br><span class="line">.blue&#123;</span><br><span class="line">    color: blue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>执行之后会发现一个小细节。<br>无论我点击多少次，孙子组件的年龄age字段永远都是12并不会发生变化。<br>正是官网所提到的provide 和 inject绑定并不是可响应的。这是刻意为之的。<br>所以大家使用的时候，一定要注意注入的方式，不然很可能无法实现数据响应。</p><h3 id="四、vuex"><a href="#四、vuex" class="headerlink" title="四、vuex"></a>四、vuex</h3><p>vuex的通信，大家可以前往我的另一篇博客<a href="https://fenpho.github.io/2018/12/27/Vue%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E4%B9%8BVuex/">vue状态管理之Vuex</a></p><h3 id="五、-attrs-listeners"><a href="#五、-attrs-listeners" class="headerlink" title="五、$attrs/$listeners"></a>五、$attrs/$listeners</h3><p>1.简介<br>多级组件嵌套需要传递数据时，通常使用的方法是通过vuex。但如果仅仅是传递数据，而不做中间处理，使用 vuex 处理，未免有点大材小用。为此Vue2.4 版本提供了另一种方法—-$attrs/$listeners<br>● $attrs：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=”$attrs” 传入内部组件。通常配合 inheritAttrs 选项一起使用。<br>● $listeners：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件<br>接下来我们看个跨级通信的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// index.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;浪里行舟&lt;/h2&gt;</span><br><span class="line">    &lt;child-com1</span><br><span class="line">      :foo=<span class="string">&quot;foo&quot;</span></span><br><span class="line">      :boo=<span class="string">&quot;boo&quot;</span></span><br><span class="line">      :coo=<span class="string">&quot;coo&quot;</span></span><br><span class="line">      :doo=<span class="string">&quot;doo&quot;</span></span><br><span class="line">      title=<span class="string">&quot;前端工匠&quot;</span></span><br><span class="line">    &gt;&lt;/child-com1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> childCom1 = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./childCom1.vue&quot;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123; childCom1 &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      foo: <span class="string">&quot;Javascript&quot;</span>,</span><br><span class="line">      boo: <span class="string">&quot;Html&quot;</span>,</span><br><span class="line">      coo: <span class="string">&quot;CSS&quot;</span>,</span><br><span class="line">      doo: <span class="string">&quot;Vue&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// childCom1.vue</span></span><br><span class="line">&lt;template <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;border&quot;</span>&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;foo: &#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;childCom1的$attrs: &#123;&#123; $attrs &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;child-com2 v-bind=<span class="string">&quot;$attrs&quot;</span>&gt;&lt;/child-com2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> childCom2 = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./childCom2.vue&quot;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    childCom2</span><br><span class="line">  &#125;,</span><br><span class="line">  inheritAttrs: <span class="literal">false</span>, <span class="comment">// 可以关闭自动挂载到组件根元素上的没有在props声明的属性</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    foo: <span class="built_in">String</span> <span class="comment">// foo作为props属性绑定</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$attrs); <span class="comment">// &#123; &quot;boo&quot;: &quot;Html&quot;, &quot;coo&quot;: &quot;CSS&quot;, &quot;doo&quot;: &quot;Vue&quot;, &quot;title&quot;: &quot;前端工匠&quot; &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// childCom2.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;border&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;boo: &#123;&#123; boo &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;childCom2: &#123;&#123; $attrs &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;child-com3 v-bind=<span class="string">&quot;$attrs&quot;</span>&gt;&lt;/child-com3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> childCom3 = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./childCom3.vue&quot;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    childCom3</span><br><span class="line">  &#125;,</span><br><span class="line">  inheritAttrs: <span class="literal">false</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    boo: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$attrs); <span class="comment">// &#123; &quot;coo&quot;: &quot;CSS&quot;, &quot;doo&quot;: &quot;Vue&quot;, &quot;title&quot;: &quot;前端工匠&quot; &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// childCom3.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;border&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;childCom3: &#123;&#123; $attrs &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    coo: <span class="built_in">String</span>,</span><br><span class="line">    title: <span class="built_in">String</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>没有继承数据的对象，格式为{属性名：属性值}。Vue2.4提供了$attrs , $listeners 来传递数据与事件，跨级组件之间的通讯变得更简单。<br>简单来说：$attrs与$listeners 是两个对象，$attrs 里存放的是父组件中绑定的非 Props 属性，$listeners里存放的是父组件中绑定的非原生事件。</p><h3 id="六、-parent-children与-ref"><a href="#六、-parent-children与-ref" class="headerlink" title="六、$parent / $children与 ref"></a>六、$parent / $children与 ref</h3><p>● ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例<br>● $parent / $children：访问父 / 子实例<br>需要注意的是：这两种都是直接得到组件实例，使用后可以直接调用组件的方法或访问数据。我们先来看个用 ref来访问组件的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// component-a 子组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title: <span class="string">&#x27;Vue.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sayHello () &#123;</span><br><span class="line">      <span class="built_in">window</span>.alert(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;component-a ref=<span class="string">&quot;comA&quot;</span>&gt;&lt;/component-a&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    mounted () &#123;</span><br><span class="line">      <span class="keyword">const</span> comA = <span class="built_in">this</span>.$refs.comA;</span><br><span class="line">      <span class="built_in">console</span>.log(comA.title);  <span class="comment">// Vue.js</span></span><br><span class="line">      comA.sayHello();  <span class="comment">// 弹窗</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、Props和emit&quot;&gt;&lt;a href=&quot;#一、Props和emit&quot; class=&quot;headerlink&quot; title=&quot;一、Props和emit&quot;&gt;&lt;/a&gt;一、Props和emit&lt;/h3&gt;&lt;p&gt;父组件A通过props的方式向子组件B传递，B to A 通</summary>
      
    
    
    
    <category term="前端漫谈" scheme="https://fenpho.github.io/categories/%E5%89%8D%E7%AB%AF%E6%BC%AB%E8%B0%88/"/>
    
    
    <category term="Vue, 通信" scheme="https://fenpho.github.io/tags/Vue-%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>使用mock.js模拟接口返回</title>
    <link href="https://fenpho.github.io/2021/01/10/%E4%BD%BF%E7%94%A8mock-js%E6%A8%A1%E6%8B%9F%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E/"/>
    <id>https://fenpho.github.io/2021/01/10/%E4%BD%BF%E7%94%A8mock-js%E6%A8%A1%E6%8B%9F%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E/</id>
    <published>2021-01-10T12:29:04.000Z</published>
    <updated>2023-01-12T13:40:25.298Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><p><code>npm install mockjs</code></p><p>src目录同级别，新建mock目录，新建index.js文件</p><h3 id="二、新建入口文件"><a href="#二、新建入口文件" class="headerlink" title="二、新建入口文件"></a>二、新建入口文件</h3><p>遍历mock目录下文件，动态注册所有mock接口</p><p>mock/index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先引入Mock</span></span><br><span class="line"><span class="keyword">const</span> Mock = <span class="built_in">require</span>(<span class="string">&#x27;mockjs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置拦截ajax请求的相应时间</span></span><br><span class="line">Mock.setup(&#123;</span><br><span class="line">  timeout: <span class="string">&#x27;200-600&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> configArray = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用webpack的require.context()遍历所有mock文件</span></span><br><span class="line"><span class="keyword">const</span> files = <span class="built_in">require</span>.context(<span class="string">&#x27;.&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/index.js$/</span>);</span><br><span class="line">files.keys().forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (key === <span class="string">&#x27;./index.js&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">  configArray = configArray.concat(files(key).default);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 注册所有的mock服务</span></span><br><span class="line">configArray.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!item || item === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [path, target] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(item)) &#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="built_in">window</span>.syncProjectProperties.BASE_URL + path;</span><br><span class="line">    Mock.mock(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;^&#x27;</span> + url), target);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、示例"><a href="#三、示例" class="headerlink" title="三、示例"></a>三、示例</h3><p>新建API文件夹，在该目录下新建模块接口模拟</p><p>mock/api/examples/index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: AI模块相关接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入mock数据</span></span><br><span class="line"><span class="keyword">import</span> &#123; queryCatalogTreeContent, querySituationTreeIndexList &#125; <span class="keyword">from</span> <span class="string">&#x27;./data&#x27;</span>;</span><br><span class="line"><span class="comment">// 导出mock相关api与方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 需要mock的api地址</span></span><br><span class="line">  <span class="comment">// option =&gt; body 报文；type：请求方式；url：请求地址</span></span><br><span class="line">  <span class="string">&#x27;service/ai/dict/queryCatalogTreeContent&#x27;</span>: <span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sendData(<span class="literal">true</span>, options,<span class="string">&#x27;queryCatalogTreeContent&#x27;</span>);</span><br><span class="line">    <span class="comment">// return sendData(false, options,&#x27;queryCatalogTreeContent&#x27;);</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;service/ai/scence/querySituationTreeIndexList&#x27;</span>: <span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sendData(<span class="literal">true</span>, options,<span class="string">&#x27;querySituationTreeIndexList&#x27;</span>);</span><br><span class="line">    <span class="comment">// return sendData(false, options,&#x27;querySituationTreeIndexList&#x27;);</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: // 获取列表数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendData</span> (<span class="params">type = <span class="literal">true</span>, options, name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 模拟正确返回</span></span><br><span class="line">  <span class="keyword">if</span> (type) &#123;</span><br><span class="line">    <span class="keyword">const</span> request = <span class="built_in">JSON</span>.parse(options.body)</span><br><span class="line">    <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;queryCatalogTreeContent&#x27;</span>: <span class="keyword">const</span> response = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(queryCatalogTreeContent.success)); response.body.default.dataset = response.body.default[request.body.default.catalog_value]; <span class="keyword">return</span> response;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;querySituationTreeIndexList&#x27;</span>: <span class="keyword">return</span> querySituationTreeIndexList.success;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 模拟错误返回</span></span><br><span class="line">  <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;queryCatalogTreeContent&#x27;</span>: <span class="keyword">return</span> queryCatalogTreeContent.error;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;querySituationTreeIndexList&#x27;</span>: <span class="keyword">return</span> querySituationTreeIndexList.error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mock/api/examples/data.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: AI模块相关接口数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// xxx</span></span><br><span class="line"><span class="keyword">const</span> queryCatalogTreeContent = &#123;</span><br><span class="line">  success: &#123;</span><br><span class="line">    <span class="string">&#x27;header&#x27;</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;success&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;body&#x27;</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        company_type: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;DSI06657B8B4DBC4B8796516FDF6B241FAD&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;股份公司&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">        certificate: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;value&quot;</span>: <span class="string">&quot;certificate&quot;</span>,</span><br><span class="line">            <span class="string">&quot;label&quot;</span>: <span class="string">&quot;增值业务电信许可证&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">        certificate_level: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;value&quot;</span>: <span class="string">&quot;DSIE3738D433EE74F18933D0182EF351709&quot;</span>,</span><br><span class="line">            <span class="string">&quot;label&quot;</span>: <span class="string">&quot;国际&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  error: &#123;</span><br><span class="line">    header: &#123;</span><br><span class="line">      <span class="keyword">default</span>: &#123;</span><br><span class="line">        success: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;服务器错误&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> querySituationTreeIndexList = &#123;</span><br><span class="line">  success: &#123;</span><br><span class="line">    <span class="string">&#x27;header&#x27;</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;success&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;body&#x27;</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;reg_date&#x27;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;注册时间&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;multiple&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;placeholder&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;company_type&#x27;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;企业类型&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;multiple&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;placeholder&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  error: &#123;</span><br><span class="line">    header: &#123;</span><br><span class="line">      <span class="keyword">default</span>: &#123;</span><br><span class="line">        success: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;服务器错误&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  queryCatalogTreeContent,</span><br><span class="line">  querySituationTreeIndexList</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h3&gt;&lt;p&gt;&lt;code&gt;npm install mockjs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;src目录同级别，新建mock目录，新建ind</summary>
      
    
    
    
    <category term="前端漫谈" scheme="https://fenpho.github.io/categories/%E5%89%8D%E7%AB%AF%E6%BC%AB%E8%B0%88/"/>
    
    
    <category term="Mock, 接口" scheme="https://fenpho.github.io/tags/Mock-%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Vue-cli3以上版本添加IE兼容</title>
    <link href="https://fenpho.github.io/2020/07/07/Vue-cli3%E4%BB%A5%E4%B8%8A%E7%89%88%E6%9C%AC%E6%B7%BB%E5%8A%A0IE%E5%85%BC%E5%AE%B9/"/>
    <id>https://fenpho.github.io/2020/07/07/Vue-cli3%E4%BB%A5%E4%B8%8A%E7%89%88%E6%9C%AC%E6%B7%BB%E5%8A%A0IE%E5%85%BC%E5%AE%B9/</id>
    <published>2020-07-07T13:37:23.000Z</published>
    <updated>2023-01-12T13:24:04.341Z</updated>
    
    <content type="html"><![CDATA[<p>安装babel相关依赖做js转换处理<br>package.json</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;@vue/cli-plugin-babel&quot;: &quot;~4.4.0&quot;,</span><br><span class="line">    &quot;core-js&quot;: &quot;^3.15.2&quot;,</span><br><span class="line">    &quot;regenerator-runtime&quot;: &quot;^0.13.7&quot;,</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  &quot;browserslist&quot;: [</span><br><span class="line">    &quot;&gt; 1%&quot;,</span><br><span class="line">    &quot;last 2 versions&quot;,</span><br><span class="line">    <span class="string">&quot;not ie &lt;= 9&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置babel<br>babel.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    [<span class="string">&#x27;@vue/app&#x27;</span>, &#123;</span><br><span class="line">      useBuiltIns: <span class="string">&#x27;entry&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ],</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;component&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        libraryName: <span class="string">&#x27;element-ui&#x27;</span>,</span><br><span class="line">        styleLibraryName: <span class="string">&#x27;theme-chalk&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于babel默认不处理node-modules里面的文件，故需要将要处理的依赖手动添加到需要处理的列表中<br>vue.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  transpileDependencies: [<span class="string">&#x27;element-ui&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入口文件处添加babel<br>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;core-js/stable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;regenerator-runtime/runtime&#x27;</span>;</span><br></pre></td></tr></table></figure><p>参考文档：<br><a href="https://cli.vuejs.org/zh/guide/browser-compatibility.html#usebuiltins-usage">vue-cli文档之浏览器兼容性</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;安装babel相关依赖做js转换处理&lt;br&gt;package.json&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="前端漫谈" scheme="https://fenpho.github.io/categories/%E5%89%8D%E7%AB%AF%E6%BC%AB%E8%B0%88/"/>
    
    
    <category term="微信小程序, 导航" scheme="https://fenpho.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%AF%BC%E8%88%AA/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序导航不生效处理</title>
    <link href="https://fenpho.github.io/2020/04/07/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AF%BC%E8%88%AA%E4%B8%8D%E7%94%9F%E6%95%88%E5%A4%84%E7%90%86/"/>
    <id>https://fenpho.github.io/2020/04/07/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AF%BC%E8%88%AA%E4%B8%8D%E7%94%9F%E6%95%88%E5%A4%84%E7%90%86/</id>
    <published>2020-04-07T13:37:23.000Z</published>
    <updated>2023-01-12T11:44:10.261Z</updated>
    
    <content type="html"><![CDATA[<p>在微信小程序开发过程中，如果你发现wx.navigateTo/wx.redirectTo 无效了，放在别的页面却有效，可以从以下几点入手。</p><ol><li>你的页面在app.json文件中注册了吗？ </li><li>你的url地址写对了吗，目录层级没错吗? </li><li>你要跳转到的页面是非tabBar的页面吗？如果是tabBar（指的是底部有导航菜单的页面，如下图 底部的首页，用户中心菜单）页面，恭喜你，找到问题了。 </li></ol><p><img src="1.png" alt="tabBar页面"></p><p>wx.navigateTo/wx.redirectTo只能用在非tabBar页面的跳转<br>示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">loginBtnClick: function()&#123;</span><br><span class="line">    app.appData.userinfo &#x3D; &#123;username: this.data.username, password: this.data.password&#125;</span><br><span class="line">    wx.redirectTo(&#123;</span><br><span class="line">      url: &#39;..&#x2F;user&#x2F;user&#39;,</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(app.appData.userinfo.username);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>此处要跳转的页面为用户中心，是带tabBar的页面，故无法跳转，将wx.redirectTo改为wx.switchTab即可</p><p>附：tabBar的配置<br>在根目录下找到app.json文件，添加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;tabBar&quot;: &#123;</span><br><span class="line">    &quot;list&quot;: [&#123;</span><br><span class="line">      &quot;pagePath&quot;: &quot;pages&#x2F;index&#x2F;index&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;首页&quot;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      &quot;pagePath&quot;: &quot;pages&#x2F;user&#x2F;user&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;用户中心&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在微信小程序开发过程中，如果你发现wx.navigateTo/wx.redirectTo 无效了，放在别的页面却有效，可以从以下几点入手。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你的页面在app.json文件中注册了吗？ &lt;/li&gt;
&lt;li&gt;你的url地址写对了吗，目录层级没错吗? &lt;</summary>
      
    
    
    
    <category term="前端漫谈" scheme="https://fenpho.github.io/categories/%E5%89%8D%E7%AB%AF%E6%BC%AB%E8%B0%88/"/>
    
    
    <category term="微信小程序, 导航" scheme="https://fenpho.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%AF%BC%E8%88%AA/"/>
    
  </entry>
  
  <entry>
    <title>Windows环境下nvm的安装及使用</title>
    <link href="https://fenpho.github.io/2019/09/12/Windows%E7%8E%AF%E5%A2%83%E4%B8%8Bnvm%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https://fenpho.github.io/2019/09/12/Windows%E7%8E%AF%E5%A2%83%E4%B8%8Bnvm%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2019-09-12T14:16:45.000Z</published>
    <updated>2023-01-12T11:38:30.141Z</updated>
    
    <content type="html"><![CDATA[<p>首先需要说明的是： nvm不支持Windows！！！，但是有替代品，也就是nvm-windows，类似git和git for windows一样。</p><p>第一步：<a href="https://github.com/coreybutler/nvm-windows/releases">点击下载 nvm</a>，打开该项目在github上面的下载页面后，我们选择latest中的第一个：nvm-noinstall.zip，点击下载。</p><p><img src="1.png" alt="image.png"></p><p>下载完成后解压到一个地方，比如: C:\dev\nvm 里面的文件列表是这样的：elevate.cmd、elevate.vbs、install.cmd、LICENSE、nvm.exe</p><ul><li><p>  备注：windows下要设置显示文件类型的扩展名，这样才能看到上述文件的后缀</p></li><li><p>双击 install.cmd 然后会让你输入”压缩文件解压或拷贝到的一个绝对路径” 先不用管它，直接回车，成功后，会在C盘的根目录生成一个settings.txt的文本文件，把这个文件剪切到C:\dev\nvm目录中，然后我们把它的内容修改成这样：</p><blockquote><p>root: C:\dev\nvm <br>path: C:\dev\nodejs <br>arch: 64 <br>proxy: none <br>node_mirror: <a href="http://npm.taobao.org/mirrors/node/">http://npm.taobao.org/mirrors/node/</a><br>npm_mirror: <a href="https://npm.taobao.org/mirrors/npm/">https://npm.taobao.org/mirrors/npm/</a></p></blockquote></li><li><p>  然后我们开始配置环境变量了<br>右键点击我的电脑</p></li></ul><p><img src="2.png" alt="image.png"></p><p>点击属性，在弹出的页面中点击高级系统设置</p><p><img src="3.png" alt="image.png"></p><p>弹出如上图所示窗口，点击右下角的环境变量即可。</p><p>因为刚刚点击了install.cmd的文件，那么会在环境变量的系统变量中，生成两个环境变量：<code>NVM_HOME</code> 和 <code>NVM_SYMLINK</code> 我们开始修改这两个变量名的变量值：<code>NVM_HOME</code>的变量值为：<code>C:\dev\nvm</code>； <code>NVM_SYMLINK</code>的变量值为：<code>C:\dev\nodejs</code></p><ul><li>  观察Path看它的值是否包含C:\dev\nvm;或者是C:\dev\nodejs，如果有的话，把他们删掉，没有的话更好，我们自己来配置，在Path中新增两个值分别为<blockquote><p>%NVM_HOME%<br>%NVM_SYMLINK%</p></blockquote></li></ul><p><img src="4.png" alt="image.png"></p><ul><li><p>  打开一个cmd窗口输入命令：<code>nvm v</code> ，那么我们会看到当前nvm的版本信息。然后我们可以安装nodejs了。</p></li><li><p>  继续输入命令：<code>nvm install latest</code> 如果网络畅通，我们会看到正在下载的提示，下载完成后 会让你use那个最新的node版本。</p></li><li><p>  如果你是第一次下载，在use之前，<code>C:\dev</code>目录下是没有nodejs这个文件夹的，在输入比如： <code>nvm use 5.11.0</code> 之后，你会发现，<code>C:\dev</code>目录下多了一个nodejs文件夹，这个文件夹不是单纯的文件夹，它是一个快捷方式，指向了 <code>C:\dev\nvm</code> 里的 v5.11.0 文件夹。</p></li><li><p>  同样的咱们可以下载其他版本的nodejs，这样通过命令:<code>nvm use 版本号</code> 比如：<code>nvm use 5.11.0</code>就可以轻松实现版本切换了。</p></li><li><p>  备注： 如果你的电脑系统是32 位的，那么在下载nodejs版本的时候，一定要指明 32 如： <code>nvm install 5.11.0 32</code> 这样在32位的电脑系统中，才可以使用，默认是64位的。</p></li></ul><h2 id="npm的安装"><a href="#npm的安装" class="headerlink" title="npm的安装"></a><strong>npm的安装</strong></h2><blockquote><p>首先 npm是什么？ <br>npm有两层含义，第一是npm这个开源的模块登记和管理系统，也就是这个站点：<a href="https://www.npmjs.com/">https://www.npmjs.com</a>。 <br>第二个指的是 nodejs package manager 也就是nodejs的包管理工具。我们主要说的就是这一个。 <br>在每个版本的nodejs中，都会自带npm，为了统一起见，我们安装一个全局的npm工具，这个操作很有必要，因为我们需要安装一些全局的其他包，不会因为切换node版本造成原来下载过的包不可用。</p></blockquote><ul><li><p>首先我们进入命令模式，输入 <code>npm config set prefix &quot;C:\dev\nvm\npm&quot;</code> 回车，这是在配置npm的全局安装路径，然后在用户文件夹下会生成一个.npmrc的文件，用记事本打开后可以看到如下内容：</p><blockquote><p>prefix=C:\dev\nvm\npm</p></blockquote></li><li><p>  然后继续在命令中输入： <code>npm install npm -g</code> 回车后会发现正在下载npm包，在<code>C:\dev\nvm\npm</code>目录中可以看到下载中的文件，以后我们只要用npm安装包的时候加上 <code>-g</code> 就可以把包安装在我们刚刚配置的全局路径下了。</p></li><li><p>  我们为这个npm配置环境变量： 变量名为：NPM_HOME，变量值为 ：<code>C:\dev\nvm\npm</code></p></li><li><p>  在Path的最前面添加<code>;%NPM_HOME%</code>，注意了，这个一定要添加在 <code>%NVM_SYMLINK%</code>之前，所以我们直接把它放到Path的最前面</p></li><li><p>  最后我们新打开一个命令窗口，输入<code>npm -v</code> ,此时我们使用的就是我们统一下载的npm包了。</p></li><li><p>同样的我们还可以安装cnpm工具，它是中国版的npm镜像库，地址在这里：<a href="https://cnpmjs.org/">https://cnpmjs.org/</a>，也是npm官方的一个拷贝，因为我们和外界有一堵墙隔着，所以用这个国内的比较快，淘宝也弄了一个和npm一样的镜像库，<a href="http://npm.taobao.org/">http://npm.taobao.org/</a>，它和官方的npm每隔10分钟同步一次。安装方式：</p><ul><li>  <code>npm install -g cnpm --registry=http://r.cnpmjs.org</code></li><li>  或者用淘宝的<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li><li>  安装好了cnpm后，直接执行<code>cnpm install 包名</code>比如：<code>cnpm install bower -g</code> 就可以了。<code>-g</code>只是为了把包安装在全局路径下。如果不全局安装，也可以在当前目录中安装，不用<code>-g</code>就可以了。</li></ul></li></ul><h2 id="nrm-的安装"><a href="#nrm-的安装" class="headerlink" title="nrm 的安装"></a><strong>nrm 的安装</strong></h2><blockquote><p>什么是nrm？ <br>nrm就是npm registry manager 也就是npm的镜像源管理工具，有时候国外资源太慢，那么我们可以用这个来切换镜像源。 <br>我们只要通过这个命令: <code>npm install -g nrm</code> 就可以实现安装。 <br>注意<code>-g</code>可以直接放到install的后面，我们以后也最好这样用，因为这样用，我们可以在cmd中上下箭头切换最近命令的时候，容易修改，更方便操作。安装完成后，我们就可以使用了。</p></blockquote><ul><li>  命令：<code>nrm ls</code> 用于展示所有可切换的镜像地址</li><li>  命令：<code>nrm use cnpm</code> 我们这样就可以直接切换到cnpm上了。当然也可以按照上面罗列的其他内容进行切换</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先需要说明的是： nvm不支持Windows！！！，但是有替代品，也就是nvm-windows，类似git和git for windows一样。&lt;/p&gt;
&lt;p&gt;第一步：&lt;a href=&quot;https://github.com/coreybutler/nvm-windows/</summary>
      
    
    
    
    <category term="前端漫谈" scheme="https://fenpho.github.io/categories/%E5%89%8D%E7%AB%AF%E6%BC%AB%E8%B0%88/"/>
    
    
    <category term="Node, Javascript" scheme="https://fenpho.github.io/tags/Node-Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Node入门，从Hello world到高级入门</title>
    <link href="https://fenpho.github.io/2019/02/23/Node%E5%85%A5%E9%97%A8%EF%BC%8C%E4%BB%8EHello-world%E5%88%B0%E9%AB%98%E7%BA%A7%E5%85%A5%E9%97%A8/"/>
    <id>https://fenpho.github.io/2019/02/23/Node%E5%85%A5%E9%97%A8%EF%BC%8C%E4%BB%8EHello-world%E5%88%B0%E9%AB%98%E7%BA%A7%E5%85%A5%E9%97%A8/</id>
    <published>2019-02-23T15:14:45.000Z</published>
    <updated>2023-01-12T14:39:53.884Z</updated>
    
    <content type="html"><![CDATA[<p>作者： <a href="http://twitter.com/manuelkiessling">Manuel Kiessling</a>  翻译： <a href="http://weibo.com/goddyzhao">goddyzhao</a> &amp; <a href="http://www.otakustay.com/">GrayZhang</a> &amp; <a href="http://weibo.com/cmonday">MondayChen</a></p><h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>本书致力于教会你如何用Node.js来开发应用，过程中会传授你所有所需的“高级”JavaScript知识。本书绝不是一本“Hello World”的教程。</p><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>你正在阅读的已经是本书的最终版。因此，只有当进行错误更正以及针对新版本Node.js的改动进行对应的修正时，才会进行更新。</p><p>本书中的代码案例都在Node.js 0.6.11版本中测试过，可以正确工作。</p><h3 id="读者对象"><a href="#读者对象" class="headerlink" title="读者对象"></a>读者对象</h3><p>本书最适合与我有相似技术背景的读者： 至少对一门诸如Ruby、Python、PHP或者Java这样面向对象的语言有一定的经验；对JavaScript处于初学阶段，并且完全是一个Node.js的新手。</p><p>这里指的适合对其他编程语言有一定经验的开发者，意思是说，本书不会对诸如数据类型、变量、控制结构等等之类非常基础的概念作介绍。要读懂本书，这些基础的概念我都默认你已经会了。</p><p>然而，本书还是会对JavaScript中的函数和对象作详细介绍，因为它们与其他同类编程语言中的函数和对象有很大的不同。</p><h3 id="本书结构"><a href="#本书结构" class="headerlink" title="本书结构"></a>本书结构</h3><p>读完本书之后，你将完成一个完整的web应用，该应用允许用户浏览页面以及上传文件。</p><p>当然了，应用本身并没有什么了不起的，相比为了实现该功能书写的代码本身，我们更关注的是如何创建一个框架来对我们应用的不同模块进行干净地剥离。 是不是很玄乎？稍后你就明白了。</p><p>本书先从介绍在Node.js环境中进行JavaScript开发和在浏览器环境中进行JavaScript开发的差异开始。</p><p>紧接着，会带领大家完成一个最传统的“Hello World”应用，这也是最基础的Node.js应用。</p><p>最后，会和大家讨论如何设计一个“真正”完整的应用，剖析要完成该应用需要实现的不同模块，并一步一步介绍如何来实现这些模块。</p><p>可以确保的是，在这过程中，大家会学到JavaScript中一些高级的概念、如何使用它们以及为什么使用这些概念就可以实现而其他编程语言中同类的概念就无法实现。</p><p>该应用所有的源代码都可以通过 <a href="https://github.com/ManuelKiessling/NodeBeginnerBook/tree/master/code/application">本书Github代码仓库</a>.</p><p>目录</p><ul><li>关于<ul><li>  状态</li><li>  读者对象</li><li>  本书结构</li></ul></li><li>JavaScript与Node.js<ul><li>  JavaScript与你</li><li>  简短申明</li><li>  服务器端JavaScript</li><li>  “Hello World”</li></ul></li><li>一个完整的基于Node.js的web应用<ul><li>  用例</li><li>  应用不同模块分析</li></ul></li><li>构建应用的模块<ul><li>  一个基础的HTTP服务器</li><li>  分析HTTP服务器</li><li>  进行函数传递</li><li>  函数传递是如何让HTTP服务器工作的</li><li>  基于事件驱动的回调</li><li>  服务器是如何处理请求的</li><li>  服务端的模块放在哪里</li><li>  如何来进行请求的“路由”</li><li>  行为驱动执行</li><li>  路由给真正的请求处理程序</li><li>让请求处理程序作出响应<ul><li>  不好的实现方式</li><li>  阻塞与非阻塞</li><li>  以非阻塞操作进行请求响应</li></ul></li><li>更有用的场景<ul><li>  处理POST请求</li><li>  处理文件上传</li></ul></li><li>  总结与展望</li></ul></li></ul><h2 id="JavaScript与Node-js"><a href="#JavaScript与Node-js" class="headerlink" title="JavaScript与Node.js"></a>JavaScript与Node.js</h2><h3 id="JavaScript与你"><a href="#JavaScript与你" class="headerlink" title="JavaScript与你"></a>JavaScript与你</h3><p>抛开技术，我们先来聊聊你以及你和JavaScript的关系。本章的主要目的是想让你看看，对你而言是否有必要继续阅读后续章节的内容。</p><p>如果你和我一样，那么你很早就开始利用HTML进行“开发”，正因如此，你接触到了这个叫JavaScript有趣的东西，而对于JavaScript，你只会基本的操作——为web页面添加交互。</p><p>而你真正想要的是“干货”，你想要知道如何构建复杂的web站点 —— 于是，你学习了一种诸如PHP、Ruby、Java这样的编程语言，并开始书写“后端”代码。</p><p>与此同时，你还始终关注着JavaScript，随着通过一些对jQuery，Prototype之类技术的介绍，你慢慢了解到了很多JavaScript中的进阶技能，同时也感受到了JavaScript绝非仅仅是*window.open() *那么简单。 .</p><p>不过，这些毕竟都是前端技术，尽管当想要增强页面的时候，使用jQuery总让你觉得很爽，但到最后，你顶多是个JavaScript<em>用户</em>，而非JavaScript<em>开发者</em>。</p><p>然后，出现了Node.js，服务端的JavaScript，这有多酷啊？</p><p>于是，你觉得是时候该重新拾起既熟悉又陌生的JavaScript了。但是别急，写Node.js应用是一件事情；理解为什么它们要以它们书写的这种方式来书写则意味着——你要懂JavaScript。这次是玩真的了。</p><p>问题来了： 由于JavaScript真正意义上以两种，甚至可以说是三种形态存在（从中世纪90年代的作为对DHTML进行增强的小玩具，到像jQuery那样严格 意义上的前端技术，一直到现在的服务端技术），因此，很难找到一个“正确”的方式来学习JavaScript，使得让你书写Node.js应用的时候感觉 自己是在真正开发它而不仅仅是使用它。</p><p>因为这就是关键： 你本身已经是个有经验的开发者，你不想通过到处寻找各种解决方案（其中可能还有不正确的）来学习新的技术，你要确保自己是通过正确的方式来学习这项技术。</p><p>当然了，外面不乏很优秀的学习JavaScript的文章。但是，有的时候光靠那些文章是远远不够的。你需要的是指导。</p><p>本书的目标就是给你提供指导。</p><h3 id="简短申明"><a href="#简短申明" class="headerlink" title="简短申明"></a>简短申明</h3><p>业界有非常优秀的JavaScript程序员。而我并非其中一员。</p><p>我就是上一节中描述的那个我。我熟悉如何开发后端web应用，但是对“真正”的JavaScript以及Node.js，我都只是新手。我也只是最近学习了一些JavaScript的高级概念，并没有实践经验。</p><p>因此，本书并不是一本“从入门到精通”的书，更像是一本“从初级入门到高级入门”的书。</p><p>如果成功的话，那么本书就是我当初开始学习Node.js最希望拥有的教程。</p><h3 id="服务端JavaScript"><a href="#服务端JavaScript" class="headerlink" title="服务端JavaScript"></a>服务端JavaScript</h3><p>JavaScript最早是运行在浏览器中，然而浏览器只是提供了一个上下文，它定义了使用JavaScript可以做什么，但并没有“说”太多关于 JavaScript语言本身可以做什么。事实上，JavaScript是一门“完整”的语言： 它可以使用在不同的上下文中，其能力与其他同类语言相比有过之而无不及。</p><p>Node.js事实上就是另外一种上下文，它允许在后端（脱离浏览器环境）运行JavaScript代码。</p><p>要实现在后台运行JavaScript代码，代码需要先被解释然后正确的执行。Node.js的原理正是如此，它使用了Google的V8虚拟机 （Google的Chrome浏览器使用的JavaScript执行环境），来解释和执行JavaScript代码。</p><p>除此之外，伴随着Node.js的还有许多有用的模块，它们可以简化很多重复的劳作，比如向终端输出字符串。</p><p>因此，Node.js事实上既是一个运行时环境，同时又是一个库。</p><p>要使用Node.js,首先需要进行安装。关于如何安装Node.js，这里就不赘述了，可以直接参考<a href="https://github.com/joyent/node/wiki/Installation">官方的安装指南</a>。安装完成后，继续回来阅读本书下面的内容。</p><h3 id="“Hello-World”"><a href="#“Hello-World”" class="headerlink" title="“Hello World”"></a>“Hello World”</h3><p>好了，“废话”不多说了，马上开始我们第一个Node.js应用：“Hello World”。</p><p>打开你最喜欢的编辑器，创建一个<em>helloworld.js</em>文件。我们要做就是向STDOUT输出“Hello World”，如下是实现该功能的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure><p>保存该文件，并通过Node.js来执行：</p><p><code>node helloworld.js</code></p><p>正常的话，就会在终端输出<em>Hello World</em> 。</p><p>好吧，我承认这个应用是有点无趣，那么下面我们就来点“干货”。</p><h2 id="一个完整的基于Node-js的web应用"><a href="#一个完整的基于Node-js的web应用" class="headerlink" title="一个完整的基于Node.js的web应用"></a>一个完整的基于Node.js的web应用</h2><h3 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h3><p>我们来把目标设定得简单点，不过也要够实际才行：</p><ul><li>  用户可以通过浏览器使用我们的应用。</li><li>  当用户请求*<a href="http://domain/start">http://domain/start</a>*时，可以看到一个欢迎页面，页面上有一个文件上传的表单。</li><li>  用户可以选择一个图片并提交表单，随后文件将被上传到*<a href="http://domain/upload">http://domain/upload</a>*，该页面完成上传后会把图片显示在页面上。</li></ul><p>差不多了，你现在也可以去Google一下，找点东西乱搞一下来完成功能。但是我们现在先不做这个。</p><p>更进一步地说，在完成这一目标的过程中，我们不仅仅需要基础的代码而不管代码是否优雅。我们还要对此进行抽象，来寻找一种适合构建更为复杂的Node.js应用的方式。</p><h3 id="应用不同模块分析"><a href="#应用不同模块分析" class="headerlink" title="应用不同模块分析"></a>应用不同模块分析</h3><p>我们来分解一下这个应用，为了实现上文的用例，我们需要实现哪些部分呢？</p><ul><li>  我们需要提供Web页面，因此需要一个<em>HTTP服务器</em></li><li>  对于不同的请求，根据请求的URL，我们的服务器需要给予不同的响应，因此我们需要一个<em>路由</em>，用于把请求对应到请求处理程序（request handler）</li><li>  当请求被服务器接收并通过路由传递之后，需要可以对其进行处理，因此我们需要最终的<em>请求处理程序</em></li><li>  路由还应该能处理POST数据，并且把数据封装成更友好的格式传递给请求处理入程序，因此需要<em>请求数据处理功能</em></li><li>  我们不仅仅要处理URL对应的请求，还要把内容显示出来，这意味着我们需要一些<em>视图逻辑</em>供请求处理程序使用，以便将内容发送给用户的浏览器</li><li>  最后，用户需要上传图片，所以我们需要<em>上传处理功能</em>来处理这方面的细节</li></ul><p>我们先来想想，使用PHP的话我们会怎么构建这个结构。一般来说我们会用一个Apache HTTP服务器并配上mod_php5模块。<br>从这个角度看，整个“接收HTTP请求并提供Web页面”的需求根本不需要PHP来处理。</p><p>不过对Node.js来说，概念完全不一样了。使用Node.js时，我们不仅仅在实现一个应用，同时还实现了整个HTTP服务器。事实上，我们的Web应用以及对应的Web服务器基本上是一样的。</p><p>听起来好像有一大堆活要做，但随后我们会逐渐意识到，对Node.js来说这并不是什么麻烦的事。</p><p>现在我们就来开始实现之路，先从第一个部分–HTTP服务器着手。</p><h2 id="构建应用的模块"><a href="#构建应用的模块" class="headerlink" title="构建应用的模块"></a>构建应用的模块</h2><h3 id="一个基础的HTTP服务器"><a href="#一个基础的HTTP服务器" class="headerlink" title="一个基础的HTTP服务器"></a>一个基础的HTTP服务器</h3><p>当我准备开始写我的第一个“真正的”Node.js应用的时候，我不但不知道怎么写Node.js代码，也不知道怎么组织这些代码。 <br>我应该把所有东西都放进一个文件里吗？网上有很多教程都会教你把所有的逻辑都放进一个用Node.js写的基础HTTP服务器里。但是如果我想加入更多的内容，同时还想保持代码的可读性呢？</p><p>实际上，只要把不同功能的代码放入不同的模块中，保持代码分离还是相当简单的。</p><p>这种方法允许你拥有一个干净的主文件（main file），你可以用Node.js执行它；同时你可以拥有干净的模块，它们可以被主文件和其他的模块调用。</p><p>那么，现在我们来创建一个用于启动我们的应用的主文件，和一个保存着我们的HTTP服务器代码的模块。</p><p>在我的印象里，把主文件叫做<em>index.js</em>或多或少是个标准格式。把服务器模块放进叫<em>server.js</em>的文件里则很好理解。</p><p>让我们先从服务器模块开始。在你的项目的根目录下创建一个叫<em>server.js</em>的文件，并写入以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">  response.write(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">  response.end();</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure><p>搞定！你刚刚完成了一个可以工作的HTTP服务器。为了证明这一点，我们来运行并且测试这段代码。首先，用Node.js执行你的脚本：</p><p><code>node server.js</code></p><p>接下来，打开浏览器访问<a href="http://localhost:8888/">http://localhost:8888/</a>，你会看到一个写着“Hello World”的网页。</p><p>这很有趣，不是吗？让我们先来谈谈HTTP服务器的问题，把如何组织项目的事情先放一边吧，你觉得如何？我保证之后我们会解决那个问题的。</p><h3 id="分析HTTP服务器"><a href="#分析HTTP服务器" class="headerlink" title="分析HTTP服务器"></a>分析HTTP服务器</h3><p>那么接下来，让我们分析一下这个HTTP服务器的构成。</p><p>第一行<em>请求（require）</em>Node.js自带的 <em>http</em> 模块，并且把它赋值给 <em>http</em> 变量。</p><p>接下来我们调用http模块提供的函数： <em>createServer</em> 。这个函数会返回一个对象，这个对象有一个叫做 <em>listen</em> 的方法，这个方法有一个数值参数，指定这个HTTP服务器监听的端口号。</p><p>咱们暂时先不管 <em>http.createServer</em> 的括号里的那个函数定义。</p><p>我们本来可以用这样的代码来启动服务器并侦听8888端口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line">server.listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure><p>这段代码只会启动一个侦听8888端口的服务器，它不做任何别的事情，甚至连请求都不会应答。</p><p>最有趣（而且，如果你之前习惯使用一个更加保守的语言，比如PHP，它还很奇怪）的部分是 <em>createSever()</em> 的第一个参数，一个函数定义。</p><p>实际上，这个函数定义是 <em>createServer()</em> 的第一个也是唯一一个参数。因为在JavaScript中，函数和其他变量一样都是可以被传递的。</p><h3 id="进行函数传递"><a href="#进行函数传递" class="headerlink" title="进行函数传递"></a>进行函数传递</h3><p>举例来说，你可以这样做：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">word</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(word);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">someFunction, value</span>)</span>&#123;</span><br><span class="line">  someFunction(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">execute(say,<span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>请仔细阅读这段代码！在这里，我们把 <em>say</em> 函数作为<em>execute</em>函数的第一个变量进行了传递。这里返回的不是 <em>say</em> 的返回值，而是 <em>say</em> 本身！</p><p>这样一来， <em>say</em> 就变成了<em>execute</em> 中的本地变量 <em>someFunction</em> ，execute可以通过调用 <em>someFunction()</em> （带括号的形式）来使用 <em>say</em> 函数。</p><p>当然，因为 <em>say</em> 有一个变量， <em>execute</em> 在调用 <em>someFunction</em> 时可以传递这样一个变量。</p><p>我们可以，就像刚才那样，用它的名字把一个函数作为变量传递。但是我们不一定要绕这个“先定义，再传递”的圈子，我们可以直接在另一个函数的括号中定义和传递这个函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">someFunction, value</span>)</span>&#123;</span><br><span class="line">  someFunction(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">execute(<span class="function"><span class="keyword">function</span>(<span class="params">word</span>)</span>&#123; <span class="built_in">console</span>.log(word)&#125;,<span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>我们在 <em>execute</em> 接受第一个参数的地方直接定义了我们准备传递给 <em>execute</em> 的函数。</p><p>用这种方式，我们甚至不用给这个函数起名字，这也是为什么它被叫做 <em>匿名函数</em> 。</p><p>这是我们和我所认为的“进阶”JavaScript的第一次亲密接触，不过我们还是得循序渐进。现在，我们先接受这一点：在JavaScript中，一个 函数可以作为另一个函数接收一个参数。我们可以先定义一个函数，然后传递，也可以在传递参数的地方直接定义函数。</p><h3 id="函数传递是如何让HTTP服务器工作的"><a href="#函数传递是如何让HTTP服务器工作的" class="headerlink" title="函数传递是如何让HTTP服务器工作的"></a>函数传递是如何让HTTP服务器工作的</h3><p>带着这些知识，我们再来看看我们简约而不简单的HTTP服务器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">  response.write(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">  response.end();</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p>现在它看上去应该清晰了很多：我们向 <em>createServer</em> 函数传递了一个匿名函数。</p><p>用这样的代码也可以达到同样的目的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">  response.write(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">  response.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http.createServer(onRequest).listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure><p>也许现在我们该问这个问题了：我们为什么要用这种方式呢？</p><h3 id="基于事件驱动的回调"><a href="#基于事件驱动的回调" class="headerlink" title="基于事件驱动的回调"></a>基于事件驱动的回调</h3><p>这个问题可不好回答（至少对我来说），不过这是Node.js原生的工作方式。它是事件驱动的，这也是它为什么这么快的原因。</p><p>你也许会想花点时间读一下Felix Geisendörfer的大作<a href="http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb">Understanding node.js</a>，它介绍了一些背景知识。</p><p>这一切都归结于“Node.js是事件驱动的”这一事实。好吧，其实我也不是特别确切的了解这句话的意思。不过我会试着解释，为什么它对我们用Node.js写网络应用（Web based application）是有意义的。</p><p>当我们使用 <em>http.createServer</em> 方法的时候，我们当然不只是想要一个侦听某个端口的服务器，我们还想要它在服务器收到一个HTTP请求的时候做点什么。</p><p>问题是，这是异步的：请求任何时候都可能到达，但是我们的服务器却跑在一个单进程中。</p><p>写PHP应用的时候，我们一点也不为此担心：任何时候当有请求进入的时候，网页服务器（通常是Apache）就为这一请求新建一个进程，并且开始从头到尾执行相应的PHP脚本。</p><p>那么在我们的Node.js程序中，当一个新的请求到达8888端口的时候，我们怎么控制流程呢？</p><p>嗯，这就是Node.js/JavaScript的事件驱动设计能够真正帮上忙的地方了——虽然我们还得学一些新概念才能掌握它。让我们来看看这些概念是怎么应用在我们的服务器代码里的。</p><p>我们创建了服务器，并且向创建它的方法传递了一个函数。无论何时我们的服务器收到一个请求，这个函数就会被调用。</p><p>我们不知道这件事情什么时候会发生，但是我们现在有了一个处理请求的地方：它就是我们传递过去的那个函数。至于它是被预先定义的函数还是匿名函数，就无关紧要了。</p><p>这个就是传说中的 <em>回调</em> 。我们给某个方法传递了一个函数，这个方法在有相应事件发生时调用这个函数来进行 <em>回调</em> 。</p><p>至少对我来说，需要一些功夫才能弄懂它。你如果还是不太确定的话就再去读读Felix的博客文章。</p><p>让我们再来琢磨琢磨这个新概念。我们怎么证明，在创建完服务器之后，即使没有HTTP请求进来、我们的回调函数也没有被调用的情况下，我们的代码还继续有效呢？我们试试这个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request received.&quot;</span>);</span><br><span class="line">  response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">  response.write(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">  response.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http.createServer(onRequest).listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Server has started.&quot;</span>);</span><br></pre></td></tr></table></figure><p>注意：在 <em>onRequest</em> （我们的回调函数）触发的地方，我用 <em>console.log</em> 输出了一段文本。在HTTP服务器开始工作<em>之后</em>，也输出一段文本。</p><p>当我们与往常一样，运行它<em>node server.js</em>时，它会马上在命令行上输出“Server has started.”。当我们向服务器发出请求（在浏览器访问<a href="http://localhost:8888/">http://localhost:8888/</a> ），“Request received.”这条消息就会在命令行中出现。</p><p>这就是事件驱动的异步服务器端JavaScript和它的回调啦！</p><p>（请注意，当我们在服务器访问网页时，我们的服务器可能会输出两次“Request received.”。那是因为大部分服务器都会在你访问 <a href="http://localhost:8888/">http://localhost:8888</a> /时尝试读取 <a href="http://localhost:8888/favicon.ico">http://localhost:8888/favicon.ico</a> )</p><h3 id="服务器是如何处理请求的"><a href="#服务器是如何处理请求的" class="headerlink" title="服务器是如何处理请求的"></a>服务器是如何处理请求的</h3><p>好的，接下来我们简单分析一下我们服务器代码中剩下的部分，也就是我们的回调函数 <em>onRequest()</em> 的主体部分。</p><p>当回调启动，我们的 <em>onRequest()</em> 函数被触发的时候，有两个参数被传入： <em>request</em> 和 <em>response</em> 。</p><p>它们是对象，你可以使用它们的方法来处理HTTP请求的细节，并且响应请求（比如向发出请求的浏览器发回一些东西）。</p><p>所以我们的代码就是：当收到请求时，使用 <em>response.writeHead()</em> 函数发送一个HTTP状态200和HTTP头的内容类型（content-type），使用 <em>response.write()</em> 函数在HTTP相应主体中发送文本“Hello World”。</p><p>最后，我们调用 <em>response.end()</em> 完成响应。</p><p>目前来说，我们对请求的细节并不在意，所以我们没有使用 <em>request</em> 对象。</p><h3 id="服务端的模块放在哪里"><a href="#服务端的模块放在哪里" class="headerlink" title="服务端的模块放在哪里"></a>服务端的模块放在哪里</h3><p>OK，就像我保证过的那样，我们现在可以回到我们如何组织应用这个问题上了。我们现在在 <em>server.js</em> 文件中有一个非常基础的HTTP服务器代码，而且我提到通常我们会有一个叫 <em>index.js</em> 的文件去调用应用的其他模块（比如 <em>server.js</em> 中的HTTP服务器模块）来引导和启动应用。</p><p>我们现在就来谈谈怎么把server.js变成一个真正的Node.js模块，使它可以被我们（还没动工）的 <em>index.js</em> 主文件使用。</p><p>也许你已经注意到，我们已经在代码中使用了模块了。像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">http.createServer(...);</span><br></pre></td></tr></table></figure><p>Node.js中自带了一个叫做“http”的模块，我们在我们的代码中请求它并把返回值赋给一个本地变量。</p><p>这把我们的本地变量变成了一个拥有所有 <em>http</em> 模块所提供的公共方法的对象。</p><p>给这种本地变量起一个和模块名称一样的名字是一种惯例，但是你也可以按照自己的喜好来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">foo.createServer(...);</span><br></pre></td></tr></table></figure><p>很好，怎么使用Node.js内部模块已经很清楚了。我们怎么创建自己的模块，又怎么使用它呢？</p><p>等我们把 <em>server.js</em> 变成一个真正的模块，你就能搞明白了。</p><p>事实上，我们不用做太多的修改。把某段代码变成模块意味着我们需要把我们希望提供其功能的部分 <em>导出</em> 到请求这个模块的脚本。</p><p>目前，我们的HTTP服务器需要导出的功能非常简单，因为请求服务器模块的脚本仅仅是需要启动服务器而已。</p><p>我们把我们的服务器脚本放到一个叫做 <em>start</em> 的函数里，然后我们会导出这个函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Request received.&quot;</span>);</span><br><span class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">    response.write(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Server has started.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.start = start;</span><br></pre></td></tr></table></figure><p>这样，我们现在就可以创建我们的主文件 <em>index.js</em> 并在其中启动我们的HTTP了，虽然服务器的代码还在 <em>server.js</em> 中。</p><p>创建 <em>index.js</em> 文件并写入以下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">&quot;./server&quot;</span>);</span><br><span class="line"></span><br><span class="line">server.start();</span><br></pre></td></tr></table></figure><p>正如你所看到的，我们可以像使用任何其他的内置模块一样使用server模块：请求这个文件并把它指向一个变量，其中已导出的函数就可以被我们使用了。</p><p>好了。我们现在就可以从我们的主要脚本启动我们的的应用了，而它还是老样子：</p><p><code>node index.js</code></p><p>非常好，我们现在可以把我们的应用的不同部分放入不同的文件里，并且通过生成模块的方式把它们连接到一起了。</p><p>我们仍然只拥有整个应用的最初部分：我们可以接收HTTP请求。但是我们得做点什么——对于不同的URL请求，服务器应该有不同的反应。</p><p>对于一个非常简单的应用来说，你可以直接在回调函数 <em>onRequest()</em> 中做这件事情。不过就像我说过的，我们应该加入一些抽象的元素，让我们的例子变得更有趣一点儿。</p><p>处理不同的HTTP请求在我们的代码中是一个不同的部分，叫做“路由选择”——那么，我们接下来就创造一个叫做 <em>路由</em> 的模块吧。</p><h3 id="如何来进行请求的“路由”"><a href="#如何来进行请求的“路由”" class="headerlink" title="如何来进行请求的“路由”"></a>如何来进行请求的“路由”</h3><p>我们要为路由提供请求的URL和其他需要的GET及POST参数，随后路由需要根据这些数据来执行相应的代码（这里“代码”对应整个应用的第三部分：一系列在接收到请求时真正工作的处理程序）。</p><p>因此，我们需要查看HTTP请求，从中提取出请求的URL以及GET/POST参数。这一功能应当属于路由还是服务器（甚至作为一个模块自身的功能）确实值得探讨，但这里暂定其为我们的HTTP服务器的功能。</p><p>我们需要的所有数据都会包含在request对象中，该对象作为<em>onRequest()<em>回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的Node.JS模块，它们分别是</em>url</em>和<em>querystring</em>模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">                               url.parse(string).query</span><br><span class="line">                                           |</span><br><span class="line">           url.parse(string).pathname      |</span><br><span class="line">                       |                   |</span><br><span class="line">                       |                   |</span><br><span class="line">                     ------ -------------------</span><br><span class="line">http:&#x2F;&#x2F;localhost:8888&#x2F;start?foo&#x3D;bar&amp;hello&#x3D;world</span><br><span class="line">                                ---       -----</span><br><span class="line">                                 |          |</span><br><span class="line">                                 |          |</span><br><span class="line">              querystring(string)[&quot;foo&quot;]    |</span><br><span class="line">                                            |</span><br><span class="line">                         querystring(string)[&quot;hello&quot;]</span><br></pre></td></tr></table></figure><p>当然我们也可以用<em>querystring</em>模块来解析POST请求体中的参数，稍后会有演示。</p><p>现在我们来给*onRequest()*函数加上一些逻辑，用来找出浏览器请求的URL路径：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Request for &quot;</span>+ pathname +<span class="string">&quot; received.&quot;</span>);</span><br><span class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">    response.write(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Server has started.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.start = start;</span><br></pre></td></tr></table></figure><p>好了，我们的应用现在可以通过请求的URL路径来区别不同请求了–这使我们得以使用路由（还未完成）来将请求以URL路径为基准映射到处理程序上。</p><p>在我们所要构建的应用中，这意味着来自*/start<em>和</em>/upload*的请求可以使用不同的代码来处理。稍后我们将看到这些内容是如何整合到一起的。</p><p>现在我们可以来编写路由了，建立一个名为<em>router.js</em>的文件，添加以下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">pathname</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;About to route a request for &quot;</span>+ pathname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.route = route;</span><br></pre></td></tr></table></figure><p>如你所见，这段代码什么也没干，不过对于现在来说这是应该的。在添加更多的逻辑以前，我们先来看看如何把路由和服务器整合起来。</p><p>我们的服务器应当知道路由的存在并加以有效利用。我们当然可以通过硬编码的方式将这一依赖项绑定到服务器上，但是其它语言的编程经验告诉我们这会是一件非常痛苦的事，因此我们将使用依赖注入的方式较松散地添加路由模块（你可以读读<a href="http://martinfowler.com/articles/injection.html">Martin Fowlers关于依赖注入的大作</a>来作为背景知识）。</p><p>首先，我们来扩展一下服务器的*start()*函数，以便将路由函数作为参数传递过去：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">route</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Request for &quot;</span>+ pathname +<span class="string">&quot; received.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    route(pathname);</span><br><span class="line"></span><br><span class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">    response.write(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Server has started.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.start = start;</span><br></pre></td></tr></table></figure><p>同时，我们会相应扩展<em>index.js</em>，使得路由函数可以被注入到服务器中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">&quot;./server&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">&quot;./router&quot;</span>);</span><br><span class="line"></span><br><span class="line">server.start(router.route);</span><br></pre></td></tr></table></figure><p>在这里，我们传递的函数依旧什么也没做。</p><p>如果现在启动应用（<em>node index.js，始终记得这个命令行</em>），随后请求一个URL，你将会看到应用输出相应的信息，这表明我们的HTTP服务器已经在使用路由模块了，并会将请求的路径传递给路由：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash$ node index.js</span><br><span class="line">Request <span class="keyword">for</span> /foo received.</span><br><span class="line">About to route a request <span class="keyword">for</span> /foo</span><br></pre></td></tr></table></figure><p>（以上输出已经去掉了比较烦人的/favicon.ico请求相关的部分）。</p><h3 id="行为驱动执行"><a href="#行为驱动执行" class="headerlink" title="行为驱动执行"></a>行为驱动执行</h3><p>请允许我再次脱离主题，在这里谈一谈函数式编程。</p><p>将函数作为参数传递并不仅仅出于技术上的考量。对软件设计来说，这其实是个哲学问题。想想这样的场景：在index文件中，我们可以将<em>router</em>对象传递进去，服务器随后可以调用这个对象的<em>route</em>函数。</p><p>就像这样，我们传递一个东西，然后服务器利用这个东西来完成一些事。嗨那个叫路由的东西，能帮我把这个路由一下吗？</p><p>但是服务器其实不需要这样的东西。它只需要把事情做完就行，其实为了把事情做完，你根本不需要东西，你需要的是动作。也就是说，你不需要<em>名词</em>，你需要<em>动词</em>。</p><p>理解了这个概念里最核心、最基本的思想转换后，我自然而然地理解了函数编程。</p><p>我是在读了Steve Yegge的大作<a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html">名词王国中的死刑</a>之后理解函数编程。你也去读一读这本书吧，真的。这是曾给予我阅读的快乐的关于软件的书籍之一。</p><h3 id="路由给真正的请求处理程序"><a href="#路由给真正的请求处理程序" class="headerlink" title="路由给真正的请求处理程序"></a>路由给真正的请求处理程序</h3><p>回到正题，现在我们的HTTP服务器和请求路由模块已经如我们的期望，可以相互交流了，就像一对亲密无间的兄弟。</p><p>当然这还远远不够，路由，顾名思义，是指我们要针对不同的URL有不同的处理方式。例如处理*/start<em>的“业务逻辑”就应该和处理</em>/upload*的不同。</p><p>在现在的实现下，路由过程会在路由模块中“结束”，并且路由模块并不是真正针对请求“采取行动”的模块，否则当我们的应用程序变得更为复杂时，将无法很好地扩展。</p><p>我们暂时把作为路由目标的函数称为请求处理程序。现在我们不要急着来开发路由模块，因为如果请求处理程序没有就绪的话，再怎么完善路由模块也没有多大意义。</p><p>应用程序需要新的部件，因此加入新的模块 – 已经无需为此感到新奇了。我们来创建一个叫做requestHandlers的模块，并对于每一个请求处理程序，添加一个占位用函数，随后将这些函数作为模块的方法导出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;start&#x27; was called.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;upload&#x27; was called.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.start = start;</span><br><span class="line"><span class="built_in">exports</span>.upload = upload;</span><br></pre></td></tr></table></figure><p>这样我们就可以把请求处理程序和路由模块连接起来，让路由“有路可寻”。</p><p>在这里我们得做个决定：是将requestHandlers模块硬编码到路由里来使用，还是再添加一点依赖注入？虽然和其他模式一 样，依赖注入不应该仅仅为使用而使用，但在现在这个情况下，使用依赖注入可以让路由和请求处理程序之间的耦合更加松散，也因此能让路由的重用性更高。</p><p>这意味着我们得将请求处理程序从服务器传递到路由中，但感觉上这么做更离谱了，我们得一路把这堆请求处理程序从我们的主文件传递到服务器中，再将之从服务器传递到路由。</p><p>那么我们要怎么传递这些请求处理程序呢？别看现在我们只有2个处理程序，在一个真实的应用中，请求处理程序的数量会不断增加，我们当然不想每次有一个新的URL或请求处理程序时，都要为了在路由里完成请求到处理程序的映射而反复折腾。除此之外，在路由里有一大堆<em>if request == x then call handler y</em>也使得系统丑陋不堪。</p><p>仔细想想，有一大堆东西，每个都要映射到一个字符串（就是请求的URL）上？似乎关联数组（associative array）能完美胜任。</p><p>不过结果有点令人失望，JavaScript没提供关联数组 – 也可以说它提供了？事实上，在JavaScript中，真正能提供此类功能的是它的对象。</p><p>在这方面，<a href="http://msdn.microsoft.com/en-us/magazine/cc163419.aspx">http://msdn.microsoft.com/en-us/magazine/cc163419.aspx</a>有一个不错的介绍，我在此摘录一段：</p><blockquote><p>在C++或C#中，当我们谈到对象，指的是类或者结构体的实例。对象根据他们实例化的模板（就是所谓的类），会拥有不同的 属性和方法。但在JavaScript里对象不是这个概念。在JavaScript中，对象就是一个键/值对的集合 – 你可以把JavaScript的对象想象成一个键为字符串类型的字典。</p></blockquote><p>但如果JavaScript的对象仅仅是键/值对的集合，它又怎么会拥有方法呢？好吧，这里的值可以是字符串、数字或者……函数！</p><p>好了，最后再回到代码上来。现在我们已经确定将一系列请求处理程序通过一个对象来传递，并且需要使用松耦合的方式将这个对象注入到*route()*函数中。</p><p>我们先将这个对象引入到主文件<em>index.js</em>中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">&quot;./server&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">&quot;./router&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> requestHandlers = <span class="built_in">require</span>(<span class="string">&quot;./requestHandlers&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handle =&#123;&#125;</span><br><span class="line">handle[<span class="string">&quot;/&quot;</span>]= requestHandlers.start;</span><br><span class="line">handle[<span class="string">&quot;/start&quot;</span>]= requestHandlers.start;</span><br><span class="line">handle[<span class="string">&quot;/upload&quot;</span>]= requestHandlers.upload;</span><br><span class="line"></span><br><span class="line">server.start(router.route, handle);</span><br></pre></td></tr></table></figure><p>虽然<em>handle</em>并不仅仅是一个“东西”（一些请求处理程序的集合），我还是建议以一个动词作为其命名，这样做可以让我们在路由中使用更流畅的表达式，稍后会有说明。</p><p>正如所见，将不同的URL映射到相同的请求处理程序上是很容易的：只要在对象中添加一个键为*”/“<em>的属性，对应</em>requestHandlers.start<em>即可，这样我们就可以干净简洁地配置</em>/start<em>和</em>/<em>的请求都交由</em>start*这一处理程序处理。</p><p>在完成了对象的定义后，我们把它作为额外的参数传递给服务器，为此将<em>server.js</em>修改如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">route, handle</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Request for &quot;</span>+ pathname +<span class="string">&quot; received.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    route(handle, pathname);</span><br><span class="line"></span><br><span class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">    response.write(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Server has started.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.start = start;</span><br></pre></td></tr></table></figure><p>这样我们就在<em>start()<em>函数里添加了</em>handle</em>参数，并且把handle对象作为第一个参数传递给了*route()*回调函数。</p><p>然后我们相应地在<em>route.js</em>文件中修改*route()*函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">handle, pathname</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;About to route a request for &quot;</span>+ pathname);</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> handle[pathname]===<span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">    handle[pathname]();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;No request handler found for &quot;</span>+ pathname);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.route = route;</span><br></pre></td></tr></table></figure><p>通过以上代码，我们首先检查给定的路径对应的请求处理程序是否存在，如果存在的话直接调用相应的函数。我们可以用从关联数组中获取元素一样的方式从传递的对象中获取请求处理函数，因此就有了简洁流畅的形如*handle<a href="">pathname</a>;*的表达式，这个感觉就像在前方中提到的那样：“嗨，请帮我处理了这个路径”。</p><p>有了这些，我们就把服务器、路由和请求处理程序在一起了。现在我们启动应用程序并在浏览器中访问*<a href="http://localhost:8888/start">http://localhost:8888/start</a>*，以下日志可以说明系统调用了正确的请求处理程序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Server has started.</span><br><span class="line">Request <span class="keyword">for</span> /start received.</span><br><span class="line">About to route a request <span class="keyword">for</span> /start</span><br><span class="line">Request handler <span class="string">&#x27;start&#x27;</span> was called.</span><br></pre></td></tr></table></figure><p>并且在浏览器中打开*<a href="http://localhost:8888/">http://localhost:8888/</a><em>可以看到这个请求同样被</em>start*请求处理程序处理了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Request <span class="keyword">for</span> / received.</span><br><span class="line">About to route a request <span class="keyword">for</span> /</span><br><span class="line">Request handler <span class="string">&#x27;start&#x27;</span> was called.</span><br></pre></td></tr></table></figure><h3 id="让请求处理程序作出响应"><a href="#让请求处理程序作出响应" class="headerlink" title="让请求处理程序作出响应"></a>让请求处理程序作出响应</h3><p>很好。不过现在要是请求处理程序能够向浏览器返回一些有意义的信息而并非全是“Hello World”，那就更好了。</p><p>这里要记住的是，浏览器发出请求后获得并显示的“Hello World”信息仍是来自于我们<em>server.js</em>文件中的<em>onRequest</em>函数。</p><p>其实“处理请求”说白了就是“对请求作出响应”，因此，我们需要让请求处理程序能够像<em>onRequest</em>函数那样可以和浏览器进行“对话”。</p><h4 id="不好的实现方式"><a href="#不好的实现方式" class="headerlink" title="不好的实现方式"></a>不好的实现方式</h4><p>对于我们这样拥有PHP或者Ruby技术背景的开发者来说，最直截了当的实现方式事实上并不是非常靠谱： 看似有效，实则未必如此。</p><p>这里我指的“直截了当的实现方式”意思是：让请求处理程序通过<em>onRequest</em>函数直接返回（*return()*）他们要展示给用户的信息。</p><p>我们先就这样去实现，然后再来看为什么这不是一种很好的实现方式。</p><p>让我们从让请求处理程序返回需要在浏览器中显示的信息开始。我们需要将<em>requestHandler.js</em>修改为如下形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;start&#x27; was called.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span><span class="string">&quot;Hello Start&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;upload&#x27; was called.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span><span class="string">&quot;Hello Upload&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.start = start;</span><br><span class="line"><span class="built_in">exports</span>.upload = upload;</span><br></pre></td></tr></table></figure><p>好的。同样的，请求路由需要将请求处理程序返回给它的信息返回给服务器。因此，我们需要将<em>router.js</em>修改为如下形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">handle, pathname</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;About to route a request for &quot;</span>+ pathname);</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> handle[pathname]===<span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> handle[pathname]();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;No request handler found for &quot;</span>+ pathname);</span><br><span class="line">    <span class="keyword">return</span><span class="string">&quot;404 Not found&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.route = route;</span><br></pre></td></tr></table></figure><p>正如上述代码所示，当请求无法路由的时候，我们也返回了一些相关的错误信息。</p><p>最后，我们需要对我们的<em>server.js</em>进行重构以使得它能够将请求处理程序通过请求路由返回的内容响应给浏览器，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">route, handle</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Request for &quot;</span>+ pathname +<span class="string">&quot; received.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">    <span class="keyword">var</span> content = route(handle, pathname)</span><br><span class="line">    response.write(content);</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Server has started.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.start = start;</span><br></pre></td></tr></table></figure><p>如果我们运行重构后的应用，一切都会工作的很好：请求<a href="http://localhost:8888/start">http://localhost:8888/start</a>,浏览器会输出“Hello Start”，请求<a href="http://localhost:8888/upload">http://localhost:8888/upload</a>会输出“Hello Upload”,而请求<a href="http://localhost:8888/foo">http://localhost:8888/foo</a> 会输出“404 Not found”。</p><p>好，那么问题在哪里呢？简单的说就是： 当未来有请求处理程序需要进行非阻塞的操作的时候，我们的应用就“挂”了。</p><p>没理解？没关系，下面就来详细解释下。</p><h4 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h4><p>正如此前所提到的，当在请求处理程序中包括非阻塞操作时就会出问题。但是，在说这之前，我们先来看看什么是阻塞操作。</p><p>我不想去解释“阻塞”和“非阻塞”的具体含义，我们直接来看，当在请求处理程序中加入阻塞操作时会发生什么。</p><p>这里，我们来修改下<em>start</em>请求处理程序，我们让它等待10秒以后再返回“Hello Start”。因为，JavaScript中没有类似*sleep()*这样的操作，所以这里只能够来点小Hack来模拟实现。</p><p>让我们将<em>requestHandlers.js</em>修改成如下形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;start&#x27; was called.&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">milliSeconds</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> startTime =<span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&lt; startTime + milliSeconds);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sleep(<span class="number">10000</span>);</span><br><span class="line">  <span class="keyword">return</span><span class="string">&quot;Hello Start&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;upload&#x27; was called.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span><span class="string">&quot;Hello Upload&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.start = start;</span><br><span class="line"><span class="built_in">exports</span>.upload = upload;</span><br></pre></td></tr></table></figure><p>上述代码中，当函数*start()<em>被调用的时候，Node.js会先等待10秒，之后才会返回“Hello Start”。当调用</em>upload()*的时候，会和此前一样立即返回。</p><p>（当然了，这里只是模拟休眠10秒，实际场景中，这样的阻塞操作有很多，比方说一些长时间的计算操作等。）</p><p>接下来就让我们来看看，我们的改动带来了哪些变化。</p><p>如往常一样，我们先要重启下服务器。为了看到效果，我们要进行一些相对复杂的操作（跟着我一起做）： 首先，打开两个浏览器窗口或者标签页。在第一个浏览器窗口的地址栏中输入<a href="http://localhost:8888/start">http://localhost:8888/start</a>， 但是先不要打开它！</p><p>在第二个浏览器窗口的地址栏中输入<a href="http://localhost:8888/upload">http://localhost:8888/upload</a>， 同样的，先不要打开它！</p><p>接下来，做如下操作：在第一个窗口中（“/start”）按下回车，然后快速切换到第二个窗口中（“/upload”）按下回车。</p><p>注意，发生了什么： /start URL加载花了10秒，这和我们预期的一样。但是，/upload URL居然<em>也</em>花了10秒，而它在对应的请求处理程序中并没有类似于*sleep()*这样的操作！</p><p>这到底是为什么呢？原因就是*start()*包含了阻塞操作。形象的说就是“它阻塞了所有其他的处理工作”。</p><p>这显然是个问题，因为Node一向是这样来标榜自己的：<em>“在node中除了代码，所有一切都是并行执行的”</em>。</p><p>这句话的意思是说，Node.js可以在不新增额外线程的情况下，依然可以对任务进行并行处理 —— Node.js是单线程的。它通过事件轮询（event loop）来实现并行操作，对此，我们应该要充分利用这一点 —— 尽可能的避免阻塞操作，取而代之，多使用非阻塞操作。</p><p>然而，要用非阻塞操作，我们需要使用回调，通过将函数作为参数传递给其他需要花时间做处理的函数（比方说，休眠10秒，或者查询数据库，又或者是进行大量的计算）。</p><p>对于Node.js来说，它是这样处理的：<em>“嘿，probablyExpensiveFunction()（译者注：这 里指的就是需要花时间处理的函数），你继续处理你的事情，我（Node.js线程）先不等你了，我继续去处理你后面的代码，请你提供一个 callbackFunction()，等你处理完之后我会去调用该回调函数的，谢谢！”</em></p><p>（如果想要了解更多关于事件轮询细节，可以阅读Mixu的博文——<a href="http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/">理解node.js的事件轮询</a>。）</p><p>接下来，我们会介绍一种错误的使用非阻塞操作的方式。</p><p>和上次一样，我们通过修改我们的应用来暴露问题。</p><p>这次我们还是拿<em>start</em>请求处理程序来“开刀”。将其修改成如下形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).exec;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;start&#x27; was called.&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> content =<span class="string">&quot;empty&quot;</span>;</span><br><span class="line"></span><br><span class="line">  exec(<span class="string">&quot;ls -lah&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error, stdout, stderr</span>)</span>&#123;</span><br><span class="line">    content = stdout;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;upload&#x27; was called.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span><span class="string">&quot;Hello Upload&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.start = start;</span><br><span class="line"><span class="built_in">exports</span>.upload = upload;</span><br></pre></td></tr></table></figure><p>上述代码中，我们引入了一个新的Node.js模块，<em>child_process</em>。之所以用它，是为了实现一个既简单又实用的非阻塞操作：*exec()*。</p><p><em>exec()<em>做了什么呢？它从Node.js来执行一个shell命令。在上述例子中，我们用它来获取当前目录下所有的文件（“ls -lah”）,然后，当</em>/start</em>URL请求的时候将文件信息输出到浏览器中。</p><p>上述代码是非常直观的： 创建了一个新的变量<em>content</em>（初始值为“empty”），执行“ls -lah”命令，将结果赋值给content，最后将content返回。</p><p>和往常一样，我们启动服务器，然后访问“<a href="http://localhost:8888/start">http://localhost:8888/start</a>” 。</p><p>之后会载入一个漂亮的web页面，其内容为“empty”。怎么回事？</p><p>这个时候，你可能大致已经猜到了，*exec()*在非阻塞这块发挥了神奇的功效。它其实是个很好的东西，有了它，我们可以执行非常耗时的shell操作而无需迫使我们的应用停下来等待该操作。</p><p>（如果想要证明这一点，可以将“ls -lah”换成比如“find /”这样更耗时的操作来效果）。</p><p>然而，针对浏览器显示的结果来看，我们并不满意我们的非阻塞操作，对吧？</p><p>好，接下来，我们来修正这个问题。在这过程中，让我们先来看看为什么当前的这种方式不起作用。</p><p>问题就在于，为了进行非阻塞工作，*exec()*使用了回调函数。</p><p>在我们的例子中，该回调函数就是作为第二个参数传递给*exec()*的匿名函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">error, stdout, stderr</span>)</span>&#123;</span><br><span class="line">  content = stdout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在就到了问题根源所在了：我们的代码是同步执行的，这就意味着在调用<em>exec()<em>之后，Node.js会立即执行 <em>return content</em> ；在这个时候，</em>content</em>仍然是“empty”，因为传递给*exec()<em>的回调函数还未执行到——因为</em>exec()*的操作是异步的。</p><p>我们这里“ls -lah”的操作其实是非常快的（除非当前目录下有上百万个文件）。这也是为什么回调函数也会很快的执行到 —— 不过，不管怎么说它还是异步的。</p><p>为了让效果更加明显，我们想象一个更耗时的命令： “find /”，它在我机器上需要执行1分钟左右的时间，然而，尽管在请求处理程序中，我把“ls -lah”换成“find /”，当打开/start URL的时候，依然能够立即获得HTTP响应 —— 很明显，当*exec()<em>在后台执行的时候，Node.js自身会继续执行后面的代码。并且我们这里假设传递给</em>exec()*的回调函数，只会在“find /”命令执行完成之后才会被调用。</p><p>那究竟我们要如何才能实现将当前目录下的文件列表显示给用户呢？</p><p>好，了解了这种不好的实现方式之后，我们接下来来介绍如何以正确的方式让请求处理程序对浏览器请求作出响应。</p><h4 id="以非阻塞操作进行请求响应"><a href="#以非阻塞操作进行请求响应" class="headerlink" title="以非阻塞操作进行请求响应"></a>以非阻塞操作进行请求响应</h4><p>我刚刚提到了这样一个短语 —— “正确的方式”。而事实上通常“正确的方式”一般都不简单。</p><p>不过，用Node.js就有这样一种实现方案： 函数传递。下面就让我们来具体看看如何实现。</p><p>到目前为止，我们的应用已经可以通过应用各层之间传递值的方式（请求处理程序 -&gt; 请求路由 -&gt; 服务器）将请求处理程序返回的内容（请求处理程序最终要显示给用户的内容）传递给HTTP服务器。</p><p>现在我们采用如下这种新的实现方式：相对采用将内容传递给服务器的方式，我们这次采用将服务器“传递”给内容的方式。 从实践角度来说，就是将<em>response</em>对象（从服务器的回调函数*onRequest()*获取）通过请求路由传递给请求处理程序。 随后，处理程序就可以采用该对象上的函数来对请求作出响应。</p><p>原理就是如此，接下来让我们来一步步实现这种方案。</p><p>先从<em>server.js</em>开始：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">route, handle</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Request for &quot;</span>+ pathname +<span class="string">&quot; received.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    route(handle, pathname, response);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Server has started.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.start = start;</span><br></pre></td></tr></table></figure><p>相对此前从<em>route()<em>函数获取返回值的做法，这次我们将response对象作为第三个参数传递给</em>route()<em>函数，并且，我们将</em>onRequest()<em>处理程序中所有有关</em>response</em>的函数调都移除，因为我们希望这部分工作让*route()*函数来完成。</p><p>下面就来看看我们的<em>router.js</em>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">handle, pathname, response</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;About to route a request for &quot;</span>+ pathname);</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> handle[pathname]===<span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">    handle[pathname](response);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;No request handler found for &quot;</span>+ pathname);</span><br><span class="line">    response.writeHead(<span class="number">404</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">    response.write(<span class="string">&quot;404 Not found&quot;</span>);</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.route = route;</span><br></pre></td></tr></table></figure><p>同样的模式：相对此前从请求处理程序中获取返回值，这次取而代之的是直接传递<em>response</em>对象。</p><p>如果没有对应的请求处理器处理，我们就直接返回“404”错误。</p><p>最后，我们将<em>requestHandler.js</em>修改为如下形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).exec;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;start&#x27; was called.&quot;</span>);</span><br><span class="line"></span><br><span class="line">  exec(<span class="string">&quot;ls -lah&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error, stdout, stderr</span>)</span>&#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">    response.write(stdout);</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;upload&#x27; was called.&quot;</span>);</span><br><span class="line">  response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">  response.write(<span class="string">&quot;Hello Upload&quot;</span>);</span><br><span class="line">  response.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.start = start;</span><br><span class="line"><span class="built_in">exports</span>.upload = upload;</span><br></pre></td></tr></table></figure><p>我们的处理程序函数需要接收response参数，为了对请求作出直接的响应。</p><p><em>start</em>处理程序在<em>exec()<em>的匿名回调函数中做请求响应的操作，而</em>upload</em>处理程序仍然是简单的回复“Hello World”，只是这次是使用<em>response</em>对象而已。</p><p>这时再次我们启动应用（<em>node index.js</em>），一切都会工作的很好。</p><p>如果想要证明*/start<em>处理程序中耗时的操作不会阻塞对</em>/upload<em>请求作出立即响应的话，可以将</em>requestHandlers.js*修改为如下形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).exec;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;start&#x27; was called.&quot;</span>);</span><br><span class="line"></span><br><span class="line">  exec(<span class="string">&quot;find /&quot;</span>,</span><br><span class="line">    &#123; <span class="attr">timeout</span>:<span class="number">10000</span>, <span class="attr">maxBuffer</span>:<span class="number">20000</span>*<span class="number">1024</span>&#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">error, stdout, stderr</span>)</span>&#123;</span><br><span class="line">      response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">      response.write(stdout);</span><br><span class="line">      response.end();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;upload&#x27; was called.&quot;</span>);</span><br><span class="line">  response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">  response.write(<span class="string">&quot;Hello Upload&quot;</span>);</span><br><span class="line">  response.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.start = start;</span><br><span class="line"><span class="built_in">exports</span>.upload = upload;</span><br></pre></td></tr></table></figure><p>这样一来，当请求<a href="http://localhost:8888/start">http://localhost:8888/start</a>的时候，会花10秒钟的时间才载入，而当请求<a href="http://localhost:8888/upload">http://localhost:8888/upload</a>的时候，会立即响应，纵然这个时候/start响应还在处理中。</p><h3 id="更有用的场景"><a href="#更有用的场景" class="headerlink" title="更有用的场景"></a>更有用的场景</h3><p>到目前为止，我们做的已经很好了，但是，我们的应用没有实际用途。</p><p>服务器，请求路由以及请求处理程序都已经完成了，下面让我们按照此前的用例给网站添加交互：用户选择一个文件，上传该文件，然后在浏览器中看到上传的文件。 为了保持简单，我们假设用户只会上传图片，然后我们应用将该图片显示到浏览器中。</p><p>好，下面就一步步来实现，鉴于此前已经对JavaScript原理性技术性的内容做过大量介绍了，这次我们加快点速度。</p><p>要实现该功能，分为如下两步： 首先，让我们来看看如何处理POST请求（非文件上传），之后，我们使用Node.js的一个用于文件上传的外部模块。之所以采用这种实现方式有两个理由。</p><p>第一，尽管在Node.js中处理基础的POST请求相对比较简单，但在这过程中还是能学到很多。 <br>第二，用Node.js来处理文件上传（multipart POST请求）是比较复杂的，它<em>不</em>在本书的范畴，但，如何使用外部模块却是在本书涉猎内容之内。</p><h4 id="处理POST请求"><a href="#处理POST请求" class="headerlink" title="处理POST请求"></a>处理POST请求</h4><p>考虑这样一个简单的例子：我们显示一个文本区（textarea）供用户输入内容，然后通过POST请求提交给服务器。最后，服务器接受到请求，通过处理程序将输入的内容展示到浏览器中。</p><p><em>/start</em>请求处理程序用于生成带文本区的表单，因此，我们将<em>requestHandlers.js</em>修改为如下形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;start&#x27; was called.&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> body =<span class="string">&#x27;&lt;html&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;head&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; &#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;charset=UTF-8&quot; /&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/head&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;body&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;form action=&quot;/upload&quot; method=&quot;post&quot;&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;textarea name=&quot;text&quot; rows=&quot;20&quot; cols=&quot;60&quot;&gt;&lt;/textarea&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;input type=&quot;submit&quot; value=&quot;Submit text&quot; /&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/form&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/body&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/html&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html&quot;</span>&#125;);</span><br><span class="line">    response.write(body);</span><br><span class="line">    response.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;upload&#x27; was called.&quot;</span>);</span><br><span class="line">  response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">  response.write(<span class="string">&quot;Hello Upload&quot;</span>);</span><br><span class="line">  response.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.start = start;</span><br><span class="line"><span class="built_in">exports</span>.upload = upload;</span><br></pre></td></tr></table></figure><p>好了，现在我们的应用已经很完善了，都可以获得威比奖（Webby Awards）了，哈哈。（译者注：威比奖是由国际数字艺术与科学学院主办的评选全球最佳网站的奖项，具体参见详细说明）通过在浏览器中访问<a href="http://localhost:8888/start">http://localhost:8888/start</a>就可以看到简单的表单了，要记得重启服务器哦！</p><p>你可能会说：这种直接将视觉元素放在请求处理程序中的方式太丑陋了。说的没错，但是，我并不想在本书中介绍诸如MVC之类的模式，因为这对于你了解JavaScript或者Node.js环境来说没多大关系。</p><p>余下的篇幅，我们来探讨一个更有趣的问题： 当用户提交表单时，触发*/upload*请求处理程序处理POST请求的问题。</p><p>现在，我们已经是新手中的专家了，很自然会想到采用异步回调来实现非阻塞地处理POST请求的数据。</p><p>这里采用非阻塞方式处理是明智的，因为POST请求一般都比较“重” —— 用户可能会输入大量的内容。用阻塞的方式处理大数据量的请求必然会导致用户操作的阻塞。</p><p>为了使整个过程非阻塞，Node.js会将POST数据拆分成很多小的数据块，然后通过触发特定的事件，将这些小数据块传递给回调函数。这里的特定的事件有<em>data</em>事件（表示新的小数据块到达了）以及<em>end</em>事件（表示所有的数据都已经接收完毕）。</p><p>我们需要告诉Node.js当这些事件触发的时候，回调哪些函数。怎么告诉呢？ 我们通过在<em>request</em>对象上注册<em>监听器</em>（listener） 来实现。这里的request对象是每次接收到HTTP请求时候，都会把该对象传递给<em>onRequest</em>回调函数。</p><p>如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request.addListener(<span class="string">&quot;data&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// called when a new chunk of data was received</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">request.addListener(<span class="string">&quot;end&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// called when all chunks of data have been received</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>问题来了，这部分逻辑写在哪里呢？ 我们现在只是在服务器中获取到了<em>request</em>对象 —— 我们并没有像之前<em>response</em>对象那样，把 request 对象传递给请求路由和请求处理程序。</p><p>在我看来，获取所有来自请求的数据，然后将这些数据给应用层处理，应该是HTTP服务器要做的事情。因此，我建议，我们直接在服务器中处理POST数据，然后将最终的数据传递给请求路由和请求处理器，让他们来进行进一步的处理。</p><p>因此，实现思路就是： 将<em>data</em>和<em>end</em>事件的回调函数直接放在服务器中，在<em>data</em>事件回调中收集所有的POST数据，当接收到所有数据，触发<em>end</em>事件后，其回调函数调用请求路由，并将数据传递给它，然后，请求路由再将该数据传递给请求处理程序。</p><p>还等什么，马上来实现。先从<em>server.js</em>开始：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">route, handle</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> postData =<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Request for &quot;</span>+ pathname +<span class="string">&quot; received.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    request.setEncoding(<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    request.addListener(<span class="string">&quot;data&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">postDataChunk</span>)</span>&#123;</span><br><span class="line">      postData += postDataChunk;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Received POST data chunk &#x27;&quot;</span>+</span><br><span class="line">      postDataChunk +<span class="string">&quot;&#x27;.&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    request.addListener(<span class="string">&quot;end&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      route(handle, pathname, response, postData);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Server has started.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.start = start;</span><br></pre></td></tr></table></figure><p>上述代码做了三件事情： 首先，我们设置了接收数据的编码格式为UTF-8，然后注册了“data”事件的监听器，用于收集每次接收到的新数据块，并将其赋值给<em>postData</em> 变量，最后，我们将请求路由的调用移到<em>end</em>事件处理程序中，以确保它只会当所有数据接收完毕后才触发，并且只触发一次。我们同时还把POST数据传递给请求路由，因为这些数据，请求处理程序会用到。</p><p>上述代码在每个数据块到达的时候输出了日志，这对于最终生产环境来说，是很不好的（数据量可能会很大，还记得吧？），但是，在开发阶段是很有用的，有助于让我们看到发生了什么。</p><p>我建议可以尝试下，尝试着去输入一小段文本，以及大段内容，当大段内容的时候，就会发现<em>data</em>事件会触发多次。</p><p>再来点酷的。我们接下来在/upload页面，展示用户输入的内容。要实现该功能，我们需要将<em>postData</em>传递给请求处理程序，修改<em>router.js</em>为如下形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">handle, pathname, response, postData</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;About to route a request for &quot;</span>+ pathname);</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> handle[pathname]===<span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">    handle[pathname](response, postData);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;No request handler found for &quot;</span>+ pathname);</span><br><span class="line">    response.writeHead(<span class="number">404</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">    response.write(<span class="string">&quot;404 Not found&quot;</span>);</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.route = route;</span><br></pre></td></tr></table></figure><p>然后，在<em>requestHandlers.js</em>中，我们将数据包含在对<em>upload</em>请求的响应中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">response, postData</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;start&#x27; was called.&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> body =<span class="string">&#x27;&lt;html&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;head&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; &#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;charset=UTF-8&quot; /&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/head&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;body&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;form action=&quot;/upload&quot; method=&quot;post&quot;&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;textarea name=&quot;text&quot; rows=&quot;20&quot; cols=&quot;60&quot;&gt;&lt;/textarea&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;input type=&quot;submit&quot; value=&quot;Submit text&quot; /&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/form&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/body&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/html&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html&quot;</span>&#125;);</span><br><span class="line">    response.write(body);</span><br><span class="line">    response.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">response, postData</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;upload&#x27; was called.&quot;</span>);</span><br><span class="line">  response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">  response.write(<span class="string">&quot;You&#x27;ve sent: &quot;</span>+ postData);</span><br><span class="line">  response.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.start = start;</span><br><span class="line"><span class="built_in">exports</span>.upload = upload;</span><br></pre></td></tr></table></figure><p>好了，我们现在可以接收POST数据并在请求处理程序中处理该数据了。</p><p>我们最后要做的是： 当前我们是把请求的整个消息体传递给了请求路由和请求处理程序。我们应该只把POST数据中，我们感兴趣的部分传递给请求路由和请求处理程序。在我们这个例子中，我们感兴趣的其实只是<em>text</em>字段。</p><p>我们可以使用此前介绍过的<em>querystring</em>模块来实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">response, postData</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;start&#x27; was called.&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> body =<span class="string">&#x27;&lt;html&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;head&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; &#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;charset=UTF-8&quot; /&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/head&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;body&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;form action=&quot;/upload&quot; method=&quot;post&quot;&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;textarea name=&quot;text&quot; rows=&quot;20&quot; cols=&quot;60&quot;&gt;&lt;/textarea&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;input type=&quot;submit&quot; value=&quot;Submit text&quot; /&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/form&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/body&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/html&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html&quot;</span>&#125;);</span><br><span class="line">    response.write(body);</span><br><span class="line">    response.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">response, postData</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;upload&#x27; was called.&quot;</span>);</span><br><span class="line">  response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">  response.write(<span class="string">&quot;You&#x27;ve sent the text: &quot;</span>+</span><br><span class="line">  querystring.parse(postData).text);</span><br><span class="line">  response.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.start = start;</span><br><span class="line"><span class="built_in">exports</span>.upload = upload;</span><br></pre></td></tr></table></figure><p>好了，以上就是关于处理POST数据的全部内容。</p><h4 id="处理文件上传"><a href="#处理文件上传" class="headerlink" title="处理文件上传"></a>处理文件上传</h4><p>最后，我们来实现我们最终的用例：允许用户上传图片，并将该图片在浏览器中显示出来。</p><p>回到90年代，这个用例完全可以满足用于IPO的商业模型了，如今，我们通过它能学到这样两件事情： 如何安装外部Node.js模块，以及如何将它们应用到我们的应用中。</p><p>这里我们要用到的外部模块是Felix Geisendörfer开发的<em>node-formidable</em>模块。它对解析上传的文件数据做了很好的抽象。 其实说白了，处理文件上传<em>“就是”</em>处理POST数据 —— 但是，麻烦的是在具体的处理细节，所以，这里采用现成的方案更合适点。</p><p>使用该模块，首先需要安装该模块。Node.js有它自己的包管理器，叫<em>NPM</em>。它可以让安装Node.js的外部模块变得非常方便。通过如下一条命令就可以完成该模块的安装：</p><p><code>npm install formidable</code></p><p>如果终端输出如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm info build Success: formidable@1.0.9</span><br><span class="line">npm ok</span><br></pre></td></tr></table></figure><p>就说明模块已经安装成功了。</p><p>现在我们就可以用<em>formidable</em>模块了——使用外部模块与内部模块类似，用require语句将其引入即可：</p><p><code>var formidable = require(&quot;formidable&quot;)</code></p><p>这里该模块做的就是将通过HTTP POST请求提交的表单，在Node.js中可以被解析。我们要做的就是创建一个新的<em>IncomingForm</em>，它是对提交表单的抽象表示，之后，就可以用它解析request对象，获取表单中需要的数据字段。</p><p>node-formidable官方的例子展示了这两部分是如何融合在一起工作的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formidable = <span class="built_in">require</span>(<span class="string">&#x27;formidable&#x27;</span>),</span><br><span class="line">    http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>),</span><br><span class="line">    sys = <span class="built_in">require</span>(<span class="string">&#x27;sys&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(req.url ==<span class="string">&#x27;/upload&#x27;</span>&amp;&amp; req.method.toLowerCase()==<span class="string">&#x27;post&#x27;</span>)&#123;</span><br><span class="line">    <span class="comment">// parse a file upload</span></span><br><span class="line">    <span class="keyword">var</span> form =<span class="keyword">new</span> formidable.IncomingForm();</span><br><span class="line">    form.parse(req,<span class="function"><span class="keyword">function</span>(<span class="params">err, fields, files</span>)</span>&#123;</span><br><span class="line">      res.writeHead(<span class="number">200</span>,&#123;<span class="string">&#x27;content-type&#x27;</span>:<span class="string">&#x27;text/plain&#x27;</span>&#125;);</span><br><span class="line">      res.write(<span class="string">&#x27;received upload:\n\n&#x27;</span>);</span><br><span class="line">      res.end(sys.inspect(&#123;<span class="attr">fields</span>: fields, <span class="attr">files</span>: files&#125;));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// show a file upload form</span></span><br><span class="line">  res.writeHead(<span class="number">200</span>,&#123;<span class="string">&#x27;content-type&#x27;</span>:<span class="string">&#x27;text/html&#x27;</span>&#125;);</span><br><span class="line">  res.end(</span><br><span class="line">    <span class="string">&#x27;&lt;form action=&quot;/upload&quot; enctype=&quot;multipart/form-data&quot; &#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;method=&quot;post&quot;&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;input type=&quot;text&quot; name=&quot;title&quot;&gt;&lt;br&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;input type=&quot;file&quot; name=&quot;upload&quot; multiple=&quot;multiple&quot;&gt;&lt;br&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;input type=&quot;submit&quot; value=&quot;Upload&quot;&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/form&gt;&#x27;</span></span><br><span class="line">  );</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure><p>如果我们将上述代码，保存到一个文件中，并通过<em>node</em>来执行，就可以进行简单的表单提交了，包括文件上传。然后，可以看到通过调用<em>form.parse</em>传递给回调函数的<em>files</em>对象的内容，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">received upload:</span><br><span class="line"></span><br><span class="line">&#123; </span><br><span class="line">  fields: &#123; <span class="attr">title</span>: <span class="string">&#x27;Hello World&#x27;</span> &#125;,</span><br><span class="line">    files: &#123; </span><br><span class="line">      upload: &#123; </span><br><span class="line">        size: <span class="number">1558</span>,</span><br><span class="line">        path: <span class="string">&#x27;/tmp/1c747974a27a6292743669e91f29350b&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;us-flag.png&#x27;</span>,</span><br><span class="line">        type: <span class="string">&#x27;image/png&#x27;</span>,</span><br><span class="line">        lastModifiedDate: Tue, <span class="number">21</span> Jun <span class="number">2011</span> <span class="number">07</span>:<span class="number">02</span>:<span class="number">41</span> GMT,</span><br><span class="line">        _writeStream: [<span class="built_in">Object</span>],</span><br><span class="line">        length: [Getter],</span><br><span class="line">        filename: [Getter],</span><br><span class="line">        mime: [Getter]</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>为了实现我们的功能，我们需要将上述代码应用到我们的应用中，另外，我们还要考虑如何将上传文件的内容（保存在*/tmp*目录中）显示到浏览器中。</p><p>我们先来解决后面那个问题： 对于保存在本地硬盘中的文件，如何才能在浏览器中看到呢？</p><p>显然，我们需要将该文件读取到我们的服务器中，使用一个叫<em>fs</em>的模块。</p><p>我们来添加*/show<em>URL的请求处理程序，该处理程序直接硬编码将文件</em>/tmp/test.png*内容展示到浏览器中。当然了，首先需要将该图片保存到这个位置才行。</p><p>将<em>requestHandlers.js</em>修改为如下形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>),</span><br><span class="line">    fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">response, postData</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;start&#x27; was called.&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> body =<span class="string">&#x27;&lt;html&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;head&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;meta http-equiv=&quot;Content-Type&quot; &#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;content=&quot;text/html; charset=UTF-8&quot; /&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/head&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;body&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;form action=&quot;/upload&quot; method=&quot;post&quot;&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;textarea name=&quot;text&quot; rows=&quot;20&quot; cols=&quot;60&quot;&gt;&lt;/textarea&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;input type=&quot;submit&quot; value=&quot;Submit text&quot; /&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/form&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/body&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/html&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html&quot;</span>&#125;);</span><br><span class="line">    response.write(body);</span><br><span class="line">    response.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">response, postData</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;upload&#x27; was called.&quot;</span>);</span><br><span class="line">  response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">  response.write(<span class="string">&quot;You&#x27;ve sent the text: &quot;</span>+</span><br><span class="line">  querystring.parse(postData).text);</span><br><span class="line">  response.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">response, postData</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;show&#x27; was called.&quot;</span>);</span><br><span class="line">  fs.readFile(<span class="string">&quot;/tmp/test.png&quot;</span>,<span class="string">&quot;binary&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error, file</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error)&#123;</span><br><span class="line">      response.writeHead(<span class="number">500</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">      response.write(error +<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      response.end();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;image/png&quot;</span>&#125;);</span><br><span class="line">      response.write(file,<span class="string">&quot;binary&quot;</span>);</span><br><span class="line">      response.end();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.start = start;</span><br><span class="line"><span class="built_in">exports</span>.upload = upload;</span><br><span class="line"><span class="built_in">exports</span>.show = show;</span><br></pre></td></tr></table></figure><p>我们还需要将这新的请求处理程序，添加到<em>index.js</em>中的路由映射表中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">&quot;./server&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">&quot;./router&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> requestHandlers = <span class="built_in">require</span>(<span class="string">&quot;./requestHandlers&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handle =&#123;&#125;</span><br><span class="line">handle[<span class="string">&quot;/&quot;</span>]= requestHandlers.start;</span><br><span class="line">handle[<span class="string">&quot;/start&quot;</span>]= requestHandlers.start;</span><br><span class="line">handle[<span class="string">&quot;/upload&quot;</span>]= requestHandlers.upload;</span><br><span class="line">handle[<span class="string">&quot;/show&quot;</span>]= requestHandlers.show;</span><br><span class="line"></span><br><span class="line">server.start(router.route, handle);</span><br></pre></td></tr></table></figure><p>重启服务器之后，通过访问<a href="http://localhost:8888/show">http://localhost:8888/show</a>，就可以看到保存在*/tmp/test.png*的图片了。</p><p>好，最后我们要的就是：</p><ul><li>  在*/start*表单中添加一个文件上传元素</li><li>  将node-formidable整合到我们的<em>upload</em>请求处理程序中，用于将上传的图片保存到*/tmp/test.png*</li><li>  将上传的图片内嵌到*/upload*URL输出的HTML中</li></ul><p>第一项很简单。只需要在HTML表单中，添加一个<em>multipart/form-data</em>的编码类型，移除此前的文本区，添加一个文件上传组件，并将提交按钮的文案改为“Upload file”即可。 如下<em>requestHandler.js</em>所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>),</span><br><span class="line">    fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">response, postData</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;start&#x27; was called.&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> body =<span class="string">&#x27;&lt;html&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;head&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;meta http-equiv=&quot;Content-Type&quot; &#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;content=&quot;text/html; charset=UTF-8&quot; /&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/head&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;body&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;form action=&quot;/upload&quot; enctype=&quot;multipart/form-data&quot; &#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;method=&quot;post&quot;&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;input type=&quot;file&quot; name=&quot;upload&quot;&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;input type=&quot;submit&quot; value=&quot;Upload file&quot; /&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/form&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/body&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/html&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html&quot;</span>&#125;);</span><br><span class="line">    response.write(body);</span><br><span class="line">    response.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">response, postData</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;upload&#x27; was called.&quot;</span>);</span><br><span class="line">  response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">  response.write(<span class="string">&quot;You&#x27;ve sent the text: &quot;</span>+</span><br><span class="line">  querystring.parse(postData).text);</span><br><span class="line">  response.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">response, postData</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;show&#x27; was called.&quot;</span>);</span><br><span class="line">  fs.readFile(<span class="string">&quot;/tmp/test.png&quot;</span>,<span class="string">&quot;binary&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error, file</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error)&#123;</span><br><span class="line">      response.writeHead(<span class="number">500</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">      response.write(error +<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      response.end();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;image/png&quot;</span>&#125;);</span><br><span class="line">      response.write(file,<span class="string">&quot;binary&quot;</span>);</span><br><span class="line">      response.end();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.start = start;</span><br><span class="line"><span class="built_in">exports</span>.upload = upload;</span><br><span class="line"><span class="built_in">exports</span>.show = show;</span><br></pre></td></tr></table></figure><p>很好。下一步相对比较复杂。这里有这样一个问题： 我们需要在<em>upload</em>处理程序中对上传的文件进行处理，这样的话，我们就需要将<em>request</em>对象传递给node-formidable的<em>form.parse</em>函数。</p><p>但是，我们有的只是<em>response</em>对象和<em>postData</em>数组。看样子，我们只能不得不将<em>request</em>对象从服务器开始一路通过请求路由，再传递给请求处理程序。 或许还有更好的方案，但是，不管怎么说，目前这样做可以满足我们的需求。</p><p>到这里，我们可以将<em>postData</em>从服务器以及请求处理程序中移除了 —— 一方面，对于我们处理文件上传来说已经不需要了，另外一方面，它甚至可能会引发这样一个问题： 我们已经“消耗”了<em>request</em>对象中的数据，这意味着，对于<em>form.parse</em>来说，当它想要获取数据的时候就什么也获取不到了。（因为Node.js不会对数据做缓存）</p><p>我们从<em>server.js</em>开始 —— 移除对postData的处理以及<em>request.setEncoding</em> （这部分node-formidable自身会处理），转而采用将<em>request</em>对象传递给请求路由的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">route, handle</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Request for &quot;</span>+ pathname +<span class="string">&quot; received.&quot;</span>);</span><br><span class="line">    route(handle, pathname, response, request);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Server has started.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.start = start;</span><br></pre></td></tr></table></figure><p>接下来是 router.js —— 我们不再需要传递<em>postData</em>了，这次要传递<em>request</em>对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">handle, pathname, response, request</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;About to route a request for &quot;</span>+ pathname);</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> handle[pathname]===<span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">    handle[pathname](response, request);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;No request handler found for &quot;</span>+ pathname);</span><br><span class="line">    response.writeHead(<span class="number">404</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html&quot;</span>&#125;);</span><br><span class="line">    response.write(<span class="string">&quot;404 Not found&quot;</span>);</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.route = route;</span><br></pre></td></tr></table></figure><p>现在，<em>request</em>对象就可以在我们的<em>upload</em>请求处理程序中使用了。node-formidable会处理将上传的文件保存到本地*/tmp<em>目录中，而我们需要做的是确保该文件保存成</em>/tmp/test.png*。 没错，我们保持简单，并假设只允许上传PNG图片。</p><p>这里采用*fs.renameSync(path1,path2)*来实现。要注意的是，正如其名，该方法是同步执行的， 也就是说，如果该重命名的操作很耗时的话会阻塞。 这块我们先不考虑。</p><p>接下来，我们把处理文件上传以及重命名的操作放到一起，如下<em>requestHandlers.js</em>所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>),</span><br><span class="line">    fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>),</span><br><span class="line">    formidable = <span class="built_in">require</span>(<span class="string">&quot;formidable&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;start&#x27; was called.&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> body =<span class="string">&#x27;&lt;html&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;head&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; &#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;charset=UTF-8&quot; /&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/head&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;body&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;form action=&quot;/upload&quot; enctype=&quot;multipart/form-data&quot; &#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;method=&quot;post&quot;&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;input type=&quot;file&quot; name=&quot;upload&quot; multiple=&quot;multiple&quot;&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;input type=&quot;submit&quot; value=&quot;Upload file&quot; /&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/form&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/body&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;/html&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html&quot;</span>&#125;);</span><br><span class="line">    response.write(body);</span><br><span class="line">    response.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">response, request</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;upload&#x27; was called.&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> form =<span class="keyword">new</span> formidable.IncomingForm();  </span><br><span class="line">  form.uploadDir=<span class="string">&#x27;tmp&#x27;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;about to parse&quot;</span>);</span><br><span class="line">  form.parse(request,<span class="function"><span class="keyword">function</span>(<span class="params">error, fields, files</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;parsing done&quot;</span>);</span><br><span class="line">    fs.renameSync(files.upload.path,<span class="string">&quot;./tmp/test.png&quot;</span>);</span><br><span class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html&quot;</span>&#125;);</span><br><span class="line">    response.write(<span class="string">&quot;received image:&lt;br/&gt;&quot;</span>);</span><br><span class="line">    response.write(<span class="string">&quot;&lt;img src=&#x27;/show&#x27; /&gt;&quot;</span>);</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Request handler &#x27;show&#x27; was called.&quot;</span>);</span><br><span class="line">  fs.readFile(<span class="string">&quot;./tmp/test.png&quot;</span>,<span class="string">&quot;binary&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error, file</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error)&#123;</span><br><span class="line">      response.writeHead(<span class="number">500</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">      response.write(error +<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      response.end();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;image/png&quot;</span>&#125;);</span><br><span class="line">      response.write(file,<span class="string">&quot;binary&quot;</span>);</span><br><span class="line">      response.end();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.start = start;</span><br><span class="line"><span class="built_in">exports</span>.upload = upload;</span><br><span class="line"><span class="built_in">exports</span>.show = show;</span><br></pre></td></tr></table></figure><p>好了，重启服务器，我们应用所有的功能就可以用了。选择一张本地图片，将其上传到服务器，然后浏览器就会显示该图片。</p><h2 id="总结与展望"><a href="#总结与展望" class="headerlink" title="总结与展望"></a>总结与展望</h2><p>恭喜，我们的任务已经完成了！我们开发完了一个Node.js的web应用，应用虽小，但却“五脏俱全”。 期间，我们介绍了很多技术点：服务端JavaScript、函数式编程、阻塞与非阻塞、回调、事件、内部和外部模块等等。</p><p>当然了，还有许多本书没有介绍到的： 如何操作数据库、如何进行单元测试、如何开发Node.js的外部模块以及一些简单的诸如如何获取GET请求之类的方法。</p><p>但本书毕竟只是一本给初学者的教程 —— 不可能覆盖到所有的内容。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;作者： &lt;a href=&quot;http://twitter.com/manuelkiessling&quot;&gt;Manuel Kiessling&lt;/a&gt;  翻译： &lt;a href=&quot;http://weibo.com/goddyzhao&quot;&gt;goddyzhao&lt;/a&gt; &amp;amp; &lt;a hr</summary>
      
    
    
    
    <category term="前端漫谈" scheme="https://fenpho.github.io/categories/%E5%89%8D%E7%AB%AF%E6%BC%AB%E8%B0%88/"/>
    
    
    <category term="Node, Javascript" scheme="https://fenpho.github.io/tags/Node-Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vue状态管理之Vuex</title>
    <link href="https://fenpho.github.io/2018/12/27/Vue%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E4%B9%8BVuex/"/>
    <id>https://fenpho.github.io/2018/12/27/Vue%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E4%B9%8BVuex/</id>
    <published>2018-12-27T13:22:09.000Z</published>
    <updated>2023-01-11T15:32:44.315Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、什么是Vuex"><a href="#一、什么是Vuex" class="headerlink" title="一、什么是Vuex"></a>一、什么是Vuex</h3><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具<a href="https://github.com/vuejs/vue-devtools">devtools extension</a>，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。   </p><p>这个状态自管理应用包含以下几个部分：     </p><ul><li>  <strong>state</strong>，驱动应用的数据源；</li><li>  <strong>view</strong>，以声明方式将<strong>state</strong>映射到视图；</li><li>  <strong>actions</strong>，响应在<strong>view</strong>上的用户输入导致的状态变化。</li></ul><p>以下是一个表示“单向数据流”理念的极简示意：</p><p><img src="1.png" alt="单项数据流"></p><p>更复杂的情况</p><ul><li> 多个视图依赖于同一状态。</li><li> 来自不同视图的行为需要变更同一状态。<br><img src="2.png" alt="实际数据流"></li></ul><h3 id="二、什么情况下我应该使用-Vuex？"><a href="#二、什么情况下我应该使用-Vuex？" class="headerlink" title="二、什么情况下我应该使用 Vuex？"></a>二、什么情况下我应该使用 Vuex？</h3><p>虽然 Vuex 可以帮助我们管理共享状态，但也附带了更多的概念和框架。这需要对短期和长期效益进行权衡。</p><p>如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。一个简单的</p><p><a href="https://cn.vuejs.org/v2/guide/components.html#%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1">global event bus</a></p><p>就足够您所需了。但是，如果您需要构建是一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。引用 Redux 的作者 Dan Abramov 的话说就是：</p><blockquote><p>Flux 架构就像眼镜：您自会知道什么时候需要它。</p></blockquote><h3 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h3><p>首先需要创建一个基于Vue的工程，通常你可以这样做：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装 vue-cli</span><br><span class="line">$ npm install --<span class="built_in">global</span> vue-cli</span><br><span class="line"># 创建一个基于 webpack 模板的新项目</span><br><span class="line">$ vue init webpack my-project</span><br><span class="line"># 安装依赖，走你</span><br><span class="line">$ cd my-project</span><br><span class="line">$ npm install</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><ol><li> 利用npm包管理工具，进行安装 vuex。在控制命令行中输入下边的命令就可以了。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><p>要注意的是这里一定要加上 –save，因为你这个包我们在生产环境中是要使用的。</p><p>通过简单的依赖安装操作，vuex就算引用成功了，接下来我们就可以尽情的玩耍了。<br>一个简单的示例，在main.js文件中输入如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">store.commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  template: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      <span class="keyword">return</span> store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行后可以看到页面上显示一个1，即函数increment已经正确的执行，count由初始的0自加后变为1输出，<br>需要指出的是，我们通过提交 mutation 的方式，而非直接改变 store.state.count，是因为我们想要更明确地追踪到状态的变化。</p><p>通常我们不会这样去使用它，更好的使用方法是：</p><ol><li>新建一个store文件夹（这个不是必须的），并在文件夹下新建store.js文件，文件中引入我们的vue和vuex。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br></pre></td></tr></table></figure><ol><li>在store.js文件中，用Vue.use对vuex进行引用。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(Vuex);</span><br></pre></td></tr></table></figure><p>4.在main.js 中引入新建的vuex文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/store&#x27;</span></span><br></pre></td></tr></table></figure><ol><li>Vuex 通过 store 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 Vue.use(Vuex)，通过在根实例中注册 store 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 this.$store 访问到。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/store&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span>,</span><br><span class="line">  components: &#123; App &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="四、使用"><a href="#四、使用" class="headerlink" title="四、使用"></a>四、使用</h3><ol><li>现在我们store.js文件里增加一个常量对象。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">state: &#123;</span><br><span class="line">  count: <span class="number">1</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol><li>用export default 封装代码，让外部可以引用。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  name: <span class="string">&#x27;store&#x27;</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>新建一个Vue的测试模板，位置在components文件夹下，名字随便起，我这里叫count.vue。在模板中我们使用输出count 的值（注意：由于前面已经将store注入到vue的实例中，故不需要再次引用）。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> &lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;msg&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">        &lt;h3&gt;&#123;&#123;$store.state.count&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">&#x27;Hello Vuex&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol><li>在store.js文件中加入两个改变state的方法。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment (state) &#123;</span><br><span class="line">    state.count += <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  decrement (state) &#123;</span><br><span class="line">    state.count -= <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在test.vue模板中加入两个按钮，并调用mutations中的方法。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$store.commit(&#x27;increment&#x27;)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$store.commit(&#x27;decrement&#x27;)&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>在router文件夹下的index.js中引用文件，定义对应的路由，运行程序并进入该界面，点击按钮查看效果</li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/count&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;Count&#x27;</span>,</span><br><span class="line">  component: Count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="五、state访问状态对象"><a href="#五、state访问状态对象" class="headerlink" title="五、state访问状态对象"></a>五、state访问状态对象</h3><blockquote><p>state，这个就是我们说的访问状态对象，它就是我们SPA（单页应用程序）中的共享值。</p></blockquote><p>访问状态对象赋值给内部对象，也就是把stroe.js中的值，赋值给我们模板里data中的值。有三种赋值方式</p><ol><li>通过computed的计算属性直接赋值<br>computed属性可以在输出前，对data中的值进行改变，我们就利用这种特性把store.js中的state值赋值给我们模板中的data值。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    <span class="function"><span class="title">count</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意的是return this.$store.state.count这一句，一定要写this，要不你会找不到$store的。这种写法很好理解，但是写起来是比较麻烦的，那我们来看看第二种写法。</p><ol start="2"><li>通过mapState的对象来赋值</li></ol><p>我们首先要用import引入mapState。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure><p>然后还在computed计算属性里写如下代码：（根据需要选用一种方法即可）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">computed: mapState(&#123;</span><br><span class="line">  <span class="comment">// 箭头函数可使代码更简练</span></span><br><span class="line">  count: <span class="function"><span class="params">state</span> =&gt;</span> state.count,   <span class="comment">// es6写法，function (state) &#123; return state.count &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 传字符串参数 &#x27;count&#x27; 等同于 `state =&gt; state.count`</span></span><br><span class="line">  countAlias: <span class="string">&#x27;count&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span></span><br><span class="line">  countPlusLocalState (state) &#123;</span><br><span class="line">    <span class="keyword">return</span> state.count + <span class="built_in">this</span>.localCount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">computed: mapState([</span><br><span class="line">  <span class="comment">// 映射 this.count 为 store.state.count</span></span><br><span class="line">  <span class="string">&#x27;count&#x27;</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><ol><li>还可以采用简化写法（个人比较喜欢这种写法本质上和第三种是一个意思，后面的mutations中也有类似的写法）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用对象展开运算符将此对象混入到外部对象中</span></span><br><span class="line">...mapState(&#123;</span><br><span class="line">  num: <span class="string">&#x27;count&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个算是最简单的写法了，在实际项目开发当中也经常这样使用。</p><h3 id="六、Mutations"><a href="#六、Mutations" class="headerlink" title="六、Mutations"></a>六、Mutations</h3><p>我们已经定义并且拿到了state的值，那么如何去改变他们的状态呢？<br>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。<br>每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数</p><ol><li>修改状态<br>Vuex提供了commit方法来修改状态，前边我们在给按钮添加点击事件时已经使用过该方法了，代码如下。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;$store.commit(&#x27;increment&#x27;)&quot;</span>&gt;+&lt;/button&gt;</span><br><span class="line">&lt;button @click=<span class="string">&quot;$store.commit(&#x27;decrement&#x27;)&quot;</span>&gt;-&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>store.js文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment (state) &#123;</span><br><span class="line">    state.count += <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  decrement (state) &#123;</span><br><span class="line">    state.count -= <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传值：这只是一个最简单的修改状态的操作，在实际项目中我们常常需要在修改状态时传值。比如上边的例子，是我们每次只加1，而现在我们要通过所传的值进行相加。其实我们只需要在Mutations里再加上一个参数，这个参数又称为mutation 的 载荷（payload），并在commit的时候传递就就可以了。我们来看具体代码：</p><p>现在store.js文件里给increment 方法加上一个参数n。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, n) &#123;</span><br><span class="line">    state.count += n</span><br><span class="line">  &#125;,</span><br><span class="line">  decrement (state) &#123;</span><br><span class="line">    state.count -= <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在count.vue里修改按钮的commit( )方法传递的参数，我们传递10，意思就是每次加10。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">  &lt;button @click=<span class="string">&quot;$store.commit(&#x27;increment &#x27;,10)&quot;</span>&gt;+&lt;/button&gt;</span><br><span class="line">  &lt;button @click=<span class="string">&quot;$store.commit(&#x27;decrement &#x27;)&quot;</span>&gt;-&lt;/button&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>在大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count += payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">store.commit(<span class="string">&#x27;increment&#x27;</span>, &#123;</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>更推荐的写法：对象风格的提交方式<br>提交 mutation 的另一种方式是直接使用包含 type 属性的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">store.commit(&#123;</span><br><span class="line">  type: <span class="string">&#x27;increment&#x27;</span>,</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>上面的写法还是复杂了点，有没有更简单的呢，答案是肯定的，模板获取Mutations方法</li></ol><p>实际开发中我们也不喜欢看到$store.commit( )这样的方法出现，我们希望跟调用模板里的方法一样调用。</p><p>例如：@click=”reduce” 就和没引用vuex插件一样。要达到这种写法，只需要简单的两部就可以了：</p><p>1）、在模板count.vue里用import 引入我们的mapMutations：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState,mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br></pre></td></tr></table></figure><p>2）、在模板的&lt;\script&gt;标签里添加methods属性，并加入mapMutations</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">methods:mapMutations([</span><br><span class="line">  <span class="string">&#x27;increment &#x27;</span></span><br><span class="line">]),</span><br></pre></td></tr></table></figure><p>通过上边两部，我们已经可以在模板中直接使用我们的reduce或者add方法了，就像下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;increment(&#123;amount: 10&#125;)&quot;</span>&gt;-&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>同state一样，该写法也可以利用对象展开运算符进行简化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...mapMutations(&#123;</span><br><span class="line">  add: <span class="string">&#x27;increment&#x27;</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;add(&#123;amount: 10&#125;)&quot;</span>&gt;-&lt;/button&gt;</span><br></pre></td></tr></table></figure><h3 id="七、getters计算过滤操作"><a href="#七、getters计算过滤操作" class="headerlink" title="七、getters计算过滤操作"></a>七、getters计算过滤操作</h3><p>getters从表面是获得的意思，可以把他看作在获取数据之前进行的一种再编辑,相当于对数据的一个过滤和加工。你可以把它看作store.js的计算属性。</p><ol><li>getters基本用法：<br>比如我们现在要对store.js文件中的count进行一个计算属性的操作，就是在它输出前，给它加上100.我们首先要在store.js里用const声明我们的getters属性。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  count: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (state.count += <span class="number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在store.js里的配置算是完成了，我们需要到模板页对computed进行配置。在vue 的构造器里边只能有一个computed属性，如果你写多个，只有最后一个computed属性可用，所以要对上节课写的computed属性进行一个改造。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...mapState(&#123;</span><br><span class="line">  name: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">  count () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.$store.getters.count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;&#123;&#123;count&#125;&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure><p>需要注意的是，你写了这个配置后，在每次count 的值发生变化的时候，都会进行加100的操作。</p><ol start="2"><li>用mapGetters简化模板写法</li></ol><p>我们都知道state和mutations都有map的引用方法把我们模板中的编码进行简化，我们的getters也是有的，我们来看一下代码。<br>首先用import引入我们的mapGetters</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState, mapMutations, mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure><p>在computed属性中加入mapGetters</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...mapGetters(&#123;</span><br><span class="line">    counted: <span class="string">&#x27;count&#x27;</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="八、actions异步修改状态"><a href="#八、actions异步修改状态" class="headerlink" title="八、actions异步修改状态"></a>八、actions异步修改状态</h3><p>actions和之前讲的Mutations功能基本一样，不同点是，actions是异步的改变state状态，而Mutations是同步改变状态。</p><ol><li>在store.js中声明actions<br>actions是可以调用Mutations里的方法的，我们还是继续在上节课的代码基础上进行学习，在actions里调用increment和decrement两个方法。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  incrementAsync (&#123; commit &#125;, payload) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">&#x27;increment&#x27;</span>, payload)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  decrementAction (context) &#123;</span><br><span class="line">    context.commit(<span class="string">&#x27;decrement&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在actions里写了两个方法incrementAction 和decrementAction ，在方法体里，我们都用commit调用了Mutations里边的方法。细心的小伙伴会发现这两个方法传递的参数也不一样。</p><ul><li>  ontext：上下文对象，这里你可以理解成store本身。</li><li>  {commit}：直接把commit对象传递过来，可以让方法体逻辑和代码更清晰明了。</li></ul><ol start="2"><li>模板中的使用</li></ol><p>我们需要在count.vue模板中编写代码，让actions生效。我们先复制两个以前有的按钮，并改成我们的actions里的方法名，分别是：incrementAction 和decrementAction 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;incrementAction(&#123;amount: 10&#125;)&quot;</span>&gt;+action&lt;/button&gt;</span><br><span class="line">&lt;button @click=<span class="string">&quot;$store.commit(&#x27;decrementAction&#x27;)&quot;</span>&gt;-action&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>改造一下我们的methods方法，首先还是用扩展运算符把mapMutations和mapActions加入。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  ...mapActions(&#123;</span><br><span class="line">      incrementAsync: <span class="string">&#x27;incrementAsync&#x27;</span>, <span class="comment">// 将 `this.add()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span></span><br><span class="line">    decrementAction: <span class="string">&#x27;decrementAction&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>你还要记得用import把我们的mapActions引入才可以使用。</p><h3 id="九、module模块组"><a href="#九、module模块组" class="headerlink" title="九、module模块组"></a>九、module模块组</h3><p>随着项目的复杂性增加，我们共享的状态越来越多，这时候我们就需要把我们状态的各种操作进行一个分组，分组后再进行按组编写。那今天我们就学习一下module：状态管理器的模块组操作。</p><ol><li>声明模块组：</li></ol><p>在vuex/store.js中声明模块组，我们还是用我们的const常量的方法声明模块组。代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA=&#123;</span><br><span class="line">    state,mutations,getters,actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明好后，我们需要修改原来 Vuex.Stroe里的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    modules:&#123;<span class="attr">a</span>:moduleA&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>在模板中使用</li></ol><p>现在我们要在模板中使用count状态，要用插值的形式写入。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;&#123;&#123;$store.state.a.count&#125;&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure><p>如果想用简单的方法引入，还是要在我们的计算属性中rutrun我们的状态。写法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    <span class="function"><span class="title">count</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.a.count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、什么是Vuex&quot;&gt;&lt;a href=&quot;#一、什么是Vuex&quot; class=&quot;headerlink&quot; title=&quot;一、什么是Vuex&quot;&gt;&lt;/a&gt;一、什么是Vuex&lt;/h3&gt;&lt;p&gt;Vuex 是一个专为 Vue.js 应用程序开发的&lt;strong&gt;状态管理模式&lt;/s</summary>
      
    
    
    
    <category term="前端漫谈" scheme="https://fenpho.github.io/categories/%E5%89%8D%E7%AB%AF%E6%BC%AB%E8%B0%88/"/>
    
    
    <category term="Vue, Vuex" scheme="https://fenpho.github.io/tags/Vue-Vuex/"/>
    
  </entry>
  
  <entry>
    <title>前端必备技能之Photosh切图</title>
    <link href="https://fenpho.github.io/2018/09/26/%E5%89%8D%E7%AB%AF%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD%E4%B9%8BPhotosh%E5%88%87%E5%9B%BE/"/>
    <id>https://fenpho.github.io/2018/09/26/%E5%89%8D%E7%AB%AF%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD%E4%B9%8BPhotosh%E5%88%87%E5%9B%BE/</id>
    <published>2018-09-26T13:07:14.000Z</published>
    <updated>2023-01-11T15:13:04.855Z</updated>
    
    <content type="html"><![CDATA[<p>切图：即从设计稿里面切出网页素材</p><h3 id="一、使用Photoshop工具"><a href="#一、使用Photoshop工具" class="headerlink" title="一、使用Photoshop工具"></a>一、使用Photoshop工具</h3><p>工具的使用：</p><h4 id="1-将文字与标尺的单位的设置为像素"><a href="#1-将文字与标尺的单位的设置为像素" class="headerlink" title="1.将文字与标尺的单位的设置为像素"></a>1.将文字与标尺的单位的设置为像素</h4><p><img src="1.png" alt="image"><br><img src="2.png" alt="image"></p><h4 id="2-打开这五个窗口，关闭其它窗口，保存工作区方便以后使用"><a href="#2-打开这五个窗口，关闭其它窗口，保存工作区方便以后使用" class="headerlink" title="2.打开这五个窗口，关闭其它窗口，保存工作区方便以后使用"></a>2.打开这五个窗口，关闭其它窗口，保存工作区方便以后使用</h4><p><img src="3.png" alt="image"><br><img src="4.png" alt="image"><br><img src="5.png" alt="image"></p><h4 id="3-工作区弄乱时，可以使用上图中的复位，或者在下图中选择工作区："><a href="#3-工作区弄乱时，可以使用上图中的复位，或者在下图中选择工作区：" class="headerlink" title="3.工作区弄乱时，可以使用上图中的复位，或者在下图中选择工作区："></a>3.工作区弄乱时，可以使用上图中的复位，或者在下图中选择工作区：</h4><p><img src="6.png" alt="image"></p><h4 id="4-切图常用工具"><a href="#4-切图常用工具" class="headerlink" title="4.切图常用工具"></a>4.切图常用工具</h4><p><img src="7.png" alt="image"></p><p>注意：在工具菜单栏中右击会出现同组备选工具：</p><p><img src="8.png" alt="image"></p><h4 id="5-放大缩小画布："><a href="#5-放大缩小画布：" class="headerlink" title="5.放大缩小画布："></a>5.放大缩小画布：</h4><p>1）.点击缩放工具</p><p><img src="9.png" alt="image"></p><p>2）.ctrl 　+　加号/减号 </p><p>3）.alt 　+　鼠标滚轮</p><h4 id="6-辅助视图"><a href="#6-辅助视图" class="headerlink" title="6.辅助视图"></a>6.辅助视图</h4><p><img src="10.png" alt="image"></p><p>标尺快捷键：ctrl + r</p><h4 id="7-获取文字大小和行高"><a href="#7-获取文字大小和行高" class="headerlink" title="7.获取文字大小和行高"></a>7.获取文字大小和行高</h4><p>1）.文字是单独图层，使用文字工具点击，即可在选项栏中看见相关参数。</p><p>2）.文字是不是单独的图层，使用文字工具，在这些文字中随便挑两个字（如果测行高则需要一行两个）写上，设置字体，字号，用他遮盖原来的文字，一样即可。</p><p><img src="11.png" alt="image"></p><h4 id="8-矩形选框"><a href="#8-矩形选框" class="headerlink" title="8.矩形选框"></a>8.矩形选框</h4><p><img src="12.png" alt="image"></p><h4 id="9-巧用添加到选区，在左边画一个选区，按住shift（将新画的矩形添加到选区）在右边画一个选区即可知道宽度。"><a href="#9-巧用添加到选区，在左边画一个选区，按住shift（将新画的矩形添加到选区）在右边画一个选区即可知道宽度。" class="headerlink" title="9.巧用添加到选区，在左边画一个选区，按住shift（将新画的矩形添加到选区）在右边画一个选区即可知道宽度。"></a>9.巧用添加到选区，在左边画一个选区，按住shift（将新画的矩形添加到选区）在右边画一个选区即可知道宽度。</h4><p><img src="13.png" alt="image"></p><h4 id="10-取色"><a href="#10-取色" class="headerlink" title="10.取色"></a>10.取色</h4><p><img src="14.png" alt="image"></p><h4 id="11-用取色工具判断背景是否为纯色，上下左右等多处点击看颜色值是否一样"><a href="#11-用取色工具判断背景是否为纯色，上下左右等多处点击看颜色值是否一样" class="headerlink" title="11.用取色工具判断背景是否为纯色，上下左右等多处点击看颜色值是否一样"></a>11.用取色工具判断背景是否为纯色，上下左右等多处点击看颜色值是否一样</h4><p><img src="15.png" alt="image"></p><p>配合魔术棒判断是否是线性渐变，将容差调0。</p><p><img src="16.png" alt="image"></p><h3 id="二、切图"><a href="#二、切图" class="headerlink" title="二、切图"></a>二、切图</h3><h4 id="1-哪些需要切："><a href="#1-哪些需要切：" class="headerlink" title="1.哪些需要切："></a>1.哪些需要切：</h4><p><img src="17.png" alt="image"><br><img src="18.png" alt="image"></p><h4 id="２-隐藏文字只留背景："><a href="#２-隐藏文字只留背景：" class="headerlink" title="２.隐藏文字只留背景："></a>２.隐藏文字只留背景：</h4><p><img src="19.png" alt="image"></p><p>矩形选框选中后，复制张贴，选中该图层，使用自由变换拉伸即可</p><p><img src="20.png" alt="image"></p><h4 id="３-切图，在图层工具栏对应的图层上面右击"><a href="#３-切图，在图层工具栏对应的图层上面右击" class="headerlink" title="３.切图，在图层工具栏对应的图层上面右击"></a>３.切图，在图层工具栏对应的图层上面右击</h4><p><img src="21.png" alt="image"></p><p>同一个图层：</p><p><img src="22.png" alt="image"></p><p>不同图层：使用合并组（ctrl +Ｅ）</p><p><img src="23.png" alt="image"></p><p>带背景切图：</p><p><img src="24.png" alt="image"></p><h4 id="4-裁剪画布"><a href="#4-裁剪画布" class="headerlink" title="4.裁剪画布"></a>4.裁剪画布</h4><p><img src="25.png" alt="image"></p><h4 id="5-平铺图片切法"><a href="#5-平铺图片切法" class="headerlink" title="5.平铺图片切法"></a>5.平铺图片切法</h4><p><img src="26.png" alt="image"></p><h4 id="6-切片工具，或者矩形选框无法复制时"><a href="#6-切片工具，或者矩形选框无法复制时" class="headerlink" title="6.切片工具，或者矩形选框无法复制时"></a>6.切片工具，或者矩形选框无法复制时</h4><p><img src="27.png" alt="image"></p><h3 id="三、保存图片"><a href="#三、保存图片" class="headerlink" title="三、保存图片"></a>三、保存图片</h3><p>要保存为web所用格式：</p><p><img src="28.png" alt="image"></p><h4 id="１-保存类型一"><a href="#１-保存类型一" class="headerlink" title="１.保存类型一"></a>１.保存类型一</h4><p><img src="29.png" alt="image"></p><h4 id="２-保存类型二"><a href="#２-保存类型二" class="headerlink" title="２.保存类型二"></a>２.保存类型二</h4><p><img src="30.png" alt="image"></p><h4 id="３-保存类型三"><a href="#３-保存类型三" class="headerlink" title="３.保存类型三"></a>３.保存类型三</h4><p><img src="31.png" alt="image"></p><h4 id="４-保存类型四"><a href="#４-保存类型四" class="headerlink" title="４.保存类型四"></a>４.保存类型四</h4><p><img src="32.png" alt="image"></p><h4 id="5-修改与维护"><a href="#5-修改与维护" class="headerlink" title="5.修改与维护"></a>5.修改与维护</h4><p>更改画布：</p><p><img src="33.png" alt="image"></p><p>移动图标：</p><p><img src="34.png" alt="image"></p><p>可能遇见的问题</p><p>１）.不能完成拷贝命令,所选区域是空的</p><p>这个问题很简单 新手容易犯的错误 你注意你的图层 虽然你表面选的是某一区域 但由于不是当前活动图层 而你选的区域是当前图层的空白处，将你要剪切的那部分图层设为当前就可以了</p><p>２）.png８修改颜色失真：</p><p><img src="35.png" alt="image"></p><h3 id="四、使用背景图"><a href="#四、使用背景图" class="headerlink" title="四、使用背景图"></a>四、使用背景图</h3><p><img src="36.png" alt="image"></p><h3 id="五、图片合并方案"><a href="#五、图片合并方案" class="headerlink" title="五、图片合并方案"></a>五、图片合并方案</h3><p>好处：减少网络请求，提升网页加载速度</p><p>图例：</p><p><img src="37.png" alt="image"></p><p><strong>原则</strong></p><p><img src="38.png" alt="image"></p><p>1）.大小与质量之间做取舍，达到平衡</p><p>图片压缩工具：</p><p><img src="39.png" alt="image"></p><p>2).保留空隙，便于与维护</p><p><img src="40.png" alt="image"></p><p>3）.雪碧图（sprite）的排列方式</p><p><img src="41.png" alt="image"></p><h3 id="六、浏览器兼容"><a href="#六、浏览器兼容" class="headerlink" title="六、浏览器兼容"></a>六、浏览器兼容</h3><p>法一：采用优雅降级，给高级浏览器用户提供更好的体验</p><p>法二：高级浏览器使用ｃｓｓ３，ＩＥ６使用贴图达到相同效果。</p><p><img src="42.png" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;切图：即从设计稿里面切出网页素材&lt;/p&gt;
&lt;h3 id=&quot;一、使用Photoshop工具&quot;&gt;&lt;a href=&quot;#一、使用Photoshop工具&quot; class=&quot;headerlink&quot; title=&quot;一、使用Photoshop工具&quot;&gt;&lt;/a&gt;一、使用Photoshop工具&lt;/</summary>
      
    
    
    
    <category term="前端漫谈" scheme="https://fenpho.github.io/categories/%E5%89%8D%E7%AB%AF%E6%BC%AB%E8%B0%88/"/>
    
    
    <category term="Photoshop" scheme="https://fenpho.github.io/tags/Photoshop/"/>
    
  </entry>
  
  <entry>
    <title>JS和CSS实现响应式</title>
    <link href="https://fenpho.github.io/2018/06/06/JS%E5%92%8CCSS%E5%AE%9E%E7%8E%B0%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    <id>https://fenpho.github.io/2018/06/06/JS%E5%92%8CCSS%E5%AE%9E%E7%8E%B0%E5%93%8D%E5%BA%94%E5%BC%8F/</id>
    <published>2018-06-06T06:07:28.000Z</published>
    <updated>2023-01-11T14:38:05.867Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一、CSS实现响应式</strong></p><p>CSS响应式的实现主要依赖于CSS媒体查询：</p><p>媒体查询包含一个可选的媒体类型和零或多个表达式来限制使用媒体特性的样式表范围,例如：width，height，color。<a href="https://developer.mozilla.org/en-US/docs/CSS/CSS3">CSS3</a>中的Media queries让内容的呈现可以只针对特定范围的输出设备而不必去改变内容本身。即通过媒体查询判断屏幕宽度，加载不同的CSS样式表</p><p>代码如下：注意一定要有一个默认样式表不加媒体查询，否则在IE8中访问时会没有样式表。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">　&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">　&lt;title&gt;响应式的演示&lt;/title&gt;</span><br><span class="line">　&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/reset.css&quot; /&gt;</span><br><span class="line">　&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/index1200.css&quot; /&gt;</span><br><span class="line">　&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/index980.css&quot; media=&quot;screen and (min-width:980px) and (max-width:1200px)&quot;/&gt;</span><br><span class="line">　&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/index640.css&quot; media=&quot;screen and (min-width:640px) and (max-width:980px)&quot;/&gt;</span><br><span class="line">　&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/index320.css&quot; media=&quot;screen and (max-width:640px)&quot;/&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p><strong>二、JS实现响应式</strong></p><p>JS响应式的实现也是依托于外联不同的CSS样式表，通过获取不同设备的屏幕宽度，选择性加载不同的CSS样式表。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;响应式的演示&lt;/title&gt;</span><br><span class="line">  &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;css/reset.css&quot;</span> /&gt;</span><br><span class="line">  &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;css/index1200.css&quot;</span> /&gt;</span><br><span class="line">  &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;rwdlink&quot;</span> /&gt;</span><br><span class="line">  &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">  　<span class="keyword">var</span> rwdlink = <span class="built_in">document</span>.getElementById(<span class="string">&quot;rwdlink&quot;</span>);</span><br><span class="line">  　setCSS();</span><br><span class="line">  　<span class="built_in">window</span>.onresize = setCSS;</span><br><span class="line">  　<span class="function"><span class="keyword">function</span> <span class="title">setCSS</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  　　<span class="keyword">var</span> windowWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">  　　<span class="keyword">if</span>(windowWidth &gt;= <span class="number">1200</span>)&#123;</span><br><span class="line">  　　　　rwdlink.href = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  　　&#125;<span class="keyword">else</span> <span class="keyword">if</span>(windowWidth &gt;= <span class="number">980</span>)&#123;</span><br><span class="line">  　　　　rwdlink.href = <span class="string">&quot;css/index980.css&quot;</span>;</span><br><span class="line">  　　&#125;<span class="keyword">else</span> <span class="keyword">if</span>(windowWidth &gt;= <span class="number">640</span>)&#123;</span><br><span class="line">  　　　　rwdlink.href = <span class="string">&quot;css/index640.css&quot;</span>;</span><br><span class="line">  　　&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  　　　　rwdlink.href = <span class="string">&quot;css/index320.css&quot;</span>;</span><br><span class="line">  　　&#125;</span><br><span class="line">  　&#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;一、CSS实现响应式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CSS响应式的实现主要依赖于CSS媒体查询：&lt;/p&gt;
&lt;p&gt;媒体查询包含一个可选的媒体类型和零或多个表达式来限制使用媒体特性的样式表范围,例如：width，height，color。&lt;a href=&quot;ht</summary>
      
    
    
    
    <category term="前端漫谈" scheme="https://fenpho.github.io/categories/%E5%89%8D%E7%AB%AF%E6%BC%AB%E8%B0%88/"/>
    
    
    <category term="Javascript, CSS" scheme="https://fenpho.github.io/tags/Javascript-CSS/"/>
    
  </entry>
  
  <entry>
    <title>两种常见跨域方式</title>
    <link href="https://fenpho.github.io/2018/04/12/%E4%B8%A4%E7%A7%8D%E5%B8%B8%E8%A7%81%E8%B7%A8%E5%9F%9F%E6%96%B9%E5%BC%8F/"/>
    <id>https://fenpho.github.io/2018/04/12/%E4%B8%A4%E7%A7%8D%E5%B8%B8%E8%A7%81%E8%B7%A8%E5%9F%9F%E6%96%B9%E5%BC%8F/</id>
    <published>2018-04-12T14:42:23.000Z</published>
    <updated>2023-01-11T14:14:16.306Z</updated>
    
    <content type="html"><![CDATA[<p>Ajax不能跨域，比如您是<code>www.baidu.com</code>，您就不能请求<code>www.163.com</code>的文件。但您可以请求<code>www.baidu.com/1.json</code>、<code>ent.baidu.com/1.json</code>。这是浏览器的安全策略导致的，XHR类型的请求，如果来自其他的服务器，将不予应答。</p><h3 id="一、使用jsonp"><a href="#一、使用jsonp" class="headerlink" title="一、使用jsonp"></a>一、使用jsonp</h3><p>JSONP是JSON with Padding的略称。它是一个非官方的协议，出处不可考，它允许在服务器端集成Script tags返回至客户端，通过javascript callback的形式实现跨域访问（这仅仅是JSONP简单的实现形式）。–来源百度</p><p>SONP就像是JSON+Padding一样(Padding这里我们理解为调用函数时的填充)。</p><p><img src="1.png" alt="image"></p><p>绿色部分是JSON，外面的fun();是函数的调用，是padding补充部分。</p><p>jsonp的原理很简单，就是把定义写在了HTML源文件里面，而将调用放在script标签引用的文件里面，由于script标签可以跨文件使用，这样就实现了跨域，引用的文件可以有各种格式php 、js、txt等。</p><p>下面举个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">  <span class="comment">// 定义函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    alert(obj.result[<span class="number">1</span>].name)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入数据 --&gt;</span><br><span class="line">&lt;srcipt type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;xxx/jsonp.txt&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>jsonp.txt里面的内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用函数</span></span><br><span class="line">fun(&#123;</span><br><span class="line">    <span class="string">&quot;result&quot;</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span> : <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">            <span class="string">&quot;age&quot;</span> : <span class="number">12</span>,</span><br><span class="line">            <span class="string">&quot;sex&quot;</span> : <span class="string">&quot;男&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span> : <span class="string">&quot;小红&quot;</span>,</span><br><span class="line">            <span class="string">&quot;age&quot;</span> : <span class="number">13</span>,</span><br><span class="line">            <span class="string">&quot;sex&quot;</span> : <span class="string">&quot;女&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span> : <span class="string">&quot;小绿&quot;</span>,</span><br><span class="line">            <span class="string">&quot;age&quot;</span> : <span class="number">16</span>,</span><br><span class="line">            <span class="string">&quot;sex&quot;</span> : <span class="string">&quot;女&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="2.png" alt="image"></p><p>由于这样使用起来不方便，我们可以将它封装成一个实用轮子：</p><p><img src="3.png" alt="image"></p><p>jQuery已经有封装好的API可以直接使用：名称是ajax（）<br>可以查看jQuery手册，参考如下</p><p><img src="4.png" alt="image"></p><h3 id="二、CORS"><a href="#二、CORS" class="headerlink" title="二、CORS"></a>二、CORS</h3><p>利用 CORS，<code>http://www.test2.com</code>只需在响应中添加一个标头，就可以允许来自<code>http://www.test1.com</code>的请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// *号表示允许任何域向我们的服务端提交请求</span></span><br><span class="line">Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure><p>也可以设置指定的域名，如域名<code>http://www.test2.com</code>，那么就允许来自这个域名的请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// *号表示允许任何域向我们的服务端提交请求</span></span><br><span class="line">Access-Control-Allow-Origin: http:<span class="comment">//www.test2.com</span></span><br></pre></td></tr></table></figure><p>当前我设置的header为“<em>”，任意一个请求过来之后服务端我们都可以进行处理&amp;响应，那么在调试工具中可以看到其头信息设置，其中见红框中有一项信息是“Access-Control-Allow-Origin：</em> ”，表示我们已经启用CORS，如下图。</p><p><img src="5.png" alt="image"></p><p>简单的一个header设置，一个支持跨域&amp;POST请求的server就完成了</p><p>当然，如果没有开启CORS必定失败的啦，如下图：</p><p><img src="6.jpg" alt="image">　　</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Ajax不能跨域，比如您是&lt;code&gt;www.baidu.com&lt;/code&gt;，您就不能请求&lt;code&gt;www.163.com&lt;/code&gt;的文件。但您可以请求&lt;code&gt;www.baidu.com/1.json&lt;/code&gt;、&lt;code&gt;ent.baidu.com/1.j</summary>
      
    
    
    
    <category term="前端漫谈" scheme="https://fenpho.github.io/categories/%E5%89%8D%E7%AB%AF%E6%BC%AB%E8%B0%88/"/>
    
    
    <category term="Ajax, Javascript" scheme="https://fenpho.github.io/tags/Ajax-Javascript/"/>
    
  </entry>
  
  <entry>
    <title>原生js之四步走搞定Ajax</title>
    <link href="https://fenpho.github.io/2018/03/22/%E5%8E%9F%E7%94%9Fjs%E4%B9%8B%E5%9B%9B%E6%AD%A5%E8%B5%B0%E6%90%9E%E5%AE%9AAjax/"/>
    <id>https://fenpho.github.io/2018/03/22/%E5%8E%9F%E7%94%9Fjs%E4%B9%8B%E5%9B%9B%E6%AD%A5%E8%B5%B0%E6%90%9E%E5%AE%9AAjax/</id>
    <published>2018-03-22T12:02:19.000Z</published>
    <updated>2023-01-11T15:20:35.426Z</updated>
    
    <content type="html"><![CDATA[<p>说到Ajax，不得不先提一下HTTP（HTTP，HyperText Transfer Protocol)协议，中文名：超文本传输协议，是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。<strong>一次HTTP请求，包含了两个重要的部分：上行request（请求）和下行response（响应）</strong>。<br><img src="1.png" alt="image"></p><p>　　HTTP协议定义了很多与服务器交互的方法，最基本的有4种，分别是GET,POST,PUT,DELETE. 一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT,DELETE就对应着对这个资源的查，改，增，删4个操作。 我们最常见的（也是我们关心的）就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。</p><p>我们看看GET和POST的区别：</p><ol><li><p>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456.  POST方法是把提交的数据放在HTTP包的Body中.</p></li><li><p>GET提交的数据大小有限制（因为浏览器对URL的长度有限制，本身并没有限制），而POST方法提交的数据没有限制。</p></li><li><p>GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码。</p></li></ol><p>如果你使用chrome浏览器的话，可以再下面的页面中看到这两种请求携带的信息:</p><p><img src="2.png" alt="image"><br><img src="3.png" alt="image"></p><p>　　通常，浏览器产生HTTP请求，是由于用户输入了新的网址、或者点击了超级链接，使页面跳转，这将导致页面的全局刷新。而Ajax（Asynchronous Javascript And XML：异步JavaScript和XML）技术，可以使网页悄悄地、偷偷地发起HTTP请求，请求回来的数据在页面局部刷新呈递。ajax的使用其实很简单：<br>第一步，new出一个XMLHttpRequest对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure><p>这里变量名xhr可以随便起，只是一般工程师都喜欢使用这个名字，就像var arr一样，姑且当做一种约定俗成的东西就好，方便大家交流。<br>第二步，处理服务器上面返回的响应：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">      callback(<span class="literal">null</span>, xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;没有找到请求的文件&quot;</span>), <span class="literal">undefined</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，if语句小括号中的的语句：readyState表示返回XMLHTTP请求的当前状态，具体数值示意如下：</p><blockquote><p>0 （未初始化）<br>对象已建立，但是尚未初始化（尚未调用open方法）<br>1 （初始化）<br>已调用send()方法，正在发送请求<br>2 （发送数据）<br>send方法调用完成，但是当前的状态及http头未知<br>3 （数据传送中）<br>已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误，<br>4 （完成）<br>数据接收完毕，此时可以通过通过responseBody和responseText获取完整的回应数据</p></blockquote><p>第三步，创建一个请求，第一个参数是请求的类型get或者post，第二个参数就是请求的路径，第三个参数叫做是否使用异步机制：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">&quot;post&quot;</span>, URL, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>如果是post请求，在发送请求前需要做以下处理（设置请求数据的格式，根据接口相应调整）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置为表单请求，若是json：&quot;application/json&quot;，常见的还有：multipart/form-data</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br></pre></td></tr></table></figure><p>第四步，发送请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.send(<span class="string">&quot;name=xxx&amp;age=18&quot;</span>);</span><br></pre></td></tr></table></figure><p>总结一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new出一个XMLHttpRequest对象：</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 处理返回</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">      callback(<span class="literal">null</span>, xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;没有找到请求的文件&quot;</span>), <span class="literal">undefined</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建请求</span></span><br><span class="line">xhr.open(<span class="string">&quot;post&quot;</span>, URL, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 设置格式并发送请求</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">xhr.send(<span class="string">&quot;name=xxx&amp;age=18&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="二、jQuery"><a href="#二、jQuery" class="headerlink" title="二、jQuery"></a>二、jQuery</h3><p>1.1 $.get()方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">&quot;a.json&quot;</span>  ,   &#123;<span class="string">&quot;id&quot;</span>:<span class="number">1</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;考拉&quot;</span>&#125;  ,  <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">alert(<span class="keyword">typeof</span> text);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>jQuery默默的帮我们：<br>1） encodingURIComponent中文了；<br>2） 如果请求是404等错误状态，不会执行回调函数；<br>3） jQuery识别传回来的东西像JSON，已经帮我们转JSON了，</p><p>jQuery中get方法还可以这样使用两个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">&quot;a.json?id=1&amp;name=枫&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">alert(<span class="keyword">typeof</span> text);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>1.2 $.post()方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.post(<span class="string">&quot;a.json&quot;</span>,&#123;<span class="string">&quot;id&quot;</span>:<span class="number">1</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;枫&quot;</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">alert(<span class="keyword">typeof</span> data);</span><br><span class="line">alert(data.content[<span class="number">2</span>].id);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>1.3 $.ajax()方法</p><p>配置信息非常多，写在json里面进行配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(<span class="string">&quot;b.json&quot;</span>,&#123;</span><br><span class="line"><span class="comment">//请求类型</span></span><br><span class="line"><span class="string">&quot;type&quot;</span>:   <span class="string">&quot;get&quot;</span>,</span><br><span class="line"><span class="comment">//传到服务器上的数据</span></span><br><span class="line"><span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>:<span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line"><span class="string">&quot;age&quot;</span> :<span class="number">10</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//成功做的事情</span></span><br><span class="line">  <span class="string">&quot;success&quot;</span> : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">typeof</span> data);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//错误做的事情</span></span><br><span class="line">  <span class="string">&quot;error&quot;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest, textStatus, errorThrown</span>)</span>&#123;</span><br><span class="line">    alert(errorThrown);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;说到Ajax，不得不先提一下HTTP（HTTP，HyperText Transfer Protocol)协议，中文名：超文本传输协议，是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。</summary>
      
    
    
    
    <category term="前端漫谈" scheme="https://fenpho.github.io/categories/%E5%89%8D%E7%AB%AF%E6%BC%AB%E8%B0%88/"/>
    
    
    <category term="Ajax, Javascript, jQuery" scheme="https://fenpho.github.io/tags/Ajax-Javascript-jQuery/"/>
    
  </entry>
  
  <entry>
    <title>前端作品集（三）小游戏开发--网页版2048</title>
    <link href="https://fenpho.github.io/2018/01/12/%E5%89%8D%E7%AB%AF%E4%BD%9C%E5%93%81%E9%9B%86%EF%BC%88%E4%B8%89%EF%BC%89%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E7%BD%91%E9%A1%B5%E7%89%882048/"/>
    <id>https://fenpho.github.io/2018/01/12/%E5%89%8D%E7%AB%AF%E4%BD%9C%E5%93%81%E9%9B%86%EF%BC%88%E4%B8%89%EF%BC%89%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-%E7%BD%91%E9%A1%B5%E7%89%882048/</id>
    <published>2018-01-12T13:12:16.000Z</published>
    <updated>2023-01-11T12:25:50.735Z</updated>
    
    <content type="html"><![CDATA[<p>有一款名为2048的游戏，设计简单，操作容易，上手快且经久不衰，那么它背后实现的原理又是什么呢？这篇文章是在慕课网学习<a href="http://www.imooc.com/learn/76">慕课网2048私人订制</a>的产物。</p><h3 id="一、游戏架构"><a href="#一、游戏架构" class="headerlink" title="一、游戏架构"></a>一、游戏架构</h3><p><img src="1.png" alt="游戏架构"><br>有上图可知，整个2048游戏共由五部分组成，分别是HTML和CSS负责页面的展示效果，JS控制游戏运行的逻辑，动画效果增加游戏的可玩性，还有一些底层的函数封装，提供个逻辑层调用，数据较为简单并入逻辑中。所以有以下的文件列表：</p><p><img src="2.png" alt="文件列表"></p><h3 id="二、页面UI的书写"><a href="#二、页面UI的书写" class="headerlink" title="二、页面UI的书写"></a>二、页面UI的书写</h3><p>1-1. HTML代码<br>游戏界面设计的较为简单，只要一个标题，使用h1标签，一个新游戏，使用a标签，一个得分使用p标签，剩下的就是游戏的小方格了，具体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>2048<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:newgame();&quot;</span> <span class="attr">id</span>=<span class="string">&quot;newgamebutton&quot;</span> <span class="attr">class</span>=<span class="string">&quot;newgamebutton&quot;</span>&gt;</span>New game<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>score: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;score&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;grid-container&quot;</span> <span class="attr">class</span>=<span class="string">&quot;grid-container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;grid-cell-0-0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;grid-cell-0-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;grid-cell-0-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;grid-cell-0-3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;grid-cell-1-0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;grid-cell-1-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;grid-cell-1-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;grid-cell-1-3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;grid-cell-2-0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;grid-cell-2-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;grid-cell-2-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;grid-cell-2-3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;grid-cell-3-0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;grid-cell-3-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;grid-cell-3-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;grid-cell-3-3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1-2. CSS部分<br>该部分主要写页面的样式，头部很简单，让宽度为100%，然后是头部中的每一个元素都居中，由于头部元素的宽度都不大，可以直接写死，如100px，然后采用margin: 0 auto进行居中即可<br>游戏的操作界面的话随意写一个固定宽度，让该样式在自己的浏览器里面看起来舒服就行，后面需要使用js重新计算并渲染宽度。详细的<a href="https://github.com/fenpho/works/blob/master/games/2048/index.css">CSS代码</a></p><h3 id="三、游戏逻辑开发"><a href="#三、游戏逻辑开发" class="headerlink" title="三、游戏逻辑开发"></a>三、游戏逻辑开发</h3><p>3-1. 页面加载完成后执行两个函数，如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">prepareForMobile();</span><br><span class="line">newgame();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中prepareForMobile()是用来重置整个游戏操作界面的宽高的，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepareForMobile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(documentWidth &gt; <span class="number">410</span>)&#123;</span><br><span class="line">gridcontainerWidth = <span class="number">410</span>;</span><br><span class="line">cellSpace = <span class="number">10</span>;</span><br><span class="line">cellSlideLength = <span class="number">90</span>;</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">&#x27;#grid-container&#x27;</span>).css(<span class="string">&#x27;width&#x27;</span>, gridcontainerWidth - <span class="number">2</span> * cellSpace);</span><br><span class="line">$(<span class="string">&#x27;#grid-container&#x27;</span>).css(<span class="string">&#x27;height&#x27;</span>, gridcontainerWidth - <span class="number">2</span> * cellSpace);</span><br><span class="line">$(<span class="string">&#x27;#grid-container&#x27;</span>).css(<span class="string">&#x27;padding&#x27;</span>, cellSpace);</span><br><span class="line">$(<span class="string">&#x27;#grid-container&#x27;</span>).css(<span class="string">&#x27;border-radius&#x27;</span>, <span class="number">0.02</span> * gridcontainerWidth);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;.grid-cell&#x27;</span>).css(<span class="string">&#x27;width&#x27;</span>, cellSlideLength);</span><br><span class="line">$(<span class="string">&#x27;.grid-cell&#x27;</span>).css(<span class="string">&#x27;height&#x27;</span>, cellSlideLength);</span><br><span class="line">$(<span class="string">&#x27;.grid-cell&#x27;</span>).css(<span class="string">&#x27;border-radius&#x27;</span>, <span class="number">0.02</span> * cellSlideLength);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>newgame()则是游戏的入口程序，每次点击新游戏的时候也会执行该函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newgame</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">init();</span><br><span class="line">generateOneNumber();</span><br><span class="line">generateOneNumber();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数内容包含两个模块，一个是初始化模块，初始化模块里面做了3件事：</p><ol><li>通过jQuery让每一个数字的背景归位。</li><li>将所有数字初始化为零。</li><li>重新渲染页面</li></ol><p>另一个是生成随机数字的模块，核心是通过Math.random生成随机数字。</p><p>3-2. 游戏循环</p><p><img src="3.png" alt="image.png"><br> 毫无疑问，2048是属于基于玩家响应的游戏循环（图中文字错误），所以该有对用的操作，以及操作对应的响应。这一部分主要有js的时间监听完成</p><ol><li>键盘事件监听<br>主要针对键盘上面的上下左右四个按键进行监听，当按键按下时，执行响应的函数，并且生成新的随机数，随后判断游戏界面中是否还存在空格，如果满了，是否可以进行移动，确定游戏是继续循环还是结束。下面以左按钮事件为例：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).keydown(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(event.keyCode)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">37</span>:<span class="comment">//left</span></span><br><span class="line">event.preventDefault();</span><br><span class="line"><span class="keyword">if</span>(moveLeft())&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(generateOneNumber, <span class="number">210</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(isgameover, <span class="number">300</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveLeft</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!canMoveLeft(board))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//move left</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; <span class="number">4</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(board[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; j; k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(board[i][k] == <span class="number">0</span> &amp;&amp; noBlockHorizontal(i, k, j, board))&#123;</span><br><span class="line"><span class="comment">//move</span></span><br><span class="line">showMoveAnimation(i, j, i, k);</span><br><span class="line">board[i][k] = board[i][j];</span><br><span class="line">board[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(board[i][k] == board[i][j] &amp;&amp; noBlockHorizontal(i, k, j, board) &amp;&amp; !hasConflicted[i][k])&#123;</span><br><span class="line"><span class="comment">//move</span></span><br><span class="line">showMoveAnimation(i, j, i, k);</span><br><span class="line"><span class="comment">//add</span></span><br><span class="line">board[i][k] += board[i][j];</span><br><span class="line">board[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//add score</span></span><br><span class="line">score += board[i][k];</span><br><span class="line">updateScore(score);</span><br><span class="line">hasConflicted[i][k] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(updateBoardView, <span class="number">200</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当左按钮按下后，首先判断能否进行左移动，不行的话，直接退出函数，可以的话，往下执行，使用双层for循环，判断<br>(1). 当前格子是否为空且往左边移动的过程中没有别的数字挡着道路，成立的话，执行左移<br>(2). 当前格子与其左边格子的数字是否相同，且中间无别的内容，使得话，左移并且执行加法操作，合并数字<br>当函数执行结束后，重新渲染页面<br>2.触摸事件监听<br>触摸事件的监听主要是针对移动端而添加的<br>主要是通过touch事件完成，在touchstart中记录触摸的起点坐标event.touches[0].pageX和event.touches[0].pageY;在touchend中记录触摸结束点的坐标：event.changedTouches[0].pageX和event.changedTouches[0].pageY，然后进行运算，比较差值，得到deltaX和deltaY，可以分为以下四种情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">Math</span>.abs(delatX) &gt;= <span class="built_in">Math</span>.abs(delatY))&#123;</span><br><span class="line"><span class="comment">//x</span></span><br><span class="line"><span class="keyword">if</span>(delatX &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//move right</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//move left</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//y</span></span><br><span class="line"><span class="keyword">if</span>(delatY &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//move down</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//move up</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即，通过比较x和y的大小确定在哪个轴上面移动，然后根据值得正负判断具体的方向。动作执行后的响应与PC端是一致的。</p><h3 id="四、一些细节"><a href="#四、一些细节" class="headerlink" title="四、一些细节"></a>四、一些细节</h3><ol><li>游戏结束的判断，当四个方向都不能移动，且没有空格子时游戏结束</li><li>得分的处理，设置一个全局的变量score，在执行移动时，一旦发生相加操作，将相加的数值作为分数加入score中</li><li>动画的处理，通过jQuery的aninate函数完成</li></ol><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p>游戏开发的过程中，首要的事情就是搞懂游戏的逻辑以及核心是什么，在2048中，逻辑就是响应用户的操作，进行不同的反馈，核心为，键盘按下和手指滑动时的处理，是否能够移动，移动的方向，移动后是否需要对数字进行操作。在将移动的过程展示出来即可。</p><p>最后，附上项目源码：<a href="https://github.com/fenpho/resume/tree/master/works/games/2048">GitHub项目仓库 </a><br>项目预览：<a href="https://fenpho.github.io/resume/works/games/2048/">点击我</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有一款名为2048的游戏，设计简单，操作容易，上手快且经久不衰，那么它背后实现的原理又是什么呢？这篇文章是在慕课网学习&lt;a href=&quot;http://www.imooc.com/learn/76&quot;&gt;慕课网2048私人订制&lt;/a&gt;的产物。&lt;/p&gt;
&lt;h3 id=&quot;一、游戏架构</summary>
      
    
    
    
    <category term="前端漫谈" scheme="https://fenpho.github.io/categories/%E5%89%8D%E7%AB%AF%E6%BC%AB%E8%B0%88/"/>
    
    
    <category term="作品" scheme="https://fenpho.github.io/tags/%E4%BD%9C%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>前端作品集（二）移动端页面开发--携程网</title>
    <link href="https://fenpho.github.io/2017/12/16/%E5%89%8D%E7%AB%AF%E4%BD%9C%E5%93%81%E9%9B%86%EF%BC%88%E4%BA%8C%EF%BC%89%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91-%E6%90%BA%E7%A8%8B%E7%BD%91/"/>
    <id>https://fenpho.github.io/2017/12/16/%E5%89%8D%E7%AB%AF%E4%BD%9C%E5%93%81%E9%9B%86%EF%BC%88%E4%BA%8C%EF%BC%89%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91-%E6%90%BA%E7%A8%8B%E7%BD%91/</id>
    <published>2017-12-16T02:16:37.000Z</published>
    <updated>2023-01-11T11:44:19.292Z</updated>
    
    <content type="html"><![CDATA[<p>随着移动设备的普及的普及，人们越来越习惯使用移动设备来访问网页，所以学会如何开发移动端页面是一个前端必备的技能。</p><h3 id="一、页面的整体布局"><a href="#一、页面的整体布局" class="headerlink" title="一、页面的整体布局"></a>一、页面的整体布局</h3><p>先上图，做完后的效果如下图所示：<br><img src="1.png" alt="网站预览"><br>从图中很容易发现，整个页面有以下一部分组成：</p><ol><li>页头和页脚</li><li>轮播图，也就是banner，作为广告展示部分</li><li>整个网站的导航部分</li><li>携程的产品位</li><li>活动部分，分为特卖汇和热门活动两部分</li></ol><h3 id="二、HTML结构"><a href="#二、HTML结构" class="headerlink" title="二、HTML结构"></a>二、HTML结构</h3><h5 id="3-1-HTML整体结构"><a href="#3-1-HTML整体结构" class="headerlink" title="3-1. HTML整体结构"></a>3-1. HTML整体结构</h5><p>由于移动端对各种HTML5和CSS3的新特性的支持和好，所以可以采用HTML5的新标签属性内容，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>携程在手·说走就走<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 头部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- banner --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 导航部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 产品 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;products&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 特卖汇 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;temaihui&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 热门活动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;huodong&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 页脚 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意，由于是移动端的页面，所以需要加上视口标签，即<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code><br>后面content跟的是一些具体属性，如设备宽度，缩放程度等，有兴趣的同学可以自己去了解下。</p><h5 id="3-2-详细的HTML书写"><a href="#3-2-详细的HTML书写" class="headerlink" title="3-2. 详细的HTML书写"></a>3-2. 详细的HTML书写</h5><p>头部由两个div构成，一个包裹input搜索框，一个作为用户中心</p><p>特卖汇部分采用了定义列表dl、dd、dt的展示方式</p><p>活动的头部统一采用h3包裹标题，div携带右边的图文</p><p>剩余的部分都是采用无序列表的形式展现ul、li，在li里面写具体的信息</p><p>网页的底部使用a标签包裹一些跳转链接</p><h3 id="三、CSS编写"><a href="#三、CSS编写" class="headerlink" title="三、CSS编写"></a>三、CSS编写</h3><p>使用了便于页面缩放的单位rem，作为编写单位，配合百分比布局实现整体框架布局，圆角部分是由border-radius实现的。当该属性的值为50%，就能显示一个圆，常用该特性做头像框。</p><p>头部，采用固定定位fixed的方式布局，user部分使用绝对定位，定位到页面的右上角，搜索宽的大盒子宽度为100%；使用padding-right流出右边user的位置，内部的input设为100%即可</p><p>剩下的部分，都是采用父盒子宽度为100%，子元素根据需求分配，如33%的导航部分，50%的活动部分</p><p>由于有的地方要加上边框和内边距，默认的盒模型是采用向外扩张的方式的，所以一旦加上边框或者内边距就会超过100%的宽度，变为上下两行排列，这不是我们需要的，故每一处用到的边框的标签，都要加上box-sizing为boder-box的声明，让实际分配宽度等于分配的百分比，让盒子内部留出边框和内边距的空间。</p><h3 id="四、移动端的轮播效果"><a href="#四、移动端的轮播效果" class="headerlink" title="四、移动端的轮播效果"></a>四、移动端的轮播效果</h3><p>移动端的轮播效果的触发是由触摸事件触发的，不同于PC端的点击事件，故要采用新的书写方式。</p><p>首先执行一个初始化函数，让轮播图的宽度等于设备的宽度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//var windowWidth = document.documentElement.clientWidth;</span></span><br><span class="line">  <span class="keyword">var</span> windowWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">  <span class="keyword">var</span> bannerWidth = <span class="built_in">parseInt</span>(getComputedStyle(banner)[<span class="string">&quot;width&quot;</span>]);</span><br><span class="line">  <span class="comment">//设置banner高度</span></span><br><span class="line">  banner.style.height = bannerWidth / (<span class="number">1242</span> / <span class="number">248</span>) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设计图540宽，540状态下的font-size我们自己设置了一个15px。</span></span><br><span class="line">  <span class="comment">//所以当前的字号就要按比例来：</span></span><br><span class="line">  <span class="comment">// document.documentElement.style.fontSize = 15 * (windowWidth / 540) + &quot;px&quot;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着写事件监听函数，移动的触摸事件touch，有三部分组成，分别为touchstart，touchmove和touchend</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//事件监听</span></span><br><span class="line">banner.addEventListener(<span class="string">&quot;touchstart&quot;</span>,touchstartHandler,<span class="literal">false</span>);</span><br><span class="line">banner.addEventListener(<span class="string">&quot;touchmove&quot;</span>,touchmoveHandler,<span class="literal">false</span>);</span><br><span class="line">banner.addEventListener(<span class="string">&quot;touchend&quot;</span>,touchendHandler,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>移动端触摸，又分为点击和滑动两种，判断的依据就是滑动的距离和操作的时间戳（开始触摸时的时间减去结束触摸时的时间）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果你像右边滑动超过了屏幕的一半，或者你向右边滑动且时间小于500，就认为滑动成功</span></span><br><span class="line"><span class="keyword">if</span>(distance &gt;= windowWidth / <span class="number">2</span> || (distance &gt; <span class="number">30</span> &amp;&amp; time &lt; <span class="number">300</span>))</span><br></pre></td></tr></table></figure><p>然后根据具体的左右滑动做相应的处理即可。</p><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p>移动端页面的开发，能采用百分比布局的地方尽量采用百分比布局，如果一定要写单位，那么请用rem或者em（不推荐）为单位，便于使用@media时放大或缩小整个页面，还有，在开发移动端时，一些新的特性，能使用的就放心大胆的使用，如果实在不知道能不能用，可以访问该网站<a href="http://caniuse.com/">can i use</a>.</p><p>最后，附上项目源码：<a href="https://github.com/fenpho/resume/tree/master/works/ctrip">GitHub项目仓库 </a><br>项目预览：<a href="https://fenpho.github.io/resume/works/ctrip/">点击我</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;随着移动设备的普及的普及，人们越来越习惯使用移动设备来访问网页，所以学会如何开发移动端页面是一个前端必备的技能。&lt;/p&gt;
&lt;h3 id=&quot;一、页面的整体布局&quot;&gt;&lt;a href=&quot;#一、页面的整体布局&quot; class=&quot;headerlink&quot; title=&quot;一、页面的整体布局&quot;</summary>
      
    
    
    
    <category term="前端漫谈" scheme="https://fenpho.github.io/categories/%E5%89%8D%E7%AB%AF%E6%BC%AB%E8%B0%88/"/>
    
    
    <category term="作品" scheme="https://fenpho.github.io/tags/%E4%BD%9C%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>前端作品集（一）PC端页面开发--博雅互动</title>
    <link href="https://fenpho.github.io/2017/11/26/%E5%89%8D%E7%AB%AF%E4%BD%9C%E5%93%81%E9%9B%86%EF%BC%88%E4%B8%80%EF%BC%89PC%E7%AB%AF%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91-%E5%8D%9A%E9%9B%85%E4%BA%92%E5%8A%A8/"/>
    <id>https://fenpho.github.io/2017/11/26/%E5%89%8D%E7%AB%AF%E4%BD%9C%E5%93%81%E9%9B%86%EF%BC%88%E4%B8%80%EF%BC%89PC%E7%AB%AF%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91-%E5%8D%9A%E9%9B%85%E4%BA%92%E5%8A%A8/</id>
    <published>2017-11-26T00:12:27.000Z</published>
    <updated>2023-01-10T14:26:11.320Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、序言"><a href="#一、序言" class="headerlink" title="一、序言"></a>一、序言</h3><p>学习的初级阶段都是从模仿开始的，就像练字一样，需要经历描摹临三个阶段，第一阶段：</p><blockquote><p>描，即是用笔直接在范字上描着写。</p></blockquote><p>拿到我们前端学习来说就是照着教程中的代码写一遍。<br>接着进入第二阶段：</p><blockquote><p>摹，即是用透明纸蒙在范字上，在透明纸上描着范字写。</p></blockquote><p>对应于前端学习就是在教程的代码的基础上做一些小小的调整。<br>最后一个阶段：</p><blockquote><p>临，即是比着范字，边看边写。</p></blockquote><p>此时应该做到的就是能够像素级的还原设计图了。</p><p>当然前端需要学习的内容不应该止步于还原设计稿，但是一口吃不成胖子是不，所以今天先来一个简单的仿站，从页面布局下手。本次仿的为博雅互动，简介如下：</p><blockquote><p>深圳市东方博雅科技有限公司是中国最早社交棋牌游戏开发及运营商，主打多款热门网络棋牌游戏，德州扑克、斗地主、麻将等多款游戏，支持网页及iPhone、iPad、Android版本，多年来深受广大用户喜欢。</p></blockquote><h3 id="二、分析页面的结构"><a href="#二、分析页面的结构" class="headerlink" title="二、分析页面的结构"></a>二、分析页面的结构</h3><p><img src="1.png" alt="网站预览"></p><p>从上图可以看出，页面页面有一个很明显的版心，经测量为1200px，整个页面可以初步划分为头部，内容和页脚三大部分，其中内容又可以划分为轮播，产品展示和信息模块块。</p><p>由此，可以写出如下的页面骨架：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;information&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然如果不考虑兼容性或者引入HTML5标签解析的js的话，<a href="https://github.com/aFarkas/html5shiv">解析js传送门</a>可以使用最新的标签，语义化更好，具体如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;information&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、根据语义化在页面的骨架中填入相应的标签和内容"><a href="#三、根据语义化在页面的骨架中填入相应的标签和内容" class="headerlink" title="三、根据语义化在页面的骨架中填入相应的标签和内容"></a>三、根据语义化在页面的骨架中填入相应的标签和内容</h3><h5 id="1-头部"><a href="#1-头部" class="headerlink" title="1. 头部"></a>1. 头部</h5><p>接着写头部，头部主要组成为logo，导航栏以及加入我们，可以让logo和导航栏一起左浮动，加入我们右浮动实现页面中的布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner_c&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>博雅互动-专业游戏网站<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;first current&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;game.html&quot;</span>&gt;</span>博雅游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;news.html&quot;</span>&gt;</span>博雅新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>客服中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>投资者关系<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>校园大使<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;joinus&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>加入我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-页面的主体结构"><a href="#2-页面的主体结构" class="headerlink" title="2. 页面的主体结构"></a>2. 页面的主体结构</h5><p>轮播图部分的实现使用了大量的无需列表，分别如下：</p><ol><li>轮播图部分的每张图片</li><li>产品展示的每一个产品都用li标签包裹</li><li>每一条新闻和招聘信息<br>除此之外，就是使用span标签包裹词组，利用a标签包裹需要跳转的内容，还有一些小标题为了更好的语义化，使用h4标签。</li></ol><p>由于主题部分的代码较多就不一一贴上，可以到<a href="https://github.com/fenpho/works/blob/master/boya/index.html">我的github</a>上面查看</p><h5 id="3-页脚"><a href="#3-页脚" class="headerlink" title="3. 页脚"></a>3. 页脚</h5><p>页脚主要由两个div组合而成，比较简单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner_c&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>网站地图<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>免责声明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;copyright&quot;</span>&gt;</span></span><br><span class="line">      Copyright © 2004 - 2016 博雅互动(Boyaa Interactive) </span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>粤ICP备05062536号<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      增值电信业务经营许可证：粤B2-20110513</span><br><span class="line">      ![](images/govIcon.gif)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="四、CSS部分"><a href="#四、CSS部分" class="headerlink" title="四、CSS部分"></a>四、CSS部分</h3><p>CSS的书写主要分为四个文件</p><ol><li>common.css 主要存放页面的公用部分，一般为页头，页脚部分，有时会包括轮播图，广告等部分，主要看该网站的首页和各个子页面之间有多少重复的结构。</li><li>reset.css 重置默认的CSS样式，便于统一页面在各个浏览器之间的展示，去除不必要的默认样式，比如a标签的下划线，li标签默认的小圆点以及各种盒模型相关的属性等等</li><li>index.css 首页专属的CSS布局代码</li><li>base.css 一些原子类，这些类是在各个模块中可能大量使用的样式，如下部分原子类展示：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.f12</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;</span><br><span class="line"><span class="selector-class">.f13</span>&#123;<span class="attribute">font-size</span>:<span class="number">13px</span>;&#125;</span><br><span class="line"><span class="selector-class">.f14</span>&#123;<span class="attribute">font-size</span>:<span class="number">14px</span>;&#125;</span><br><span class="line"><span class="selector-class">.f16</span>&#123;<span class="attribute">font-size</span>:<span class="number">16px</span>;&#125;</span><br><span class="line"><span class="selector-class">.f20</span>&#123;<span class="attribute">font-size</span>:<span class="number">20px</span>;&#125;</span><br><span class="line"><span class="selector-class">.fb</span>&#123;<span class="attribute">font-weight</span>:bold;&#125;</span><br><span class="line"><span class="selector-class">.fn</span>&#123;<span class="attribute">font-weight</span>:normal;&#125;</span><br><span class="line"><span class="selector-class">.t2</span>&#123;<span class="attribute">text-indent</span>:<span class="number">2em</span>;&#125;</span><br><span class="line"><span class="selector-class">.lh150</span>&#123;<span class="attribute">line-height</span>:<span class="number">150%</span>&#125;</span><br><span class="line"><span class="selector-class">.lh180</span>&#123;<span class="attribute">line-height</span>:<span class="number">180%</span>&#125;</span><br><span class="line"><span class="selector-class">.lh200</span>&#123;<span class="attribute">line-height</span>:<span class="number">200%</span>&#125;</span><br><span class="line"><span class="selector-class">.unl</span>&#123;<span class="attribute">text-decoration</span>:underline;&#125;</span><br><span class="line"><span class="selector-class">.no_unl</span>&#123;<span class="attribute">text-decoration</span>:none;&#125;</span><br><span class="line"><span class="selector-class">.nomargin</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span> <span class="meta">!important</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tl</span>&#123;<span class="attribute">text-align</span><span class="selector-pseudo">:left</span>;&#125;</span><br><span class="line"><span class="selector-class">.tc</span>&#123;<span class="attribute">text-align</span>:center;&#125;</span><br><span class="line"><span class="selector-class">.tr</span>&#123;<span class="attribute">text-align</span><span class="selector-pseudo">:right</span>;&#125;</span><br><span class="line"><span class="selector-class">.bc</span>&#123;<span class="attribute">margin-left</span>:auto;<span class="attribute">margin-right</span>:auto;&#125;</span><br><span class="line"><span class="selector-class">.fl</span>&#123;<span class="attribute">float</span><span class="selector-pseudo">:left</span>;<span class="attribute">display</span>:inline;&#125;</span><br><span class="line"><span class="selector-class">.fr</span>&#123;<span class="attribute">float</span><span class="selector-pseudo">:right</span>;<span class="attribute">display</span>:inline;&#125;</span><br><span class="line"><span class="selector-class">.cb</span>&#123;<span class="attribute">clear</span>:both;&#125;</span><br><span class="line"><span class="selector-class">.cl</span>&#123;<span class="attribute">clear</span><span class="selector-pseudo">:left</span>;&#125;</span><br><span class="line"><span class="selector-class">.cr</span>&#123;<span class="attribute">clear</span><span class="selector-pseudo">:right</span>;&#125;</span><br></pre></td></tr></table></figure><p>当页面中有上述的样式时，直接引用对用的样式即可</p><h3 id="五、页面轮播效果"><a href="#五、页面轮播效果" class="headerlink" title="五、页面轮播效果"></a>五、页面轮播效果</h3><p>这博雅互动的仿站中，采用的是呼吸轮播的轮播效果，原理是将所有的图片使用绝对定位的方式摞在一起，只显示第一张图片，接着每隔一定时间，让最顶层的图片的opacity从1变为0，而第二张图片的变化与第一张相反，opacity从0变为1，这样就实现了一次呼吸轮播效果，循环往复即可</p><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>对于一个静态页面的开发，首相要分割出页面的总体结构，接着使用语义化的标签分别表示各个部分。<br>对于样式部分，则一般以浮动配合定位实现各种页面布局，只要有耐心，一像素一像素的调整，一定可以将样式调好。</p><p>最后，附上项目源码：<a href="https://github.com/fenpho/resume/tree/master/works/boya">GitHub项目仓库 </a><br>项目预览：<a href="https://fenpho.github.io/resume/works/boya/">点击我</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、序言&quot;&gt;&lt;a href=&quot;#一、序言&quot; class=&quot;headerlink&quot; title=&quot;一、序言&quot;&gt;&lt;/a&gt;一、序言&lt;/h3&gt;&lt;p&gt;学习的初级阶段都是从模仿开始的，就像练字一样，需要经历描摹临三个阶段，第一阶段：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;描</summary>
      
    
    
    
    <category term="前端漫谈" scheme="https://fenpho.github.io/categories/%E5%89%8D%E7%AB%AF%E6%BC%AB%E8%B0%88/"/>
    
    
    <category term="作品" scheme="https://fenpho.github.io/tags/%E4%BD%9C%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>git一些常用操作</title>
    <link href="https://fenpho.github.io/2017/09/26/git%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://fenpho.github.io/2017/09/26/git%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2017-09-26T12:33:54.000Z</published>
    <updated>2023-01-10T17:10:33.812Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、基础操作"><a href="#一、基础操作" class="headerlink" title="一、基础操作"></a>一、基础操作</h3><h4 id="1、初始化"><a href="#1、初始化" class="headerlink" title="1、初始化"></a>1、初始化</h4><p><code>git init</code></p><h4 id="2、添加文件"><a href="#2、添加文件" class="headerlink" title="2、添加文件"></a>2、添加文件</h4><p><code>git add . // 添加所有</code><br><code>git add README.md // 添加具体文件</code></p><h4 id="3、注释"><a href="#3、注释" class="headerlink" title="3、注释"></a>3、注释</h4><p><code>git commit -m &quot;do something&quot;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常用提交规范</span></span><br><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt; </span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><blockquote><p>type<br>1、feat：提交新的功能，feature。<br>2、fix：解决了 bug。<br>3、docs：修改的是文档相关的内容。<br>4、style：格式修改，没有修改代码逻辑。<br>5、refactor：重构代码，比如提取某段代码为一个方法、重构某个功能。<br>6、perf：性能、体验优化等，performance。<br>7、test：新增 test 用例或修改现有测试用例。<br>8、chore：非 src 和 test 的修改，比如构建流程, 依赖管理等。</p><p>scope<br>非必填，用于说明此次提交影响的范围，比如数据层、控制层、视图层等。</p><p>subject<br>必填，此次提交的简短描述。以动词小写开头，使用第一人称现在时，结尾不加标点。</p><p>body<br>非必填，可描述当前修改的行为详细信息或修改的目的。</p><p>页脚<br>非必填，以 BREAKING CHANGE 开头，后面是对变动的描述、以及变动理由和迁移方法。</p></blockquote><h4 id="4、添加远程仓库"><a href="#4、添加远程仓库" class="headerlink" title="4、添加远程仓库"></a>4、添加远程仓库</h4><p><code>// origin 远程仓库名称空格然后接具体地址</code><br><code>git remote add origin git@github.com:fenpho/kudzu-ui.git</code></p><h4 id="5、推送代码"><a href="#5、推送代码" class="headerlink" title="5、推送代码"></a>5、推送代码</h4><p><code>// 带上-u 参数其实就相当于记录了push到远端分支的默认值，这样当下次我们还想要继续push的这个远端分支的时候推送命令就可以简写成git push即可</code><br><code>git push -u origin master</code></p><h3 id="二、分支操作"><a href="#二、分支操作" class="headerlink" title="二、分支操作"></a>二、分支操作</h3><h4 id="1、查看、新建、删除以及重命名分支"><a href="#1、查看、新建、删除以及重命名分支" class="headerlink" title="1、查看、新建、删除以及重命名分支"></a>1、查看、新建、删除以及重命名分支</h4><p><code>git branch //查看本地所有分支</code><br><code>git branch -r //查看远程所有分支</code><br><code>git branch -a //查看本地和远程的所有分支</code><br><code>git branch &lt;branchname&gt; //新建分支</code><br><code>git branch -d &lt;branchname&gt; //删除本地分支</code><br><code>git branch -d -r &lt;branchname&gt; //删除远程分支，删除后还需推送到服务器</code><br><code>git push origin:&lt;branchname&gt; //删除后推送至服务器</code><br><code>git branch -m &lt;oldbranch&gt; &lt;newbranch&gt; //重命名本地分支</code></p><p><strong>tips: 重命名远程分支</strong></p><ol><li>删除远程待修改分支</li><li>push本地新分支到远程服务器</li></ol><p><strong>git中一些选项解释</strong></p><blockquote><p>-d<br>–delete：删除<br>-D<br>–delete –force的快捷键<br>-f<br>–force：强制<br>-m<br>–move：移动或重命名<br>-M<br>–move –force的快捷键<br>-r<br>–remote：远程<br>-a<br>–all：所有</p></blockquote><h4 id="2、切换分支"><a href="#2、切换分支" class="headerlink" title="2、切换分支"></a>2、切换分支</h4><p>切换分支<br><code>git checkout 分支名称</code><br>创建分支的同时，切换到该分支上<br><code>git checkout -b 新分支名称</code></p><h4 id="3、从远程仓库pull（拉取）代码到本地分支"><a href="#3、从远程仓库pull（拉取）代码到本地分支" class="headerlink" title="3、从远程仓库pull（拉取）代码到本地分支"></a>3、从远程仓库pull（拉取）代码到本地分支</h4><p>第一种方法：使用 git fetch（不用先在本地创建分支，是将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并到当前分支中）</p><p>把远程分支拉到本地<br><code>git fetch origin dev（dev为远程仓库的分支名）</code><br>第一次拉分支最好不用添加任何参数<br><code>// 此命令会自动为你创建并拉取远程分支</code><br><code>git fetch</code></p><p>第二种方法：使用git pull（要在本地先创建相应的分支然后再拉取，将远程主机的最新内容拉下来后直接合并，即：git pull = git fetch + git merge，这样可能会产生冲突，需要手动解决）,以下方法二选一。</p><p>在本地创建分支dev并切换到该分支<br><code>git checkout -b dev(本地分支名称) origin/dev(远程分支名称)</code><br>把某个分支上的内容都拉取到本地<br><code>git checkout dev(分支名)</code><br><code>git pull origin dev(远程分支名称)</code></p><h4 id="4、将新分支推送到远程仓库"><a href="#4、将新分支推送到远程仓库" class="headerlink" title="4、将新分支推送到远程仓库"></a>4、将新分支推送到远程仓库</h4><p><code>git push 仓库名 分支名称</code><br>假设我本地创建了一个名为dev的分支，远程仓库为origin，且远程还没有这个分支，推送的命令是：<br><code>git push --set-upstream origin dev</code><br><strong>分析：</strong><br>git分支与远程主机存在对应分支，可能是单个可能是多个。 </p><blockquote><p>simple方式：如果当前分支只有一个追踪分支，那么git push origin到远程仓库时，可以省略分支名。 </p><p>matching方式：如果当前分支与多个主机存在追踪关系，那么git push –set-upstream origin master（省略形式为：git push -u origin master）将本地的master分支推送到origin仓库（–set-upstream选项会指定一个默认分支），同时指定该仓库为默认仓库，后面使用可以不加任何参数使用git push。</p></blockquote><p><strong>注意：</strong><br>Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。</p><h4 id="5、删除分支"><a href="#5、删除分支" class="headerlink" title="5、删除分支"></a>5、删除分支</h4><p>删除本地分支（不能删除当前所在的分支，如果要删除，必须先切换到其他分支上）<br><code>git branch -d 分支名称</code><br>如果删除时报错，可以使用 -D 强制删除，代码如下：<br><code>git branch -D 分支名称</code><br>删除远程分支, 注意：分支名称前有个冒号<br><code>git push origin :分支名称</code><br>分支名前的冒号代表删除或者使用–delete参数, 等价如下：<br><code>git push origin --delete 分支名称</code></p><h4 id="6、合并分支"><a href="#6、合并分支" class="headerlink" title="6、合并分支"></a>6、合并分支</h4><p>假如我们现在位于分支dev上，刚开发完自己负责的功能，执行了下列命令：<br><code>git  add .</code><br><code>git  commit -m &#39;某某功能已完成，提交到[分支名称]分支&#39;</code><br><code>git  push origin dev</code><br>如果是多人开发的话，首先切换到master分支上<br><code>git checkout master</code><br>把远程master分支上的代码pull下来<br><code>git pull origin master</code><br>然后把dev分支的代码合并到master上<br><code>git merge master</code><br>如果git merge的时候出现冲突，处理冲突，推荐使用IDE工具处理<br>若是不想处理，直接使用远程的，可以执行下面的命令取消merge：<br><code>git merge --abort</code><br>然后记下本地修改，重置状态后，重新拉取远程代码合并后，添加上自己的代码<br>然后查看状态<br><code>git status</code><br>最后一步，Push推送到远程仓库<br><code>git push origin master</code></p><p><strong>推荐的协作方式：</strong><br>fork项目，通过merge request进行合并<br>首先fork项目到自己的名下<br>然后将合并后的代码推送到自己的仓库，发起合并请求到主仓库</p><p>知识点补充： </p><blockquote><p>什么是分支【branch】？<br>1.Git 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 与许多其它版本控制系统不同，Git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。 理解和精通这一特性，你便会意识到 Git 是如此的强大而又独特，并且从此真正改变你的开发方式。</p><p>2.Git保存的不是文件的变化或者差异，而是一系列不同时刻的快照 。在进行提交操作时，Git 会保存一个提交对象（commit object）。 该提交对象会包含一个指向暂存内容快照的指针，还包含了作者的姓名和邮箱，提交时输入的信息以及指向它的父对象的指针。 首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个父对象， 而由多个分支合并产生的提交对象有多个父对象。</p><p>3.分支在实际开发中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样既安全，又不影响别人工作。</p><p>什么是派生【fork】？<br>派生的意思就是分岔/支流，gitblit上的派生，实际上就是git的分支，主支是master</p></blockquote><h3 id="三、修改提交记录"><a href="#三、修改提交记录" class="headerlink" title="三、修改提交记录"></a>三、修改提交记录</h3><h4 id="1、查看提交记录"><a href="#1、查看提交记录" class="headerlink" title="1、查看提交记录"></a>1、查看提交记录</h4><p><code>git log</code><br>如果不带任何参数，它会列出所有历史记录，最近的排在最上方，显示提交对象的哈希值，作者、提交日期、和提交说明。如果记录过多，则按Page Up、Page Down、↓、↑来控制显示；按q退出历史记录列表。</p><blockquote><p>-n 如果不想向上面那样全部显示，可以选择显示前N条。</p></blockquote><h4 id="2、修改"><a href="#2、修改" class="headerlink" title="2、修改"></a>2、修改</h4><p><strong>只修改提交信息</strong></p><p>如果提交信息简单可以直接通过如下命令行完成:<br><code>git commit --amend -m &quot;new commit message&quot;</code></p><p>当需要为提交添加大量注释时，不添加参数，即直接使用<code>git commit --amend</code>进入vim编辑器编辑</p><blockquote><p>vim编辑器:<br>pick：保留该commit（缩写:p）<br>reword：保留该commit，但我需要修改该commit的注释（缩写:r）<br>edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）<br>squash：将该commit和前一个commit合并（缩写:s）<br>fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）<br>exec：执行shell命令（缩写:x）<br>drop：我要丢弃该commit（缩写:d）</p></blockquote><p><strong>只修改作者、邮箱</strong><br><code>git commit --amend --author=&quot;Author Name &lt;email@address.com&gt;&quot;</code></p><p>最后一次提交的话，直接根据需要运行上述命令就行，若是前边某次提交，看下边例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line"><span class="comment">// 如当前历史为 A-B-C(HEAD)，我想修改B和C，这两个commit的作者。</span></span><br><span class="line"><span class="comment">// 如果想改A则使用git rebase -i --root或者rebase到前面一次提交</span></span><br><span class="line">git rebase -i A</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按i，进入插入模式，将commit前的pick 改为 edit。按ESC，输入:wq。保存修改。</span></span><br><span class="line"><span class="comment">// 现在你已经开始可以修改，此时当前commit为B。</span></span><br><span class="line">git commit --amend -m <span class="string">&quot;new commit message&quot;</span> <span class="comment">// 修改B的提交</span></span><br><span class="line">git rebase --<span class="keyword">continue</span> <span class="comment">// 定位到C</span></span><br><span class="line">git commit --amend --author=<span class="string">&quot;Author Name &lt;email@address.com&gt;&quot;</span> <span class="comment">// 修改C的提交</span></span><br><span class="line">git rebase --<span class="keyword">continue</span> <span class="comment">// 修改已完成。</span></span><br><span class="line">git push -f <span class="comment">// 提交代码，大功告成。-f为强制推送（会用本地覆盖远程，需慎重）</span></span><br></pre></td></tr></table></figure><h3 id="四、修改配置信息"><a href="#四、修改配置信息" class="headerlink" title="四、修改配置信息"></a>四、修改配置信息</h3><p>当git全局设置的是公司的git的用户名和邮箱，但是在自己的github创建项目的时候，在提交的时候会出现公司的用户名和邮箱，这就需要进行一定配置</p><h4 id="1、设置当前项目的git用户名和邮箱"><a href="#1、设置当前项目的git用户名和邮箱" class="headerlink" title="1、设置当前项目的git用户名和邮箱"></a>1、设置当前项目的git用户名和邮箱</h4><p>设置用户名称<br><code>git config user.name &quot;yourname&quot;</code><br>设置用户邮箱<br><code>git config user.email &quot;123456@qq.com&quot; </code></p><h4 id="2、设置全局的git用户名和邮箱"><a href="#2、设置全局的git用户名和邮箱" class="headerlink" title="2、设置全局的git用户名和邮箱"></a>2、设置全局的git用户名和邮箱</h4><p>设置全局的用户名<br><code>git config --global user.name &quot;youname&quot;</code><br>设置全局的邮箱<br><code>git config --global user.email &quot;123456@qq.com&quot; </code></p><blockquote><p>取消配置：<code>git config --unset user.name</code>，如果全局的化加上global参数即可</p></blockquote><h4 id="3、查看git全局的用户名称name和用户邮箱email可以使用以下方式"><a href="#3、查看git全局的用户名称name和用户邮箱email可以使用以下方式" class="headerlink" title="3、查看git全局的用户名称name和用户邮箱email可以使用以下方式"></a>3、查看git全局的用户名称name和用户邮箱email可以使用以下方式</h4><p>查看全局的用户名<br><code>git config --global user.name</code><br>查看全局的邮箱<br><code>git config --global user.email</code><br>查看git当前项目的用户名、邮箱，去掉global参数即可</p><h4 id="4、git查看配置信息"><a href="#4、git查看配置信息" class="headerlink" title="4、git查看配置信息"></a>4、git查看配置信息</h4><p>config配置指令<br><code>git config</code><br>config 配置有system级别 global（用户级别） 和local（当前仓库）三个 设置先从system-》global-》local 底层配置会覆盖顶层配置 分别使用–system/global/local 可以定位到配置文件<br>查看系统级的配置信息<br><code>git config --system --list</code><br>查看用户级配置信息<br><code>git config --global --list</code><br>查看当前仓库配置信息<br><code>git config --local --list</code></p><h3 id="五、贮藏"><a href="#五、贮藏" class="headerlink" title="五、贮藏"></a>五、贮藏</h3><p>上版本master出现了bug，我们应该放下手头上新功能的开发工作先将master上的bug修复，这个时候dev分支下的改动怎么处理？ - 向dev分支提交新功能的代码，然后再切换到master下 - 直接切换到master分支下</p><p>首先我们新功能的代码还没开发完成，其次新功能这里还有一些bug没解决，就这样把有问题的代码提交到dev分支中，虽然可以解决目前我们的处境但不是很妥；但是第二种方案，直接切换，明显更不妥。怎么办？我们好像陷入了困境……</p><h4 id="1、单次贮藏"><a href="#1、单次贮藏" class="headerlink" title="1、单次贮藏"></a>1、单次贮藏</h4><p>别急，Git提供了一个git stash命令恰好可以完美解决该问题, 其将当前未提交的修改(即，工作区的修改和暂存区的修改)先暂时储藏起来，这样工作区干净了后，就可以切换切换到master分支下拉一个fix分支。在完成线上bug的修复工作后，重新切换到dev分支下通过git stash pop命令将之前储藏的修改取出来，继续进行新功能的开发工作<br>执行下述命令来储藏dev分支下的修改<br><code>git stash</code></p><p>然后执行<code>git status</code><br>可以看到此时我们的工作区已经干净了，dev分支中被修改的文件也已经恢复到了版本库中的版本，说明dev分支修改已经被储藏成功了。这个时候我们就可以放心的切换到master分支下去修复我们线上版本的bug了。线上bug修复完成后，我们就可以继续开始之前的新功能的开发了</p><p>先切换到dev分支下:<br><code>git checkout dev</code></p><p>最后，取出之前储藏的修改<br><code>git stash pop</code></p><blockquote><p><code>git stash pop</code>可取出最近一次储藏的修改到工作区中，并同时将该储藏从储藏记录列表中删除</p></blockquote><h4 id="2、多次储藏"><a href="#2、多次储藏" class="headerlink" title="2、多次储藏"></a>2、多次储藏</h4><p>从上面的介绍，让我们对git stash命令有了一个基本的使用认知，其实，该命令可以将当前工作区的修改储藏来实现清空工作区。但是我们做了两次储藏(即，修改-储藏-再修改-再储藏)会发生什么呢？</p><p>查看储藏记录列表<br><code>git stash list</code></p><p>我们发现两次储藏记录的标识信息完全一致，只有其前面的index有别，这让我们很难确定我们所需取出的文件修改是储藏在哪一个中。在git默认按如下规则标识储藏记录(WIP意为work in progess, index用于后面取出所对应储藏的修改)，由于我们在dev分支下的两次修改中均未发生提交，所以其最近一次的提交ID是一致的。<br><code>stash@&#123;index&#125;: WIP on [分支名]: [最近一次的commitID] [最近一次的提交信息]</code></p><p>标识储藏记录<br>可以通过下述命令来标记此次储藏，以便后期查看<br><code>git stash save &quot;stashMessage&quot;</code></p><p>取出储藏<br>前文提到的可以通过git stash pop用于取出最近一次储藏的修改到工作区，而通过查看储藏列表的index的可以取出指定储藏中的修改到工作区</p><p>取出指定index的储藏的修改到工作区中<br><code>git stash apply stash@&#123;index&#125;</code><br>将指定index的储藏从储藏记录列表中删除<br><code>git stash drop stash@&#123;index&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、基础操作&quot;&gt;&lt;a href=&quot;#一、基础操作&quot; class=&quot;headerlink&quot; title=&quot;一、基础操作&quot;&gt;&lt;/a&gt;一、基础操作&lt;/h3&gt;&lt;h4 id=&quot;1、初始化&quot;&gt;&lt;a href=&quot;#1、初始化&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="前端漫谈" scheme="https://fenpho.github.io/categories/%E5%89%8D%E7%AB%AF%E6%BC%AB%E8%B0%88/"/>
    
    
    <category term="Git" scheme="https://fenpho.github.io/tags/Git/"/>
    
  </entry>
  
</feed>
